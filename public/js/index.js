!function(e){var t={};function n(r){if(t[r])return t[r].exports;var o=t[r]={i:r,l:!1,exports:{}};return e[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var o in e)n.d(r,o,function(t){return e[t]}.bind(null,o));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=19)}([function(e,t,n){"use strict";e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var n=function(e,t){var n=e[1]||"",r=e[3];if(!r)return n;if(t&&"function"==typeof btoa){var o=(a=r,s=btoa(unescape(encodeURIComponent(JSON.stringify(a)))),u="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(s),"/*# ".concat(u," */")),i=r.sources.map((function(e){return"/*# sourceURL=".concat(r.sourceRoot||"").concat(e," */")}));return[n].concat(i).concat([o]).join("\n")}var a,s,u;return[n].join("\n")}(t,e);return t[2]?"@media ".concat(t[2]," {").concat(n,"}"):n})).join("")},t.i=function(e,n,r){"string"==typeof e&&(e=[[null,e,""]]);var o={};if(r)for(var i=0;i<this.length;i++){var a=this[i][0];null!=a&&(o[a]=!0)}for(var s=0;s<e.length;s++){var u=[].concat(e[s]);r&&o[u[0]]||(n&&(u[2]?u[2]="".concat(n," and ").concat(u[2]):u[2]=n),t.push(u))}},t}},function(e,t,n){"use strict";var r,o=function(){return void 0===r&&(r=Boolean(window&&document&&document.all&&!window.atob)),r},i=function(){var e={};return function(t){if(void 0===e[t]){var n=document.querySelector(t);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}e[t]=n}return e[t]}}(),a=[];function s(e){for(var t=-1,n=0;n<a.length;n++)if(a[n].identifier===e){t=n;break}return t}function u(e,t){for(var n={},r=[],o=0;o<e.length;o++){var i=e[o],u=t.base?i[0]+t.base:i[0],c=n[u]||0,l="".concat(u," ").concat(c);n[u]=c+1;var d=s(l),h={css:i[1],media:i[2],sourceMap:i[3]};-1!==d?(a[d].references++,a[d].updater(h)):a.push({identifier:l,updater:v(h,t),references:1}),r.push(l)}return r}function c(e){var t=document.createElement("style"),r=e.attributes||{};if(void 0===r.nonce){var o=n.nc;o&&(r.nonce=o)}if(Object.keys(r).forEach((function(e){t.setAttribute(e,r[e])})),"function"==typeof e.insert)e.insert(t);else{var a=i(e.insert||"head");if(!a)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");a.appendChild(t)}return t}var l,d=(l=[],function(e,t){return l[e]=t,l.filter(Boolean).join("\n")});function h(e,t,n,r){var o=n?"":r.media?"@media ".concat(r.media," {").concat(r.css,"}"):r.css;if(e.styleSheet)e.styleSheet.cssText=d(t,o);else{var i=document.createTextNode(o),a=e.childNodes;a[t]&&e.removeChild(a[t]),a.length?e.insertBefore(i,a[t]):e.appendChild(i)}}function p(e,t,n){var r=n.css,o=n.media,i=n.sourceMap;if(o?e.setAttribute("media",o):e.removeAttribute("media"),i&&btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(i))))," */")),e.styleSheet)e.styleSheet.cssText=r;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(r))}}var f=null,m=0;function v(e,t){var n,r,o;if(t.singleton){var i=m++;n=f||(f=c(t)),r=h.bind(null,n,i,!1),o=h.bind(null,n,i,!0)}else n=c(t),r=p.bind(null,n,t),o=function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(n)};return r(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap)return;r(e=t)}else o()}}e.exports=function(e,t){(t=t||{}).singleton||"boolean"==typeof t.singleton||(t.singleton=o());var n=u(e=e||[],t);return function(e){if(e=e||[],"[object Array]"===Object.prototype.toString.call(e)){for(var r=0;r<n.length;r++){var o=s(n[r]);a[o].references--}for(var i=u(e,t),c=0;c<n.length;c++){var l=s(n[c]);0===a[l].references&&(a[l].updater(),a.splice(l,1))}n=i}}}},function(e,t){e.exports=require("stream")},function(e,t){e.exports=require("http")},function(e,t){e.exports=require("url")},function(e,t,n){var r=n(1),o=n(6);"string"==typeof(o=o.__esModule?o.default:o)&&(o=[[e.i,o,""]]);var i={insert:"head",singleton:!1};r(o,i);e.exports=o.locals||{}},function(e,t,n){"use strict";n.r(t);var r=n(0),o=n.n(r)()(!0);o.push([e.i,"/*! destyle.css v1.0.14 | MIT License | https://github.com/nicolas-cusan/destyle.css */*{box-sizing:border-box}::before,::after{box-sizing:inherit}html{line-height:1.15;-webkit-text-size-adjust:100%;-webkit-tap-highlight-color:transparent}body{margin:0}main{display:block}p,table,blockquote,address,pre,iframe,form,figure,dl{margin:0}h1,h2,h3,h4,h5,h6{font-size:inherit;line-height:inherit;font-weight:inherit;margin:0}ul,ol{margin:0;padding:0;list-style:none}dt{font-weight:bold}dd{margin-left:0}hr{box-sizing:content-box;height:0;overflow:visible;border:0;border-top:1px solid;margin:0;clear:both;color:inherit}pre{font-family:monospace,monospace;font-size:inherit}address{font-style:inherit}a{background-color:transparent;text-decoration:none;color:inherit}abbr[title]{border-bottom:none;text-decoration:underline;text-decoration:underline dotted}b,strong{font-weight:bolder}code,kbd,samp{font-family:monospace,monospace;font-size:inherit}small{font-size:80%}sub,sup{font-size:75%;line-height:0;position:relative;vertical-align:baseline}sub{bottom:-0.25em}sup{top:-0.5em}img{border-style:none;vertical-align:bottom}embed,object,iframe{border:0;vertical-align:bottom}button,input,optgroup,select,textarea{-webkit-appearance:none;appearance:none;vertical-align:middle;color:inherit;font:inherit;border:0;background:transparent;padding:0;margin:0;outline:0;border-radius:0;text-align:inherit}[type=checkbox]{-webkit-appearance:checkbox;appearance:checkbox}[type=radio]{-webkit-appearance:radio;appearance:radio}button,input{overflow:visible}button,select{text-transform:none}button,[type=button],[type=reset],[type=submit]{cursor:pointer;-webkit-appearance:none;appearance:none}button[disabled],[type=button][disabled],[type=reset][disabled],[type=submit][disabled]{cursor:default}button::-moz-focus-inner,[type=button]::-moz-focus-inner,[type=reset]::-moz-focus-inner,[type=submit]::-moz-focus-inner{border-style:none;padding:0}button:-moz-focusring,[type=button]:-moz-focusring,[type=reset]:-moz-focusring,[type=submit]:-moz-focusring{outline:1px dotted ButtonText}select::-ms-expand{display:none}option{padding:0}fieldset{margin:0;padding:0;border:0;min-width:0}legend{color:inherit;display:table;max-width:100%;padding:0;white-space:normal}progress{vertical-align:baseline}textarea{overflow:auto}[type=number]::-webkit-inner-spin-button,[type=number]::-webkit-outer-spin-button{height:auto}[type=search]{outline-offset:-2px}[type=search]::-webkit-search-decoration{-webkit-appearance:none}::-webkit-file-upload-button{-webkit-appearance:button;font:inherit}label[for]{cursor:pointer}details{display:block}summary{display:list-item}[contenteditable]{outline:none}table{border-collapse:collapse;border-spacing:0}caption{text-align:left}td,th{vertical-align:top;padding:0}th{text-align:left;font-weight:bold}template{display:none}[hidden]{display:none}","",{version:3,sources:["webpack://node_modules/destyle.css/destyle.css"],names:[],mappings:"AAAA,sFAAA,CAKA,EACE,qBAAA,CAGF,iBAEE,kBAAA,CAYF,KACE,gBAAA,CACA,6BAAA,CACA,uCAAA,CAUF,KACE,QAAA,CAOF,KACE,aAAA,CAMF,qDASE,QAAA,CAMF,kBAME,iBAAA,CACA,mBAAA,CACA,mBAAA,CACA,QAAA,CAMF,MAEE,QAAA,CACA,SAAA,CACA,eAAA,CAMF,GACE,gBAAA,CAGF,GACE,aAAA,CAWF,GACE,sBAAA,CACA,QAAA,CACA,gBAAA,CACA,QAAA,CACA,oBAAA,CACA,QAAA,CACA,UAAA,CACA,aAAA,CAQF,IACE,+BAAA,CACA,iBAAA,CAGF,QACE,kBAAA,CAUF,EACE,4BAAA,CACA,oBAAA,CACA,aAAA,CAQF,YACE,kBAAA,CACA,yBAAA,CACA,gCAAA,CAOF,SAEE,kBAAA,CAQF,cAGE,+BAAA,CACA,iBAAA,CAOF,MACE,aAAA,CAQF,QAEE,aAAA,CACA,aAAA,CACA,iBAAA,CACA,uBAAA,CAGF,IACE,cAAA,CAGF,IACE,UAAA,CAUF,IACE,iBAAA,CACA,qBAAA,CAGF,oBAGE,QAAA,CACA,qBAAA,CAUF,sCAKE,uBAAA,CACA,eAAA,CACA,qBAAA,CACA,aAAA,CACA,YAAA,CACA,QAAA,CACA,sBAAA,CACA,SAAA,CACA,QAAA,CACA,SAAA,CACA,eAAA,CACA,kBAAA,CAOF,gBACE,2BAAA,CACA,mBAAA,CAGF,aACE,wBAAA,CACA,gBAAA,CAQF,aAGE,gBAAA,CAQF,cAGE,mBAAA,CAOF,gDAIE,cAAA,CACA,uBAAA,CACA,eAAA,CAGF,wFAIE,cAAA,CAOF,wHAIE,iBAAA,CACA,SAAA,CAOF,4GAIE,6BAAA,CAOF,mBACE,YAAA,CAOF,OACE,SAAA,CAOF,SACE,QAAA,CACA,SAAA,CACA,QAAA,CACA,WAAA,CAUF,OACE,aAAA,CACA,aAAA,CACA,cAAA,CACA,SAAA,CACA,kBAAA,CAOF,SACE,uBAAA,CAOF,SACE,aAAA,CAOF,kFAEE,WAAA,CAOF,cACE,mBAAA,CAOF,yCACE,uBAAA,CAQF,6BACE,yBAAA,CACA,YAAA,CAOF,WACE,cAAA,CAUF,QACE,aAAA,CAOF,QACE,iBAAA,CAOF,kBACE,YAAA,CAMF,MACE,wBAAA,CACA,gBAAA,CAGF,QACE,eAAA,CAGF,MAEE,kBAAA,CACA,SAAA,CAGF,GACE,eAAA,CACA,gBAAA,CAUF,SACE,YAAA,CAOF,SACE,YAAA",sourcesContent:['/*! destyle.css v1.0.14 | MIT License | https://github.com/nicolas-cusan/destyle.css */\n\n/* Reset box-model */\n/* ============================================ */\n\n* {\n  box-sizing: border-box;\n}\n\n::before,\n::after {\n  box-sizing: inherit;\n}\n\n/* Document */\n/* ============================================ */\n\n/**\n * 1. Correct the line height in all browsers.\n * 2. Prevent adjustments of font size after orientation changes in iOS.\n * 3. Remove gray overlay on links for iOS.\n */\n\nhtml {\n  line-height: 1.15; /* 1 */\n  -webkit-text-size-adjust: 100%; /* 2 */\n  -webkit-tap-highlight-color: transparent; /* 3*/\n}\n\n/* Sections */\n/* ============================================ */\n\n/**\n * Remove the margin in all browsers.\n */\n\nbody {\n  margin: 0;\n}\n\n/**\n * Render the `main` element consistently in IE.\n */\n\nmain {\n  display: block;\n}\n\n/* Vertical rhythm */\n/* ============================================ */\n\np,\ntable,\nblockquote,\naddress,\npre,\niframe,\nform,\nfigure,\ndl {\n  margin: 0;\n}\n\n/* Headings */\n/* ============================================ */\n\nh1,\nh2,\nh3,\nh4,\nh5,\nh6 {\n  font-size: inherit;\n  line-height: inherit;\n  font-weight: inherit;\n  margin: 0;\n}\n\n/* Lists (enumeration) */\n/* ============================================ */\n\nul,\nol {\n  margin: 0;\n  padding: 0;\n  list-style: none;\n}\n\n/* Lists (definition) */\n/* ============================================ */\n\ndt {\n  font-weight: bold;\n}\n\ndd {\n  margin-left: 0;\n}\n\n/* Grouping content */\n/* ============================================ */\n\n/**\n * 1. Add the correct box sizing in Firefox.\n * 2. Show the overflow in Edge and IE.\n */\n\nhr {\n  box-sizing: content-box; /* 1 */\n  height: 0; /* 1 */\n  overflow: visible; /* 2 */\n  border: 0;\n  border-top: 1px solid;\n  margin: 0;\n  clear: both;\n  color: inherit;\n}\n\n/**\n * 1. Correct the inheritance and scaling of font size in all browsers.\n * 2. Correct the odd `em` font sizing in all browsers.\n */\n\npre {\n  font-family: monospace, monospace; /* 1 */\n  font-size: inherit; /* 2 */\n}\n\naddress {\n  font-style: inherit;\n}\n\n/* Text-level semantics */\n/* ============================================ */\n\n/**\n * Remove the gray background on active links in IE 10.\n */\n\na {\n  background-color: transparent;\n  text-decoration: none;\n  color: inherit;\n}\n\n/**\n * 1. Remove the bottom border in Chrome 57-\n * 2. Add the correct text decoration in Chrome, Edge, IE, Opera, and Safari.\n */\n\nabbr[title] {\n  border-bottom: none; /* 1 */\n  text-decoration: underline; /* 2 */\n  text-decoration: underline dotted; /* 2 */\n}\n\n/**\n * Add the correct font weight in Chrome, Edge, and Safari.\n */\n\nb,\nstrong {\n  font-weight: bolder;\n}\n\n/**\n * 1. Correct the inheritance and scaling of font size in all browsers.\n * 2. Correct the odd `em` font sizing in all browsers.\n */\n\ncode,\nkbd,\nsamp {\n  font-family: monospace, monospace; /* 1 */\n  font-size: inherit; /* 2 */\n}\n\n/**\n * Add the correct font size in all browsers.\n */\n\nsmall {\n  font-size: 80%;\n}\n\n/**\n * Prevent `sub` and `sup` elements from affecting the line height in\n * all browsers.\n */\n\nsub,\nsup {\n  font-size: 75%;\n  line-height: 0;\n  position: relative;\n  vertical-align: baseline;\n}\n\nsub {\n  bottom: -0.25em;\n}\n\nsup {\n  top: -0.5em;\n}\n\n/* Embedded content */\n/* ============================================ */\n\n/**\n * Remove the border on images inside links in IE 10.\n */\n\nimg {\n  border-style: none;\n  vertical-align: bottom;\n}\n\nembed,\nobject,\niframe {\n  border: 0;\n  vertical-align: bottom;\n}\n\n/* Forms */\n/* ============================================ */\n\n/**\n * Reset form fields to make them styleable\n */\n\nbutton,\ninput,\noptgroup,\nselect,\ntextarea {\n  -webkit-appearance: none;\n  appearance: none;\n  vertical-align: middle;\n  color: inherit;\n  font: inherit;\n  border: 0;\n  background: transparent;\n  padding: 0;\n  margin: 0;\n  outline: 0;\n  border-radius: 0;\n  text-align: inherit;\n}\n\n/**\n * Reset radio and checkbox appearance to preserve their look in iOS.\n */\n\n[type="checkbox"] {\n  -webkit-appearance: checkbox;\n  appearance: checkbox;\n}\n\n[type="radio"] {\n  -webkit-appearance: radio;\n  appearance: radio;\n}\n\n/**\n * Show the overflow in IE.\n * 1. Show the overflow in Edge.\n */\n\nbutton,\ninput {\n  /* 1 */\n  overflow: visible;\n}\n\n/**\n * Remove the inheritance of text transform in Edge, Firefox, and IE.\n * 1. Remove the inheritance of text transform in Firefox.\n */\n\nbutton,\nselect {\n  /* 1 */\n  text-transform: none;\n}\n\n/**\n * Correct the inability to style clickable types in iOS and Safari.\n */\n\nbutton,\n[type="button"],\n[type="reset"],\n[type="submit"] {\n  cursor: pointer;\n  -webkit-appearance: none;\n  appearance: none;\n}\n\nbutton[disabled],\n[type="button"][disabled],\n[type="reset"][disabled],\n[type="submit"][disabled] {\n  cursor: default;\n}\n\n/**\n * Remove the inner border and padding in Firefox.\n */\n\nbutton::-moz-focus-inner,\n[type="button"]::-moz-focus-inner,\n[type="reset"]::-moz-focus-inner,\n[type="submit"]::-moz-focus-inner {\n  border-style: none;\n  padding: 0;\n}\n\n/**\n * Restore the focus styles unset by the previous rule.\n */\n\nbutton:-moz-focusring,\n[type="button"]:-moz-focusring,\n[type="reset"]:-moz-focusring,\n[type="submit"]:-moz-focusring {\n  outline: 1px dotted ButtonText;\n}\n\n/**\n * Remove arrow in IE10 & IE11\n */\n\nselect::-ms-expand {\n  display: none;\n}\n\n/**\n * Remove padding\n */\n\noption {\n  padding: 0;\n}\n\n/**\n * Reset to invisible\n */\n\nfieldset {\n  margin: 0;\n  padding: 0;\n  border: 0;\n  min-width: 0;\n}\n\n/**\n * 1. Correct the text wrapping in Edge and IE.\n * 2. Correct the color inheritance from `fieldset` elements in IE.\n * 3. Remove the padding so developers are not caught out when they zero out\n *    `fieldset` elements in all browsers.\n */\n\nlegend {\n  color: inherit; /* 2 */\n  display: table; /* 1 */\n  max-width: 100%; /* 1 */\n  padding: 0; /* 3 */\n  white-space: normal; /* 1 */\n}\n\n/**\n * Add the correct vertical alignment in Chrome, Firefox, and Opera.\n */\n\nprogress {\n  vertical-align: baseline;\n}\n\n/**\n * Remove the default vertical scrollbar in IE 10+.\n */\n\ntextarea {\n  overflow: auto;\n}\n\n/**\n * Correct the cursor style of increment and decrement buttons in Chrome.\n */\n\n[type="number"]::-webkit-inner-spin-button,\n[type="number"]::-webkit-outer-spin-button {\n  height: auto;\n}\n\n/**\n * 1. Correct the outline style in Safari.\n */\n\n[type="search"] {\n  outline-offset: -2px; /* 1 */\n}\n\n/**\n * Remove the inner padding in Chrome and Safari on macOS.\n */\n\n[type="search"]::-webkit-search-decoration {\n  -webkit-appearance: none;\n}\n\n/**\n * 1. Correct the inability to style clickable types in iOS and Safari.\n * 2. Change font properties to `inherit` in Safari.\n */\n\n::-webkit-file-upload-button {\n  -webkit-appearance: button; /* 1 */\n  font: inherit; /* 2 */\n}\n\n/**\n * Clickable labels\n */\n\nlabel[for] {\n  cursor: pointer;\n}\n\n/* Interactive */\n/* ============================================ */\n\n/*\n * Add the correct display in Edge, IE 10+, and Firefox.\n */\n\ndetails {\n  display: block;\n}\n\n/*\n * Add the correct display in all browsers.\n */\n\nsummary {\n  display: list-item;\n}\n\n/*\n * Remove outline for editable content.\n */\n\n[contenteditable] {\n  outline: none;\n}\n\n/* Table */\n/* ============================================ */\n\ntable {\n  border-collapse: collapse;\n  border-spacing: 0;\n}\n\ncaption {\n  text-align: left;\n}\n\ntd,\nth {\n  vertical-align: top;\n  padding: 0;\n}\n\nth {\n  text-align: left;\n  font-weight: bold;\n}\n\n/* Misc */\n/* ============================================ */\n\n/**\n * Add the correct display in IE 10+.\n */\n\ntemplate {\n  display: none;\n}\n\n/**\n * Add the correct display in IE 10.\n */\n\n[hidden] {\n  display: none;\n}\n'],sourceRoot:""}]),t.default=o},function(e,t,n){var r=n(1),o=n(8);"string"==typeof(o=o.__esModule?o.default:o)&&(o=[[e.i,o,""]]);var i={insert:"head",singleton:!1};r(o,i);e.exports=o.locals||{}},function(e,t,n){"use strict";n.r(t);var r=n(0),o=n.n(r)()(!0);o.push([e.i,"@import url(https://fonts.googleapis.com/css2?family=Noto+Sans+JP&display=swap);"]),o.push([e.i,'body{width:100vw;height:100vh;background:gray;font-family:"Noto Sans JP",sans-serif}#video_dom{width:100%;height:100%;position:absolute;top:0;left:0;z-index:0}#overlay_canvas{width:100%;height:100%;position:absolute;top:0;left:0;z-index:1}.shutter_style{position:absolute;bottom:16px;left:50%;transform:translateX(-50%);z-index:2}#switcher{height:60px;width:60px;position:absolute;bottom:16px;left:16px;z-index:2}#error_p{position:fixed;top:50%;left:50%;transform:translate(-50%, -50%);z-index:2;color:#fff;white-space:nowrap}#ready_recog{position:absolute;bottom:16px;right:16px;z-index:2;color:#fff;cursor:pointer}#menu{transition:all .5s ease;height:208px;width:303px;background-color:rgba(0,0,0,.3);position:fixed;left:50%;transform:translateX(-50%);z-index:9999;color:#fff;font-size:16px;display:flex;flex-direction:column;align-items:center;justify-content:space-between;padding:16px;--mdc-theme-secondary: #000}#menu .menu_line{white-space:nowrap;width:100%;height:16px;display:flex;align-items:center;justify-content:space-between}#menu .menu_line label{display:flex;align-items:center}#menu .menu_line .mdc-slider{width:144px}#menu #add_face{cursor:pointer}#menu #remove_face{cursor:pointer}#menu #slide_button{background-color:rgba(0,0,0,.3);height:20px;width:168px;position:absolute;bottom:-20px;left:50%;transform:translateX(-50%)}#menu #slide_button #triangle{position:absolute;top:5px;left:50%;transform:translatex(-50%);height:0;width:0;border:10px solid transparent;border-top:10px solid rgba(255,255,255,.5);transition:all ease .5s}',"",{version:3,sources:["webpack://src/style.scss"],names:[],mappings:"AACA,KACI,WAAA,CACA,YAAA,CAEA,eAAA,CACA,qCAAA,CAEJ,WACI,UAAA,CACA,WAAA,CACA,iBAAA,CACA,KAAA,CACA,MAAA,CACA,SAAA,CAEJ,gBACI,UAAA,CACA,WAAA,CACA,iBAAA,CACA,KAAA,CACA,MAAA,CACA,SAAA,CAEJ,eACI,iBAAA,CACA,WAAA,CACA,QAAA,CACA,0BAAA,CACA,SAAA,CAEJ,UACI,WAAA,CACA,UAAA,CACA,iBAAA,CACA,WAAA,CACA,SAAA,CACA,SAAA,CAEJ,SACI,cAAA,CACA,OAAA,CACA,QAAA,CACA,+BAAA,CACA,SAAA,CACA,UAAA,CACA,kBAAA,CAEJ,aACI,iBAAA,CACA,WAAA,CACA,UAAA,CACA,SAAA,CACA,UAAA,CACA,cAAA,CAEJ,MACI,uBAAA,CACA,YAAA,CACA,WAAA,CACA,+BAAA,CACA,cAAA,CACA,QAAA,CACA,0BAAA,CACA,YAAA,CACA,UAAA,CACA,cAAA,CACA,YAAA,CACA,qBAAA,CACA,kBAAA,CACA,6BAAA,CACA,YAAA,CACA,2BAAA,CACA,iBACI,kBAAA,CACA,UAAA,CACA,WAAA,CACA,YAAA,CACA,kBAAA,CACA,6BAAA,CACA,uBACI,YAAA,CACA,kBAAA,CAEJ,6BACI,WAAA,CAGR,gBACI,cAAA,CAEJ,mBACI,cAAA,CAEJ,oBACI,+BAAA,CACA,WAAA,CACA,WAAA,CACA,iBAAA,CACA,YAAA,CACA,QAAA,CACA,0BAAA,CACA,8BACI,iBAAA,CACA,OAAA,CACA,QAAA,CACA,0BAAA,CACA,QAAA,CACA,OAAA,CACA,6BAAA,CACA,0CAAA,CACA,uBAAA",sourcesContent:["@import url('https://fonts.googleapis.com/css2?family=Noto+Sans+JP&display=swap');\r\nbody{\r\n    width: 100vw;\r\n    height: 100vh;\r\n    // background-color: #010101;\r\n    background: gray;\r\n    font-family: 'Noto Sans JP', sans-serif;\r\n}\r\n#video_dom{\r\n    width: 100%;\r\n    height: 100%;\r\n    position: absolute;\r\n    top: 0;\r\n    left: 0;\r\n    z-index: 0;\r\n}\r\n#overlay_canvas{\r\n    width: 100%;\r\n    height: 100%;\r\n    position: absolute;\r\n    top: 0;\r\n    left: 0;\r\n    z-index: 1;\r\n}\r\n.shutter_style{\r\n    position: absolute;\r\n    bottom: 16px;\r\n    left: 50%;\r\n    transform: translateX(-50%);\r\n    z-index: 2;\r\n}\r\n#switcher{\r\n    height: 60px;\r\n    width: 60px;\r\n    position: absolute;\r\n    bottom: 16px;\r\n    left: 16px;\r\n    z-index: 2;\r\n}\r\n#error_p{\r\n    position: fixed;\r\n    top: 50%;\r\n    left: 50%;\r\n    transform: translate(-50%, -50%);\r\n    z-index: 2;\r\n    color: white;\r\n    white-space: nowrap;\r\n}\r\n#ready_recog{\r\n    position: absolute;\r\n    bottom: 16px;\r\n    right: 16px;\r\n    z-index: 2;\r\n    color: white;\r\n    cursor: pointer;\r\n}\r\n#menu{\r\n    transition: all .5s ease;\r\n    height: 208px;\r\n    width: 303px;\r\n    background-color: rgba(0, 0, 0, 0.3);\r\n    position: fixed;\r\n    left: 50%;\r\n    transform: translateX(-50%);\r\n    z-index: 9999;\r\n    color: #ffffff;\r\n    font-size: 16px;\r\n    display: flex;\r\n    flex-direction: column;\r\n    align-items: center;\r\n    justify-content: space-between;\r\n    padding: 16px;\r\n    --mdc-theme-secondary: #000;\r\n    .menu_line{\r\n        white-space: nowrap;\r\n        width: 100%;\r\n        height: 16px;\r\n        display: flex;\r\n        align-items: center;\r\n        justify-content: space-between;\r\n        label{\r\n            display: flex;\r\n            align-items: center;\r\n        }\r\n        .mdc-slider{\r\n            width: 144px;\r\n        }\r\n    }\r\n    #add_face{\r\n        cursor: pointer;\r\n    }\r\n    #remove_face{\r\n        cursor: pointer;\r\n    }\r\n    #slide_button{\r\n        background-color: rgba(0, 0, 0, 0.3);\r\n        height: 20px;\r\n        width: 168px;\r\n        position: absolute;\r\n        bottom: -20px;\r\n        left: 50%;\r\n        transform: translateX(-50%);\r\n        #triangle{\r\n            position: absolute;\r\n            top: 5px;\r\n            left: 50%;\r\n            transform: translatex(-50%);\r\n            height: 0;\r\n            width: 0;\r\n            border: 10px solid transparent;\r\n            border-top: 10px solid rgba(255, 255, 255, 0.5);\r\n            transition: all ease .5s;\r\n        }\r\n    }\r\n}"],sourceRoot:""}]),t.default=o},function(e,t,n){var r=n(1),o=n(10);"string"==typeof(o=o.__esModule?o.default:o)&&(o=[[e.i,o,""]]);var i={insert:"head",singleton:!1};r(o,i);e.exports=o.locals||{}},function(e,t,n){"use strict";n.r(t);var r=n(0),o=n.n(r)()(!0);o.push([e.i,'.mdc-touch-target-wrapper{display:inline}@-webkit-keyframes mdc-checkbox-unchecked-checked-checkmark-path{0%,50%{stroke-dashoffset:29.7833385}50%{-webkit-animation-timing-function:cubic-bezier(0, 0, 0.2, 1);animation-timing-function:cubic-bezier(0, 0, 0.2, 1)}100%{stroke-dashoffset:0}}@keyframes mdc-checkbox-unchecked-checked-checkmark-path{0%,50%{stroke-dashoffset:29.7833385}50%{-webkit-animation-timing-function:cubic-bezier(0, 0, 0.2, 1);animation-timing-function:cubic-bezier(0, 0, 0.2, 1)}100%{stroke-dashoffset:0}}@-webkit-keyframes mdc-checkbox-unchecked-indeterminate-mixedmark{0%,68.2%{-webkit-transform:scaleX(0);transform:scaleX(0)}68.2%{-webkit-animation-timing-function:cubic-bezier(0, 0, 0, 1);animation-timing-function:cubic-bezier(0, 0, 0, 1)}100%{-webkit-transform:scaleX(1);transform:scaleX(1)}}@keyframes mdc-checkbox-unchecked-indeterminate-mixedmark{0%,68.2%{-webkit-transform:scaleX(0);transform:scaleX(0)}68.2%{-webkit-animation-timing-function:cubic-bezier(0, 0, 0, 1);animation-timing-function:cubic-bezier(0, 0, 0, 1)}100%{-webkit-transform:scaleX(1);transform:scaleX(1)}}@-webkit-keyframes mdc-checkbox-checked-unchecked-checkmark-path{from{-webkit-animation-timing-function:cubic-bezier(0.4, 0, 1, 1);animation-timing-function:cubic-bezier(0.4, 0, 1, 1);opacity:1;stroke-dashoffset:0}to{opacity:0;stroke-dashoffset:-29.7833385}}@keyframes mdc-checkbox-checked-unchecked-checkmark-path{from{-webkit-animation-timing-function:cubic-bezier(0.4, 0, 1, 1);animation-timing-function:cubic-bezier(0.4, 0, 1, 1);opacity:1;stroke-dashoffset:0}to{opacity:0;stroke-dashoffset:-29.7833385}}@-webkit-keyframes mdc-checkbox-checked-indeterminate-checkmark{from{-webkit-animation-timing-function:cubic-bezier(0, 0, 0.2, 1);animation-timing-function:cubic-bezier(0, 0, 0.2, 1);-webkit-transform:rotate(0deg);transform:rotate(0deg);opacity:1}to{-webkit-transform:rotate(45deg);transform:rotate(45deg);opacity:0}}@keyframes mdc-checkbox-checked-indeterminate-checkmark{from{-webkit-animation-timing-function:cubic-bezier(0, 0, 0.2, 1);animation-timing-function:cubic-bezier(0, 0, 0.2, 1);-webkit-transform:rotate(0deg);transform:rotate(0deg);opacity:1}to{-webkit-transform:rotate(45deg);transform:rotate(45deg);opacity:0}}@-webkit-keyframes mdc-checkbox-indeterminate-checked-checkmark{from{-webkit-animation-timing-function:cubic-bezier(0.14, 0, 0, 1);animation-timing-function:cubic-bezier(0.14, 0, 0, 1);-webkit-transform:rotate(45deg);transform:rotate(45deg);opacity:0}to{-webkit-transform:rotate(360deg);transform:rotate(360deg);opacity:1}}@keyframes mdc-checkbox-indeterminate-checked-checkmark{from{-webkit-animation-timing-function:cubic-bezier(0.14, 0, 0, 1);animation-timing-function:cubic-bezier(0.14, 0, 0, 1);-webkit-transform:rotate(45deg);transform:rotate(45deg);opacity:0}to{-webkit-transform:rotate(360deg);transform:rotate(360deg);opacity:1}}@-webkit-keyframes mdc-checkbox-checked-indeterminate-mixedmark{from{-webkit-animation-timing-function:mdc-animation-deceleration-curve-timing-function;animation-timing-function:mdc-animation-deceleration-curve-timing-function;-webkit-transform:rotate(-45deg);transform:rotate(-45deg);opacity:0}to{-webkit-transform:rotate(0deg);transform:rotate(0deg);opacity:1}}@keyframes mdc-checkbox-checked-indeterminate-mixedmark{from{-webkit-animation-timing-function:mdc-animation-deceleration-curve-timing-function;animation-timing-function:mdc-animation-deceleration-curve-timing-function;-webkit-transform:rotate(-45deg);transform:rotate(-45deg);opacity:0}to{-webkit-transform:rotate(0deg);transform:rotate(0deg);opacity:1}}@-webkit-keyframes mdc-checkbox-indeterminate-checked-mixedmark{from{-webkit-animation-timing-function:cubic-bezier(0.14, 0, 0, 1);animation-timing-function:cubic-bezier(0.14, 0, 0, 1);-webkit-transform:rotate(0deg);transform:rotate(0deg);opacity:1}to{-webkit-transform:rotate(315deg);transform:rotate(315deg);opacity:0}}@keyframes mdc-checkbox-indeterminate-checked-mixedmark{from{-webkit-animation-timing-function:cubic-bezier(0.14, 0, 0, 1);animation-timing-function:cubic-bezier(0.14, 0, 0, 1);-webkit-transform:rotate(0deg);transform:rotate(0deg);opacity:1}to{-webkit-transform:rotate(315deg);transform:rotate(315deg);opacity:0}}@-webkit-keyframes mdc-checkbox-indeterminate-unchecked-mixedmark{0%{-webkit-animation-timing-function:linear;animation-timing-function:linear;-webkit-transform:scaleX(1);transform:scaleX(1);opacity:1}32.8%,100%{-webkit-transform:scaleX(0);transform:scaleX(0);opacity:0}}@keyframes mdc-checkbox-indeterminate-unchecked-mixedmark{0%{-webkit-animation-timing-function:linear;animation-timing-function:linear;-webkit-transform:scaleX(1);transform:scaleX(1);opacity:1}32.8%,100%{-webkit-transform:scaleX(0);transform:scaleX(0);opacity:0}}.mdc-checkbox{display:inline-block;position:relative;flex:0 0 18px;box-sizing:content-box;width:18px;height:18px;line-height:0;white-space:nowrap;cursor:pointer;vertical-align:bottom;padding:11px}.mdc-checkbox .mdc-checkbox__native-control:checked~.mdc-checkbox__background::before,.mdc-checkbox .mdc-checkbox__native-control:indeterminate~.mdc-checkbox__background::before,.mdc-checkbox .mdc-checkbox__native-control[data-indeterminate=true]~.mdc-checkbox__background::before{background-color:#018786;background-color:var(--mdc-theme-secondary, #018786)}.mdc-checkbox.mdc-checkbox--selected .mdc-checkbox__ripple::before,.mdc-checkbox.mdc-checkbox--selected .mdc-checkbox__ripple::after{background-color:#018786;background-color:var(--mdc-theme-secondary, #018786)}.mdc-checkbox.mdc-checkbox--selected:hover .mdc-checkbox__ripple::before{opacity:.04}.mdc-checkbox.mdc-checkbox--selected.mdc-ripple-upgraded--background-focused .mdc-checkbox__ripple::before,.mdc-checkbox.mdc-checkbox--selected:not(.mdc-ripple-upgraded):focus .mdc-checkbox__ripple::before{transition-duration:75ms;opacity:.12}.mdc-checkbox.mdc-checkbox--selected:not(.mdc-ripple-upgraded) .mdc-checkbox__ripple::after{transition:opacity 150ms linear}.mdc-checkbox.mdc-checkbox--selected:not(.mdc-ripple-upgraded):active .mdc-checkbox__ripple::after{transition-duration:75ms;opacity:.12}.mdc-checkbox.mdc-checkbox--selected.mdc-ripple-upgraded{--mdc-ripple-fg-opacity: 0.12}.mdc-checkbox.mdc-ripple-upgraded--background-focused.mdc-checkbox--selected .mdc-checkbox__ripple::before,.mdc-checkbox.mdc-ripple-upgraded--background-focused.mdc-checkbox--selected .mdc-checkbox__ripple::after{background-color:#018786;background-color:var(--mdc-theme-secondary, #018786)}.mdc-checkbox .mdc-checkbox__background{top:11px;left:11px}.mdc-checkbox .mdc-checkbox__background::before{top:-13px;left:-13px;width:40px;height:40px}.mdc-checkbox .mdc-checkbox__native-control{top:0px;right:0px;left:0px;width:40px;height:40px}.mdc-checkbox__native-control:enabled:not(:checked):not(:indeterminate):not([data-indeterminate=true])~.mdc-checkbox__background{border-color:rgba(0,0,0,.54);background-color:transparent}.mdc-checkbox__native-control:enabled:checked~.mdc-checkbox__background,.mdc-checkbox__native-control:enabled:indeterminate~.mdc-checkbox__background,.mdc-checkbox__native-control[data-indeterminate=true]:enabled~.mdc-checkbox__background{border-color:#018786;border-color:var(--mdc-theme-secondary, #018786);background-color:#018786;background-color:var(--mdc-theme-secondary, #018786)}@-webkit-keyframes mdc-checkbox-fade-in-background-8A000000secondary00000000secondary{0%{border-color:rgba(0,0,0,.54);background-color:transparent}50%{border-color:#018786;border-color:var(--mdc-theme-secondary, #018786);background-color:#018786;background-color:var(--mdc-theme-secondary, #018786)}}@keyframes mdc-checkbox-fade-in-background-8A000000secondary00000000secondary{0%{border-color:rgba(0,0,0,.54);background-color:transparent}50%{border-color:#018786;border-color:var(--mdc-theme-secondary, #018786);background-color:#018786;background-color:var(--mdc-theme-secondary, #018786)}}@-webkit-keyframes mdc-checkbox-fade-out-background-8A000000secondary00000000secondary{0%,80%{border-color:#018786;border-color:var(--mdc-theme-secondary, #018786);background-color:#018786;background-color:var(--mdc-theme-secondary, #018786)}100%{border-color:rgba(0,0,0,.54);background-color:transparent}}@keyframes mdc-checkbox-fade-out-background-8A000000secondary00000000secondary{0%,80%{border-color:#018786;border-color:var(--mdc-theme-secondary, #018786);background-color:#018786;background-color:var(--mdc-theme-secondary, #018786)}100%{border-color:rgba(0,0,0,.54);background-color:transparent}}.mdc-checkbox--anim-unchecked-checked .mdc-checkbox__native-control:enabled~.mdc-checkbox__background,.mdc-checkbox--anim-unchecked-indeterminate .mdc-checkbox__native-control:enabled~.mdc-checkbox__background{-webkit-animation-name:mdc-checkbox-fade-in-background-8A000000secondary00000000secondary;animation-name:mdc-checkbox-fade-in-background-8A000000secondary00000000secondary}.mdc-checkbox--anim-checked-unchecked .mdc-checkbox__native-control:enabled~.mdc-checkbox__background,.mdc-checkbox--anim-indeterminate-unchecked .mdc-checkbox__native-control:enabled~.mdc-checkbox__background{-webkit-animation-name:mdc-checkbox-fade-out-background-8A000000secondary00000000secondary;animation-name:mdc-checkbox-fade-out-background-8A000000secondary00000000secondary}.mdc-checkbox__native-control[disabled]:not(:checked):not(:indeterminate):not([data-indeterminate=true])~.mdc-checkbox__background{border-color:rgba(0,0,0,.38);background-color:transparent}.mdc-checkbox__native-control[disabled]:checked~.mdc-checkbox__background,.mdc-checkbox__native-control[disabled]:indeterminate~.mdc-checkbox__background,.mdc-checkbox__native-control[data-indeterminate=true][disabled]~.mdc-checkbox__background{border-color:transparent;background-color:rgba(0,0,0,.38)}.mdc-checkbox__native-control:enabled~.mdc-checkbox__background .mdc-checkbox__checkmark{color:#fff}.mdc-checkbox__native-control:enabled~.mdc-checkbox__background .mdc-checkbox__mixedmark{border-color:#fff}.mdc-checkbox__native-control:disabled~.mdc-checkbox__background .mdc-checkbox__checkmark{color:#fff}.mdc-checkbox__native-control:disabled~.mdc-checkbox__background .mdc-checkbox__mixedmark{border-color:#fff}@media screen and (-ms-high-contrast: active){.mdc-checkbox__native-control[disabled]:not(:checked):not(:indeterminate):not([data-indeterminate=true])~.mdc-checkbox__background{border-color:GrayText;background-color:transparent}.mdc-checkbox__native-control[disabled]:checked~.mdc-checkbox__background,.mdc-checkbox__native-control[disabled]:indeterminate~.mdc-checkbox__background,.mdc-checkbox__native-control[data-indeterminate=true][disabled]~.mdc-checkbox__background{border-color:GrayText;background-color:transparent}.mdc-checkbox__native-control:disabled~.mdc-checkbox__background .mdc-checkbox__checkmark{color:GrayText}.mdc-checkbox__native-control:disabled~.mdc-checkbox__background .mdc-checkbox__mixedmark{border-color:GrayText}.mdc-checkbox__mixedmark{margin:0 1px}}.mdc-checkbox--disabled{cursor:default;pointer-events:none}.mdc-checkbox__background{display:inline-flex;position:absolute;align-items:center;justify-content:center;box-sizing:border-box;width:18px;height:18px;border:2px solid currentColor;border-radius:2px;background-color:transparent;pointer-events:none;will-change:background-color,border-color;transition:background-color 90ms 0ms cubic-bezier(0.4, 0, 0.6, 1),border-color 90ms 0ms cubic-bezier(0.4, 0, 0.6, 1)}.mdc-checkbox__background .mdc-checkbox__background::before{background-color:#000;background-color:var(--mdc-theme-on-surface, #000)}.mdc-checkbox__checkmark{position:absolute;top:0;right:0;bottom:0;left:0;width:100%;opacity:0;transition:opacity 180ms 0ms cubic-bezier(0.4, 0, 0.6, 1)}.mdc-checkbox--upgraded .mdc-checkbox__checkmark{opacity:1}.mdc-checkbox__checkmark-path{transition:stroke-dashoffset 180ms 0ms cubic-bezier(0.4, 0, 0.6, 1);stroke:currentColor;stroke-width:3.12px;stroke-dashoffset:29.7833385;stroke-dasharray:29.7833385}.mdc-checkbox__mixedmark{width:100%;height:0;-webkit-transform:scaleX(0) rotate(0deg);transform:scaleX(0) rotate(0deg);border-width:1px;border-style:solid;opacity:0;transition:opacity 90ms 0ms cubic-bezier(0.4, 0, 0.6, 1),-webkit-transform 90ms 0ms cubic-bezier(0.4, 0, 0.6, 1);transition:opacity 90ms 0ms cubic-bezier(0.4, 0, 0.6, 1),transform 90ms 0ms cubic-bezier(0.4, 0, 0.6, 1);transition:opacity 90ms 0ms cubic-bezier(0.4, 0, 0.6, 1),transform 90ms 0ms cubic-bezier(0.4, 0, 0.6, 1),-webkit-transform 90ms 0ms cubic-bezier(0.4, 0, 0.6, 1)}.mdc-checkbox--upgraded .mdc-checkbox__background,.mdc-checkbox--upgraded .mdc-checkbox__checkmark,.mdc-checkbox--upgraded .mdc-checkbox__checkmark-path,.mdc-checkbox--upgraded .mdc-checkbox__mixedmark{transition:none !important}.mdc-checkbox--anim-unchecked-checked .mdc-checkbox__background,.mdc-checkbox--anim-unchecked-indeterminate .mdc-checkbox__background,.mdc-checkbox--anim-checked-unchecked .mdc-checkbox__background,.mdc-checkbox--anim-indeterminate-unchecked .mdc-checkbox__background{-webkit-animation-duration:180ms;animation-duration:180ms;-webkit-animation-timing-function:linear;animation-timing-function:linear}.mdc-checkbox--anim-unchecked-checked .mdc-checkbox__checkmark-path{-webkit-animation:mdc-checkbox-unchecked-checked-checkmark-path 180ms linear 0s;animation:mdc-checkbox-unchecked-checked-checkmark-path 180ms linear 0s;transition:none}.mdc-checkbox--anim-unchecked-indeterminate .mdc-checkbox__mixedmark{-webkit-animation:mdc-checkbox-unchecked-indeterminate-mixedmark 90ms linear 0s;animation:mdc-checkbox-unchecked-indeterminate-mixedmark 90ms linear 0s;transition:none}.mdc-checkbox--anim-checked-unchecked .mdc-checkbox__checkmark-path{-webkit-animation:mdc-checkbox-checked-unchecked-checkmark-path 90ms linear 0s;animation:mdc-checkbox-checked-unchecked-checkmark-path 90ms linear 0s;transition:none}.mdc-checkbox--anim-checked-indeterminate .mdc-checkbox__checkmark{-webkit-animation:mdc-checkbox-checked-indeterminate-checkmark 90ms linear 0s;animation:mdc-checkbox-checked-indeterminate-checkmark 90ms linear 0s;transition:none}.mdc-checkbox--anim-checked-indeterminate .mdc-checkbox__mixedmark{-webkit-animation:mdc-checkbox-checked-indeterminate-mixedmark 90ms linear 0s;animation:mdc-checkbox-checked-indeterminate-mixedmark 90ms linear 0s;transition:none}.mdc-checkbox--anim-indeterminate-checked .mdc-checkbox__checkmark{-webkit-animation:mdc-checkbox-indeterminate-checked-checkmark 500ms linear 0s;animation:mdc-checkbox-indeterminate-checked-checkmark 500ms linear 0s;transition:none}.mdc-checkbox--anim-indeterminate-checked .mdc-checkbox__mixedmark{-webkit-animation:mdc-checkbox-indeterminate-checked-mixedmark 500ms linear 0s;animation:mdc-checkbox-indeterminate-checked-mixedmark 500ms linear 0s;transition:none}.mdc-checkbox--anim-indeterminate-unchecked .mdc-checkbox__mixedmark{-webkit-animation:mdc-checkbox-indeterminate-unchecked-mixedmark 300ms linear 0s;animation:mdc-checkbox-indeterminate-unchecked-mixedmark 300ms linear 0s;transition:none}.mdc-checkbox__native-control:checked~.mdc-checkbox__background,.mdc-checkbox__native-control:indeterminate~.mdc-checkbox__background,.mdc-checkbox__native-control[data-indeterminate=true]~.mdc-checkbox__background{transition:border-color 90ms 0ms cubic-bezier(0, 0, 0.2, 1),background-color 90ms 0ms cubic-bezier(0, 0, 0.2, 1)}.mdc-checkbox__native-control:checked~.mdc-checkbox__background .mdc-checkbox__checkmark-path,.mdc-checkbox__native-control:indeterminate~.mdc-checkbox__background .mdc-checkbox__checkmark-path,.mdc-checkbox__native-control[data-indeterminate=true]~.mdc-checkbox__background .mdc-checkbox__checkmark-path{stroke-dashoffset:0}.mdc-checkbox__background::before{position:absolute;-webkit-transform:scale(0, 0);transform:scale(0, 0);border-radius:50%;opacity:0;pointer-events:none;content:"";will-change:opacity,transform;transition:opacity 90ms 0ms cubic-bezier(0.4, 0, 0.6, 1),-webkit-transform 90ms 0ms cubic-bezier(0.4, 0, 0.6, 1);transition:opacity 90ms 0ms cubic-bezier(0.4, 0, 0.6, 1),transform 90ms 0ms cubic-bezier(0.4, 0, 0.6, 1);transition:opacity 90ms 0ms cubic-bezier(0.4, 0, 0.6, 1),transform 90ms 0ms cubic-bezier(0.4, 0, 0.6, 1),-webkit-transform 90ms 0ms cubic-bezier(0.4, 0, 0.6, 1)}.mdc-checkbox__native-control:focus~.mdc-checkbox__background::before{-webkit-transform:scale(1);transform:scale(1);opacity:.12;transition:opacity 80ms 0ms cubic-bezier(0, 0, 0.2, 1),-webkit-transform 80ms 0ms cubic-bezier(0, 0, 0.2, 1);transition:opacity 80ms 0ms cubic-bezier(0, 0, 0.2, 1),transform 80ms 0ms cubic-bezier(0, 0, 0.2, 1);transition:opacity 80ms 0ms cubic-bezier(0, 0, 0.2, 1),transform 80ms 0ms cubic-bezier(0, 0, 0.2, 1),-webkit-transform 80ms 0ms cubic-bezier(0, 0, 0.2, 1)}.mdc-checkbox__native-control{position:absolute;margin:0;padding:0;opacity:0;cursor:inherit}.mdc-checkbox__native-control:disabled{cursor:default;pointer-events:none}.mdc-checkbox--touch{margin-top:4px;margin-bottom:4px;margin-right:4px;margin-left:4px}.mdc-checkbox--touch .mdc-checkbox__native-control{top:-4px;right:-4px;left:-4px;width:48px;height:48px}.mdc-checkbox__native-control:checked~.mdc-checkbox__background .mdc-checkbox__checkmark{transition:opacity 180ms 0ms cubic-bezier(0, 0, 0.2, 1),-webkit-transform 180ms 0ms cubic-bezier(0, 0, 0.2, 1);transition:opacity 180ms 0ms cubic-bezier(0, 0, 0.2, 1),transform 180ms 0ms cubic-bezier(0, 0, 0.2, 1);transition:opacity 180ms 0ms cubic-bezier(0, 0, 0.2, 1),transform 180ms 0ms cubic-bezier(0, 0, 0.2, 1),-webkit-transform 180ms 0ms cubic-bezier(0, 0, 0.2, 1);opacity:1}.mdc-checkbox__native-control:checked~.mdc-checkbox__background .mdc-checkbox__mixedmark{-webkit-transform:scaleX(1) rotate(-45deg);transform:scaleX(1) rotate(-45deg)}.mdc-checkbox__native-control:indeterminate~.mdc-checkbox__background .mdc-checkbox__checkmark,.mdc-checkbox__native-control[data-indeterminate=true]~.mdc-checkbox__background .mdc-checkbox__checkmark{-webkit-transform:rotate(45deg);transform:rotate(45deg);opacity:0;transition:opacity 90ms 0ms cubic-bezier(0.4, 0, 0.6, 1),-webkit-transform 90ms 0ms cubic-bezier(0.4, 0, 0.6, 1);transition:opacity 90ms 0ms cubic-bezier(0.4, 0, 0.6, 1),transform 90ms 0ms cubic-bezier(0.4, 0, 0.6, 1);transition:opacity 90ms 0ms cubic-bezier(0.4, 0, 0.6, 1),transform 90ms 0ms cubic-bezier(0.4, 0, 0.6, 1),-webkit-transform 90ms 0ms cubic-bezier(0.4, 0, 0.6, 1)}.mdc-checkbox__native-control:indeterminate~.mdc-checkbox__background .mdc-checkbox__mixedmark,.mdc-checkbox__native-control[data-indeterminate=true]~.mdc-checkbox__background .mdc-checkbox__mixedmark{-webkit-transform:scaleX(1) rotate(0deg);transform:scaleX(1) rotate(0deg);opacity:1}@-webkit-keyframes mdc-ripple-fg-radius-in{from{-webkit-animation-timing-function:cubic-bezier(0.4, 0, 0.2, 1);animation-timing-function:cubic-bezier(0.4, 0, 0.2, 1);-webkit-transform:translate(var(--mdc-ripple-fg-translate-start, 0)) scale(1);transform:translate(var(--mdc-ripple-fg-translate-start, 0)) scale(1)}to{-webkit-transform:translate(var(--mdc-ripple-fg-translate-end, 0)) scale(var(--mdc-ripple-fg-scale, 1));transform:translate(var(--mdc-ripple-fg-translate-end, 0)) scale(var(--mdc-ripple-fg-scale, 1))}}@keyframes mdc-ripple-fg-radius-in{from{-webkit-animation-timing-function:cubic-bezier(0.4, 0, 0.2, 1);animation-timing-function:cubic-bezier(0.4, 0, 0.2, 1);-webkit-transform:translate(var(--mdc-ripple-fg-translate-start, 0)) scale(1);transform:translate(var(--mdc-ripple-fg-translate-start, 0)) scale(1)}to{-webkit-transform:translate(var(--mdc-ripple-fg-translate-end, 0)) scale(var(--mdc-ripple-fg-scale, 1));transform:translate(var(--mdc-ripple-fg-translate-end, 0)) scale(var(--mdc-ripple-fg-scale, 1))}}@-webkit-keyframes mdc-ripple-fg-opacity-in{from{-webkit-animation-timing-function:linear;animation-timing-function:linear;opacity:0}to{opacity:var(--mdc-ripple-fg-opacity, 0)}}@keyframes mdc-ripple-fg-opacity-in{from{-webkit-animation-timing-function:linear;animation-timing-function:linear;opacity:0}to{opacity:var(--mdc-ripple-fg-opacity, 0)}}@-webkit-keyframes mdc-ripple-fg-opacity-out{from{-webkit-animation-timing-function:linear;animation-timing-function:linear;opacity:var(--mdc-ripple-fg-opacity, 0)}to{opacity:0}}@keyframes mdc-ripple-fg-opacity-out{from{-webkit-animation-timing-function:linear;animation-timing-function:linear;opacity:var(--mdc-ripple-fg-opacity, 0)}to{opacity:0}}.mdc-checkbox{--mdc-ripple-fg-size: 0;--mdc-ripple-left: 0;--mdc-ripple-top: 0;--mdc-ripple-fg-scale: 1;--mdc-ripple-fg-translate-end: 0;--mdc-ripple-fg-translate-start: 0;-webkit-tap-highlight-color:rgba(0,0,0,0)}.mdc-checkbox .mdc-checkbox__ripple::before,.mdc-checkbox .mdc-checkbox__ripple::after{position:absolute;border-radius:50%;opacity:0;pointer-events:none;content:""}.mdc-checkbox .mdc-checkbox__ripple::before{transition:opacity 15ms linear,background-color 15ms linear;z-index:1}.mdc-checkbox.mdc-ripple-upgraded .mdc-checkbox__ripple::before{-webkit-transform:scale(var(--mdc-ripple-fg-scale, 1));transform:scale(var(--mdc-ripple-fg-scale, 1))}.mdc-checkbox.mdc-ripple-upgraded .mdc-checkbox__ripple::after{top:0;left:0;-webkit-transform:scale(0);transform:scale(0);-webkit-transform-origin:center center;transform-origin:center center}.mdc-checkbox.mdc-ripple-upgraded--unbounded .mdc-checkbox__ripple::after{top:var(--mdc-ripple-top, 0);left:var(--mdc-ripple-left, 0)}.mdc-checkbox.mdc-ripple-upgraded--foreground-activation .mdc-checkbox__ripple::after{-webkit-animation:mdc-ripple-fg-radius-in 225ms forwards,mdc-ripple-fg-opacity-in 75ms forwards;animation:mdc-ripple-fg-radius-in 225ms forwards,mdc-ripple-fg-opacity-in 75ms forwards}.mdc-checkbox.mdc-ripple-upgraded--foreground-deactivation .mdc-checkbox__ripple::after{-webkit-animation:mdc-ripple-fg-opacity-out 150ms;animation:mdc-ripple-fg-opacity-out 150ms;-webkit-transform:translate(var(--mdc-ripple-fg-translate-end, 0)) scale(var(--mdc-ripple-fg-scale, 1));transform:translate(var(--mdc-ripple-fg-translate-end, 0)) scale(var(--mdc-ripple-fg-scale, 1))}.mdc-checkbox .mdc-checkbox__ripple::before,.mdc-checkbox .mdc-checkbox__ripple::after{background-color:#000;background-color:var(--mdc-theme-on-surface, #000)}.mdc-checkbox:hover .mdc-checkbox__ripple::before{opacity:.04}.mdc-checkbox.mdc-ripple-upgraded--background-focused .mdc-checkbox__ripple::before,.mdc-checkbox:not(.mdc-ripple-upgraded):focus .mdc-checkbox__ripple::before{transition-duration:75ms;opacity:.12}.mdc-checkbox:not(.mdc-ripple-upgraded) .mdc-checkbox__ripple::after{transition:opacity 150ms linear}.mdc-checkbox:not(.mdc-ripple-upgraded):active .mdc-checkbox__ripple::after{transition-duration:75ms;opacity:.12}.mdc-checkbox.mdc-ripple-upgraded{--mdc-ripple-fg-opacity: 0.12}.mdc-checkbox .mdc-checkbox__ripple::before,.mdc-checkbox .mdc-checkbox__ripple::after{top:calc(50% - 50%);left:calc(50% - 50%);width:100%;height:100%}.mdc-checkbox.mdc-ripple-upgraded .mdc-checkbox__ripple::before,.mdc-checkbox.mdc-ripple-upgraded .mdc-checkbox__ripple::after{top:var(--mdc-ripple-top, calc(50% - 50%));left:var(--mdc-ripple-left, calc(50% - 50%));width:var(--mdc-ripple-fg-size, 100%);height:var(--mdc-ripple-fg-size, 100%)}.mdc-checkbox.mdc-ripple-upgraded .mdc-checkbox__ripple::after{width:var(--mdc-ripple-fg-size, 100%);height:var(--mdc-ripple-fg-size, 100%)}.mdc-checkbox__ripple{position:absolute;top:0;left:0;width:100%;height:100%;pointer-events:none}.mdc-ripple-upgraded--background-focused .mdc-checkbox__background::before{content:none}',"",{version:3,sources:["webpack://node_modules/@material/checkbox/dist/mdc.checkbox.css"],names:[],mappings:"AAOA,0BACE,cAAA,CAGF,iEACE,OACE,4BAAA,CAEF,IACE,4DAAA,CACQ,oDAAA,CAEV,KACE,mBAAA,CAAA,CAIJ,yDACE,OACE,4BAAA,CAEF,IACE,4DAAA,CACQ,oDAAA,CAEV,KACE,mBAAA,CAAA,CAGJ,kEACE,SACE,2BAAA,CACQ,mBAAA,CAEV,MACE,0DAAA,CACQ,kDAAA,CAEV,KACE,2BAAA,CACQ,mBAAA,CAAA,CAGZ,0DACE,SACE,2BAAA,CACQ,mBAAA,CAEV,MACE,0DAAA,CACQ,kDAAA,CAEV,KACE,2BAAA,CACQ,mBAAA,CAAA,CAGZ,iEACE,KACE,4DAAA,CACQ,oDAAA,CACR,SAAA,CACA,mBAAA,CAEF,GACE,SAAA,CACA,6BAAA,CAAA,CAGJ,yDACE,KACE,4DAAA,CACQ,oDAAA,CACR,SAAA,CACA,mBAAA,CAEF,GACE,SAAA,CACA,6BAAA,CAAA,CAGJ,gEACE,KACE,4DAAA,CACQ,oDAAA,CACR,8BAAA,CACQ,sBAAA,CACR,SAAA,CAEF,GACE,+BAAA,CACQ,uBAAA,CACR,SAAA,CAAA,CAGJ,wDACE,KACE,4DAAA,CACQ,oDAAA,CACR,8BAAA,CACQ,sBAAA,CACR,SAAA,CAEF,GACE,+BAAA,CACQ,uBAAA,CACR,SAAA,CAAA,CAGJ,gEACE,KACE,6DAAA,CACQ,qDAAA,CACR,+BAAA,CACQ,uBAAA,CACR,SAAA,CAEF,GACE,gCAAA,CACQ,wBAAA,CACR,SAAA,CAAA,CAGJ,wDACE,KACE,6DAAA,CACQ,qDAAA,CACR,+BAAA,CACQ,uBAAA,CACR,SAAA,CAEF,GACE,gCAAA,CACQ,wBAAA,CACR,SAAA,CAAA,CAGJ,gEACE,KACE,kFAAA,CACQ,0EAAA,CACR,gCAAA,CACQ,wBAAA,CACR,SAAA,CAEF,GACE,8BAAA,CACQ,sBAAA,CACR,SAAA,CAAA,CAGJ,wDACE,KACE,kFAAA,CACQ,0EAAA,CACR,gCAAA,CACQ,wBAAA,CACR,SAAA,CAEF,GACE,8BAAA,CACQ,sBAAA,CACR,SAAA,CAAA,CAGJ,gEACE,KACE,6DAAA,CACQ,qDAAA,CACR,8BAAA,CACQ,sBAAA,CACR,SAAA,CAEF,GACE,gCAAA,CACQ,wBAAA,CACR,SAAA,CAAA,CAGJ,wDACE,KACE,6DAAA,CACQ,qDAAA,CACR,8BAAA,CACQ,sBAAA,CACR,SAAA,CAEF,GACE,gCAAA,CACQ,wBAAA,CACR,SAAA,CAAA,CAGJ,kEACE,GACE,wCAAA,CACQ,gCAAA,CACR,2BAAA,CACQ,mBAAA,CACR,SAAA,CAEF,WACE,2BAAA,CACQ,mBAAA,CACR,SAAA,CAAA,CAGJ,0DACE,GACE,wCAAA,CACQ,gCAAA,CACR,2BAAA,CACQ,mBAAA,CACR,SAAA,CAEF,WACE,2BAAA,CACQ,mBAAA,CACR,SAAA,CAAA,CAGJ,cACE,oBAAA,CACA,iBAAA,CACA,aAAA,CACA,sBAAA,CACA,UAAA,CACA,WAAA,CACA,aAAA,CACA,kBAAA,CACA,cAAA,CACA,qBAAA,CACA,YAAA,CAEF,yRAGE,wBAAA,CAEA,oDAAA,CAEF,qIACE,wBAAA,CAEA,oDAAA,CAEF,yEACE,WAAA,CAEF,8MACE,wBAAA,CACA,WAAA,CAEF,4FACE,+BAAA,CAEF,mGACE,wBAAA,CACA,WAAA,CAEF,yDACE,6BAAA,CAEF,qNAEE,wBAAA,CAEA,oDAAA,CAEF,wCACE,QAAA,CACA,SAAA,CAEF,gDACE,SAAA,CACA,UAAA,CACA,UAAA,CACA,WAAA,CAEF,4CACE,OAAA,CACA,SAAA,CACA,QAAA,CACA,UAAA,CACA,WAAA,CAGF,iIACE,4BAAA,CACA,4BAAA,CAGF,+OAGE,oBAAA,CAEA,gDAAA,CACA,wBAAA,CAEA,oDAAA,CAGF,sFACE,GACE,4BAAA,CACA,4BAAA,CAEF,IACE,oBAAA,CAEA,gDAAA,CACA,wBAAA,CAEA,oDAAA,CAAA,CAIJ,8EACE,GACE,4BAAA,CACA,4BAAA,CAEF,IACE,oBAAA,CAEA,gDAAA,CACA,wBAAA,CAEA,oDAAA,CAAA,CAGJ,uFACE,OACE,oBAAA,CAEA,gDAAA,CACA,wBAAA,CAEA,oDAAA,CAEF,KACE,4BAAA,CACA,4BAAA,CAAA,CAGJ,+EACE,OACE,oBAAA,CAEA,gDAAA,CACA,wBAAA,CAEA,oDAAA,CAEF,KACE,4BAAA,CACA,4BAAA,CAAA,CAGJ,kNACE,yFAAA,CACQ,iFAAA,CAEV,kNACE,0FAAA,CACQ,kFAAA,CAGV,mIACE,4BAAA,CACA,4BAAA,CAGF,qPAGE,wBAAA,CACA,gCAAA,CAGF,yFACE,UAAA,CAEF,yFACE,iBAAA,CAGF,0FACE,UAAA,CAEF,0FACE,iBAAA,CAGF,8CACE,mIACE,qBAAA,CACA,4BAAA,CAGF,qPAGE,qBAAA,CACA,4BAAA,CAGF,0FACE,cAAA,CAEF,0FACE,qBAAA,CAGF,yBACE,YAAA,CAAA,CAGJ,wBACE,cAAA,CACA,mBAAA,CAGF,0BACE,mBAAA,CACA,iBAAA,CACA,kBAAA,CACA,sBAAA,CACA,qBAAA,CACA,UAAA,CACA,WAAA,CACA,6BAAA,CACA,iBAAA,CACA,4BAAA,CACA,mBAAA,CACA,yCAAA,CACA,oHAAA,CAEF,4DACE,qBAAA,CAEA,kDAAA,CAGF,yBACE,iBAAA,CACA,KAAA,CACA,OAAA,CACA,QAAA,CACA,MAAA,CACA,UAAA,CACA,SAAA,CACA,yDAAA,CAEF,iDACE,SAAA,CAGF,8BACE,mEAAA,CACA,mBAAA,CACA,mBAAA,CACA,4BAAA,CACA,2BAAA,CAGF,yBACE,UAAA,CACA,QAAA,CACA,wCAAA,CACQ,gCAAA,CACR,gBAAA,CACA,kBAAA,CACA,SAAA,CACA,gHAAA,CACA,wGAAA,CACA,gKAAA,CAGF,0MAIE,0BAAA,CAGF,4QACE,gCAAA,CACQ,wBAAA,CACR,wCAAA,CACQ,gCAAA,CAEV,oEACE,+EAAA,CACQ,uEAAA,CACR,eAAA,CAEF,qEACE,+EAAA,CACQ,uEAAA,CACR,eAAA,CAEF,oEACE,8EAAA,CACQ,sEAAA,CACR,eAAA,CAEF,mEACE,6EAAA,CACQ,qEAAA,CACR,eAAA,CAEF,mEACE,6EAAA,CACQ,qEAAA,CACR,eAAA,CAEF,mEACE,8EAAA,CACQ,sEAAA,CACR,eAAA,CAEF,mEACE,8EAAA,CACQ,sEAAA,CACR,eAAA,CAEF,qEACE,gFAAA,CACQ,wEAAA,CACR,eAAA,CAGF,uNAGE,gHAAA,CAEF,iTAGE,mBAAA,CAGF,kCACE,iBAAA,CACA,6BAAA,CACQ,qBAAA,CACR,iBAAA,CACA,SAAA,CACA,mBAAA,CACA,UAAA,CACA,6BAAA,CACA,gHAAA,CACA,wGAAA,CACA,gKAAA,CAGF,sEACE,0BAAA,CACQ,kBAAA,CACR,WAAA,CACA,4GAAA,CACA,oGAAA,CACA,0JAAA,CAGF,8BACE,iBAAA,CACA,QAAA,CACA,SAAA,CACA,SAAA,CACA,cAAA,CAEF,uCACE,cAAA,CACA,mBAAA,CAGF,qBACE,cAAA,CACA,iBAAA,CACA,gBAAA,CACA,eAAA,CAEF,mDACE,QAAA,CACA,UAAA,CACA,SAAA,CACA,UAAA,CACA,WAAA,CAGF,yFACE,8GAAA,CACA,sGAAA,CACA,6JAAA,CACA,SAAA,CAEF,yFACE,0CAAA,CACQ,kCAAA,CAGV,yMAEE,+BAAA,CACQ,uBAAA,CACR,SAAA,CACA,gHAAA,CACA,wGAAA,CACA,gKAAA,CAEF,yMAEE,wCAAA,CACQ,gCAAA,CACR,SAAA,CAGF,2CACE,KACE,8DAAA,CACQ,sDAAA,CACR,6EAAA,CACQ,qEAAA,CAEV,GACE,uGAAA,CACQ,+FAAA,CAAA,CAIZ,mCACE,KACE,8DAAA,CACQ,sDAAA,CACR,6EAAA,CACQ,qEAAA,CAEV,GACE,uGAAA,CACQ,+FAAA,CAAA,CAGZ,4CACE,KACE,wCAAA,CACQ,gCAAA,CACR,SAAA,CAEF,GACE,uCAAA,CAAA,CAGJ,oCACE,KACE,wCAAA,CACQ,gCAAA,CACR,SAAA,CAEF,GACE,uCAAA,CAAA,CAGJ,6CACE,KACE,wCAAA,CACQ,gCAAA,CACR,uCAAA,CAEF,GACE,SAAA,CAAA,CAGJ,qCACE,KACE,wCAAA,CACQ,gCAAA,CACR,uCAAA,CAEF,GACE,SAAA,CAAA,CAGJ,cACE,uBAAA,CACA,oBAAA,CACA,mBAAA,CACA,wBAAA,CACA,gCAAA,CACA,kCAAA,CACA,yCAAA,CAEF,uFAEE,iBAAA,CACA,iBAAA,CACA,SAAA,CACA,mBAAA,CACA,UAAA,CAEF,4CACE,2DAAA,CACA,SAAA,CAEF,gEACE,sDAAA,CACQ,8CAAA,CAEV,+DACE,KAAA,CAEA,MAAA,CACA,0BAAA,CACQ,kBAAA,CACR,sCAAA,CACQ,8BAAA,CAEV,0EACE,4BAAA,CAEA,8BAAA,CAEF,sFACE,+FAAA,CACQ,uFAAA,CAEV,wFACE,iDAAA,CACQ,yCAAA,CACR,uGAAA,CACQ,+FAAA,CAEV,uFACE,qBAAA,CAEA,kDAAA,CAEF,kDACE,WAAA,CAEF,gKACE,wBAAA,CACA,WAAA,CAEF,qEACE,+BAAA,CAEF,4EACE,wBAAA,CACA,WAAA,CAEF,kCACE,6BAAA,CAEF,uFAEE,mBAAA,CAEA,oBAAA,CACA,UAAA,CACA,WAAA,CAEF,+HAEE,0CAAA,CAEA,4CAAA,CACA,qCAAA,CACA,sCAAA,CAEF,+DACE,qCAAA,CACA,sCAAA,CAGF,sBACE,iBAAA,CACA,KAAA,CACA,MAAA,CACA,UAAA,CACA,WAAA,CACA,mBAAA,CAGF,2EACE,YAAA",sourcesContent:['/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/material-components/material-components-web/blob/master/LICENSE\n */\n.mdc-touch-target-wrapper {\n  display: inline;\n}\n\n@-webkit-keyframes mdc-checkbox-unchecked-checked-checkmark-path {\n  0%, 50% {\n    stroke-dashoffset: 29.7833385;\n  }\n  50% {\n    -webkit-animation-timing-function: cubic-bezier(0, 0, 0.2, 1);\n            animation-timing-function: cubic-bezier(0, 0, 0.2, 1);\n  }\n  100% {\n    stroke-dashoffset: 0;\n  }\n}\n\n@keyframes mdc-checkbox-unchecked-checked-checkmark-path {\n  0%, 50% {\n    stroke-dashoffset: 29.7833385;\n  }\n  50% {\n    -webkit-animation-timing-function: cubic-bezier(0, 0, 0.2, 1);\n            animation-timing-function: cubic-bezier(0, 0, 0.2, 1);\n  }\n  100% {\n    stroke-dashoffset: 0;\n  }\n}\n@-webkit-keyframes mdc-checkbox-unchecked-indeterminate-mixedmark {\n  0%, 68.2% {\n    -webkit-transform: scaleX(0);\n            transform: scaleX(0);\n  }\n  68.2% {\n    -webkit-animation-timing-function: cubic-bezier(0, 0, 0, 1);\n            animation-timing-function: cubic-bezier(0, 0, 0, 1);\n  }\n  100% {\n    -webkit-transform: scaleX(1);\n            transform: scaleX(1);\n  }\n}\n@keyframes mdc-checkbox-unchecked-indeterminate-mixedmark {\n  0%, 68.2% {\n    -webkit-transform: scaleX(0);\n            transform: scaleX(0);\n  }\n  68.2% {\n    -webkit-animation-timing-function: cubic-bezier(0, 0, 0, 1);\n            animation-timing-function: cubic-bezier(0, 0, 0, 1);\n  }\n  100% {\n    -webkit-transform: scaleX(1);\n            transform: scaleX(1);\n  }\n}\n@-webkit-keyframes mdc-checkbox-checked-unchecked-checkmark-path {\n  from {\n    -webkit-animation-timing-function: cubic-bezier(0.4, 0, 1, 1);\n            animation-timing-function: cubic-bezier(0.4, 0, 1, 1);\n    opacity: 1;\n    stroke-dashoffset: 0;\n  }\n  to {\n    opacity: 0;\n    stroke-dashoffset: -29.7833385;\n  }\n}\n@keyframes mdc-checkbox-checked-unchecked-checkmark-path {\n  from {\n    -webkit-animation-timing-function: cubic-bezier(0.4, 0, 1, 1);\n            animation-timing-function: cubic-bezier(0.4, 0, 1, 1);\n    opacity: 1;\n    stroke-dashoffset: 0;\n  }\n  to {\n    opacity: 0;\n    stroke-dashoffset: -29.7833385;\n  }\n}\n@-webkit-keyframes mdc-checkbox-checked-indeterminate-checkmark {\n  from {\n    -webkit-animation-timing-function: cubic-bezier(0, 0, 0.2, 1);\n            animation-timing-function: cubic-bezier(0, 0, 0.2, 1);\n    -webkit-transform: rotate(0deg);\n            transform: rotate(0deg);\n    opacity: 1;\n  }\n  to {\n    -webkit-transform: rotate(45deg);\n            transform: rotate(45deg);\n    opacity: 0;\n  }\n}\n@keyframes mdc-checkbox-checked-indeterminate-checkmark {\n  from {\n    -webkit-animation-timing-function: cubic-bezier(0, 0, 0.2, 1);\n            animation-timing-function: cubic-bezier(0, 0, 0.2, 1);\n    -webkit-transform: rotate(0deg);\n            transform: rotate(0deg);\n    opacity: 1;\n  }\n  to {\n    -webkit-transform: rotate(45deg);\n            transform: rotate(45deg);\n    opacity: 0;\n  }\n}\n@-webkit-keyframes mdc-checkbox-indeterminate-checked-checkmark {\n  from {\n    -webkit-animation-timing-function: cubic-bezier(0.14, 0, 0, 1);\n            animation-timing-function: cubic-bezier(0.14, 0, 0, 1);\n    -webkit-transform: rotate(45deg);\n            transform: rotate(45deg);\n    opacity: 0;\n  }\n  to {\n    -webkit-transform: rotate(360deg);\n            transform: rotate(360deg);\n    opacity: 1;\n  }\n}\n@keyframes mdc-checkbox-indeterminate-checked-checkmark {\n  from {\n    -webkit-animation-timing-function: cubic-bezier(0.14, 0, 0, 1);\n            animation-timing-function: cubic-bezier(0.14, 0, 0, 1);\n    -webkit-transform: rotate(45deg);\n            transform: rotate(45deg);\n    opacity: 0;\n  }\n  to {\n    -webkit-transform: rotate(360deg);\n            transform: rotate(360deg);\n    opacity: 1;\n  }\n}\n@-webkit-keyframes mdc-checkbox-checked-indeterminate-mixedmark {\n  from {\n    -webkit-animation-timing-function: mdc-animation-deceleration-curve-timing-function;\n            animation-timing-function: mdc-animation-deceleration-curve-timing-function;\n    -webkit-transform: rotate(-45deg);\n            transform: rotate(-45deg);\n    opacity: 0;\n  }\n  to {\n    -webkit-transform: rotate(0deg);\n            transform: rotate(0deg);\n    opacity: 1;\n  }\n}\n@keyframes mdc-checkbox-checked-indeterminate-mixedmark {\n  from {\n    -webkit-animation-timing-function: mdc-animation-deceleration-curve-timing-function;\n            animation-timing-function: mdc-animation-deceleration-curve-timing-function;\n    -webkit-transform: rotate(-45deg);\n            transform: rotate(-45deg);\n    opacity: 0;\n  }\n  to {\n    -webkit-transform: rotate(0deg);\n            transform: rotate(0deg);\n    opacity: 1;\n  }\n}\n@-webkit-keyframes mdc-checkbox-indeterminate-checked-mixedmark {\n  from {\n    -webkit-animation-timing-function: cubic-bezier(0.14, 0, 0, 1);\n            animation-timing-function: cubic-bezier(0.14, 0, 0, 1);\n    -webkit-transform: rotate(0deg);\n            transform: rotate(0deg);\n    opacity: 1;\n  }\n  to {\n    -webkit-transform: rotate(315deg);\n            transform: rotate(315deg);\n    opacity: 0;\n  }\n}\n@keyframes mdc-checkbox-indeterminate-checked-mixedmark {\n  from {\n    -webkit-animation-timing-function: cubic-bezier(0.14, 0, 0, 1);\n            animation-timing-function: cubic-bezier(0.14, 0, 0, 1);\n    -webkit-transform: rotate(0deg);\n            transform: rotate(0deg);\n    opacity: 1;\n  }\n  to {\n    -webkit-transform: rotate(315deg);\n            transform: rotate(315deg);\n    opacity: 0;\n  }\n}\n@-webkit-keyframes mdc-checkbox-indeterminate-unchecked-mixedmark {\n  0% {\n    -webkit-animation-timing-function: linear;\n            animation-timing-function: linear;\n    -webkit-transform: scaleX(1);\n            transform: scaleX(1);\n    opacity: 1;\n  }\n  32.8%, 100% {\n    -webkit-transform: scaleX(0);\n            transform: scaleX(0);\n    opacity: 0;\n  }\n}\n@keyframes mdc-checkbox-indeterminate-unchecked-mixedmark {\n  0% {\n    -webkit-animation-timing-function: linear;\n            animation-timing-function: linear;\n    -webkit-transform: scaleX(1);\n            transform: scaleX(1);\n    opacity: 1;\n  }\n  32.8%, 100% {\n    -webkit-transform: scaleX(0);\n            transform: scaleX(0);\n    opacity: 0;\n  }\n}\n.mdc-checkbox {\n  display: inline-block;\n  position: relative;\n  flex: 0 0 18px;\n  box-sizing: content-box;\n  width: 18px;\n  height: 18px;\n  line-height: 0;\n  white-space: nowrap;\n  cursor: pointer;\n  vertical-align: bottom;\n  padding: 11px;\n}\n.mdc-checkbox .mdc-checkbox__native-control:checked ~ .mdc-checkbox__background::before,\n.mdc-checkbox .mdc-checkbox__native-control:indeterminate ~ .mdc-checkbox__background::before,\n.mdc-checkbox .mdc-checkbox__native-control[data-indeterminate=true] ~ .mdc-checkbox__background::before {\n  background-color: #018786;\n  /* @alternate */\n  background-color: var(--mdc-theme-secondary, #018786);\n}\n.mdc-checkbox.mdc-checkbox--selected .mdc-checkbox__ripple::before, .mdc-checkbox.mdc-checkbox--selected .mdc-checkbox__ripple::after {\n  background-color: #018786;\n  /* @alternate */\n  background-color: var(--mdc-theme-secondary, #018786);\n}\n.mdc-checkbox.mdc-checkbox--selected:hover .mdc-checkbox__ripple::before {\n  opacity: 0.04;\n}\n.mdc-checkbox.mdc-checkbox--selected.mdc-ripple-upgraded--background-focused .mdc-checkbox__ripple::before, .mdc-checkbox.mdc-checkbox--selected:not(.mdc-ripple-upgraded):focus .mdc-checkbox__ripple::before {\n  transition-duration: 75ms;\n  opacity: 0.12;\n}\n.mdc-checkbox.mdc-checkbox--selected:not(.mdc-ripple-upgraded) .mdc-checkbox__ripple::after {\n  transition: opacity 150ms linear;\n}\n.mdc-checkbox.mdc-checkbox--selected:not(.mdc-ripple-upgraded):active .mdc-checkbox__ripple::after {\n  transition-duration: 75ms;\n  opacity: 0.12;\n}\n.mdc-checkbox.mdc-checkbox--selected.mdc-ripple-upgraded {\n  --mdc-ripple-fg-opacity: 0.12;\n}\n.mdc-checkbox.mdc-ripple-upgraded--background-focused.mdc-checkbox--selected .mdc-checkbox__ripple::before,\n.mdc-checkbox.mdc-ripple-upgraded--background-focused.mdc-checkbox--selected .mdc-checkbox__ripple::after {\n  background-color: #018786;\n  /* @alternate */\n  background-color: var(--mdc-theme-secondary, #018786);\n}\n.mdc-checkbox .mdc-checkbox__background {\n  top: 11px;\n  left: 11px;\n}\n.mdc-checkbox .mdc-checkbox__background::before {\n  top: -13px;\n  left: -13px;\n  width: 40px;\n  height: 40px;\n}\n.mdc-checkbox .mdc-checkbox__native-control {\n  top: 0px;\n  right: 0px;\n  left: 0px;\n  width: 40px;\n  height: 40px;\n}\n\n.mdc-checkbox__native-control:enabled:not(:checked):not(:indeterminate):not([data-indeterminate=true]) ~ .mdc-checkbox__background {\n  border-color: rgba(0, 0, 0, 0.54);\n  background-color: transparent;\n}\n\n.mdc-checkbox__native-control:enabled:checked ~ .mdc-checkbox__background,\n.mdc-checkbox__native-control:enabled:indeterminate ~ .mdc-checkbox__background,\n.mdc-checkbox__native-control[data-indeterminate=true]:enabled ~ .mdc-checkbox__background {\n  border-color: #018786;\n  /* @alternate */\n  border-color: var(--mdc-theme-secondary, #018786);\n  background-color: #018786;\n  /* @alternate */\n  background-color: var(--mdc-theme-secondary, #018786);\n}\n\n@-webkit-keyframes mdc-checkbox-fade-in-background-8A000000secondary00000000secondary {\n  0% {\n    border-color: rgba(0, 0, 0, 0.54);\n    background-color: transparent;\n  }\n  50% {\n    border-color: #018786;\n    /* @alternate */\n    border-color: var(--mdc-theme-secondary, #018786);\n    background-color: #018786;\n    /* @alternate */\n    background-color: var(--mdc-theme-secondary, #018786);\n  }\n}\n\n@keyframes mdc-checkbox-fade-in-background-8A000000secondary00000000secondary {\n  0% {\n    border-color: rgba(0, 0, 0, 0.54);\n    background-color: transparent;\n  }\n  50% {\n    border-color: #018786;\n    /* @alternate */\n    border-color: var(--mdc-theme-secondary, #018786);\n    background-color: #018786;\n    /* @alternate */\n    background-color: var(--mdc-theme-secondary, #018786);\n  }\n}\n@-webkit-keyframes mdc-checkbox-fade-out-background-8A000000secondary00000000secondary {\n  0%, 80% {\n    border-color: #018786;\n    /* @alternate */\n    border-color: var(--mdc-theme-secondary, #018786);\n    background-color: #018786;\n    /* @alternate */\n    background-color: var(--mdc-theme-secondary, #018786);\n  }\n  100% {\n    border-color: rgba(0, 0, 0, 0.54);\n    background-color: transparent;\n  }\n}\n@keyframes mdc-checkbox-fade-out-background-8A000000secondary00000000secondary {\n  0%, 80% {\n    border-color: #018786;\n    /* @alternate */\n    border-color: var(--mdc-theme-secondary, #018786);\n    background-color: #018786;\n    /* @alternate */\n    background-color: var(--mdc-theme-secondary, #018786);\n  }\n  100% {\n    border-color: rgba(0, 0, 0, 0.54);\n    background-color: transparent;\n  }\n}\n.mdc-checkbox--anim-unchecked-checked .mdc-checkbox__native-control:enabled ~ .mdc-checkbox__background, .mdc-checkbox--anim-unchecked-indeterminate .mdc-checkbox__native-control:enabled ~ .mdc-checkbox__background {\n  -webkit-animation-name: mdc-checkbox-fade-in-background-8A000000secondary00000000secondary;\n          animation-name: mdc-checkbox-fade-in-background-8A000000secondary00000000secondary;\n}\n.mdc-checkbox--anim-checked-unchecked .mdc-checkbox__native-control:enabled ~ .mdc-checkbox__background, .mdc-checkbox--anim-indeterminate-unchecked .mdc-checkbox__native-control:enabled ~ .mdc-checkbox__background {\n  -webkit-animation-name: mdc-checkbox-fade-out-background-8A000000secondary00000000secondary;\n          animation-name: mdc-checkbox-fade-out-background-8A000000secondary00000000secondary;\n}\n\n.mdc-checkbox__native-control[disabled]:not(:checked):not(:indeterminate):not([data-indeterminate=true]) ~ .mdc-checkbox__background {\n  border-color: rgba(0, 0, 0, 0.38);\n  background-color: transparent;\n}\n\n.mdc-checkbox__native-control[disabled]:checked ~ .mdc-checkbox__background,\n.mdc-checkbox__native-control[disabled]:indeterminate ~ .mdc-checkbox__background,\n.mdc-checkbox__native-control[data-indeterminate=true][disabled] ~ .mdc-checkbox__background {\n  border-color: transparent;\n  background-color: rgba(0, 0, 0, 0.38);\n}\n\n.mdc-checkbox__native-control:enabled ~ .mdc-checkbox__background .mdc-checkbox__checkmark {\n  color: #fff;\n}\n.mdc-checkbox__native-control:enabled ~ .mdc-checkbox__background .mdc-checkbox__mixedmark {\n  border-color: #fff;\n}\n\n.mdc-checkbox__native-control:disabled ~ .mdc-checkbox__background .mdc-checkbox__checkmark {\n  color: #fff;\n}\n.mdc-checkbox__native-control:disabled ~ .mdc-checkbox__background .mdc-checkbox__mixedmark {\n  border-color: #fff;\n}\n\n@media screen and (-ms-high-contrast: active) {\n  .mdc-checkbox__native-control[disabled]:not(:checked):not(:indeterminate):not([data-indeterminate=true]) ~ .mdc-checkbox__background {\n    border-color: GrayText;\n    background-color: transparent;\n  }\n\n  .mdc-checkbox__native-control[disabled]:checked ~ .mdc-checkbox__background,\n.mdc-checkbox__native-control[disabled]:indeterminate ~ .mdc-checkbox__background,\n.mdc-checkbox__native-control[data-indeterminate=true][disabled] ~ .mdc-checkbox__background {\n    border-color: GrayText;\n    background-color: transparent;\n  }\n\n  .mdc-checkbox__native-control:disabled ~ .mdc-checkbox__background .mdc-checkbox__checkmark {\n    color: GrayText;\n  }\n  .mdc-checkbox__native-control:disabled ~ .mdc-checkbox__background .mdc-checkbox__mixedmark {\n    border-color: GrayText;\n  }\n\n  .mdc-checkbox__mixedmark {\n    margin: 0 1px;\n  }\n}\n.mdc-checkbox--disabled {\n  cursor: default;\n  pointer-events: none;\n}\n\n.mdc-checkbox__background {\n  display: inline-flex;\n  position: absolute;\n  align-items: center;\n  justify-content: center;\n  box-sizing: border-box;\n  width: 18px;\n  height: 18px;\n  border: 2px solid currentColor;\n  border-radius: 2px;\n  background-color: transparent;\n  pointer-events: none;\n  will-change: background-color, border-color;\n  transition: background-color 90ms 0ms cubic-bezier(0.4, 0, 0.6, 1), border-color 90ms 0ms cubic-bezier(0.4, 0, 0.6, 1);\n}\n.mdc-checkbox__background .mdc-checkbox__background::before {\n  background-color: #000;\n  /* @alternate */\n  background-color: var(--mdc-theme-on-surface, #000);\n}\n\n.mdc-checkbox__checkmark {\n  position: absolute;\n  top: 0;\n  right: 0;\n  bottom: 0;\n  left: 0;\n  width: 100%;\n  opacity: 0;\n  transition: opacity 180ms 0ms cubic-bezier(0.4, 0, 0.6, 1);\n}\n.mdc-checkbox--upgraded .mdc-checkbox__checkmark {\n  opacity: 1;\n}\n\n.mdc-checkbox__checkmark-path {\n  transition: stroke-dashoffset 180ms 0ms cubic-bezier(0.4, 0, 0.6, 1);\n  stroke: currentColor;\n  stroke-width: 3.12px;\n  stroke-dashoffset: 29.7833385;\n  stroke-dasharray: 29.7833385;\n}\n\n.mdc-checkbox__mixedmark {\n  width: 100%;\n  height: 0;\n  -webkit-transform: scaleX(0) rotate(0deg);\n          transform: scaleX(0) rotate(0deg);\n  border-width: 1px;\n  border-style: solid;\n  opacity: 0;\n  transition: opacity 90ms 0ms cubic-bezier(0.4, 0, 0.6, 1), -webkit-transform 90ms 0ms cubic-bezier(0.4, 0, 0.6, 1);\n  transition: opacity 90ms 0ms cubic-bezier(0.4, 0, 0.6, 1), transform 90ms 0ms cubic-bezier(0.4, 0, 0.6, 1);\n  transition: opacity 90ms 0ms cubic-bezier(0.4, 0, 0.6, 1), transform 90ms 0ms cubic-bezier(0.4, 0, 0.6, 1), -webkit-transform 90ms 0ms cubic-bezier(0.4, 0, 0.6, 1);\n}\n\n.mdc-checkbox--upgraded .mdc-checkbox__background,\n.mdc-checkbox--upgraded .mdc-checkbox__checkmark,\n.mdc-checkbox--upgraded .mdc-checkbox__checkmark-path,\n.mdc-checkbox--upgraded .mdc-checkbox__mixedmark {\n  transition: none !important;\n}\n\n.mdc-checkbox--anim-unchecked-checked .mdc-checkbox__background, .mdc-checkbox--anim-unchecked-indeterminate .mdc-checkbox__background, .mdc-checkbox--anim-checked-unchecked .mdc-checkbox__background, .mdc-checkbox--anim-indeterminate-unchecked .mdc-checkbox__background {\n  -webkit-animation-duration: 180ms;\n          animation-duration: 180ms;\n  -webkit-animation-timing-function: linear;\n          animation-timing-function: linear;\n}\n.mdc-checkbox--anim-unchecked-checked .mdc-checkbox__checkmark-path {\n  -webkit-animation: mdc-checkbox-unchecked-checked-checkmark-path 180ms linear 0s;\n          animation: mdc-checkbox-unchecked-checked-checkmark-path 180ms linear 0s;\n  transition: none;\n}\n.mdc-checkbox--anim-unchecked-indeterminate .mdc-checkbox__mixedmark {\n  -webkit-animation: mdc-checkbox-unchecked-indeterminate-mixedmark 90ms linear 0s;\n          animation: mdc-checkbox-unchecked-indeterminate-mixedmark 90ms linear 0s;\n  transition: none;\n}\n.mdc-checkbox--anim-checked-unchecked .mdc-checkbox__checkmark-path {\n  -webkit-animation: mdc-checkbox-checked-unchecked-checkmark-path 90ms linear 0s;\n          animation: mdc-checkbox-checked-unchecked-checkmark-path 90ms linear 0s;\n  transition: none;\n}\n.mdc-checkbox--anim-checked-indeterminate .mdc-checkbox__checkmark {\n  -webkit-animation: mdc-checkbox-checked-indeterminate-checkmark 90ms linear 0s;\n          animation: mdc-checkbox-checked-indeterminate-checkmark 90ms linear 0s;\n  transition: none;\n}\n.mdc-checkbox--anim-checked-indeterminate .mdc-checkbox__mixedmark {\n  -webkit-animation: mdc-checkbox-checked-indeterminate-mixedmark 90ms linear 0s;\n          animation: mdc-checkbox-checked-indeterminate-mixedmark 90ms linear 0s;\n  transition: none;\n}\n.mdc-checkbox--anim-indeterminate-checked .mdc-checkbox__checkmark {\n  -webkit-animation: mdc-checkbox-indeterminate-checked-checkmark 500ms linear 0s;\n          animation: mdc-checkbox-indeterminate-checked-checkmark 500ms linear 0s;\n  transition: none;\n}\n.mdc-checkbox--anim-indeterminate-checked .mdc-checkbox__mixedmark {\n  -webkit-animation: mdc-checkbox-indeterminate-checked-mixedmark 500ms linear 0s;\n          animation: mdc-checkbox-indeterminate-checked-mixedmark 500ms linear 0s;\n  transition: none;\n}\n.mdc-checkbox--anim-indeterminate-unchecked .mdc-checkbox__mixedmark {\n  -webkit-animation: mdc-checkbox-indeterminate-unchecked-mixedmark 300ms linear 0s;\n          animation: mdc-checkbox-indeterminate-unchecked-mixedmark 300ms linear 0s;\n  transition: none;\n}\n\n.mdc-checkbox__native-control:checked ~ .mdc-checkbox__background,\n.mdc-checkbox__native-control:indeterminate ~ .mdc-checkbox__background,\n.mdc-checkbox__native-control[data-indeterminate=true] ~ .mdc-checkbox__background {\n  transition: border-color 90ms 0ms cubic-bezier(0, 0, 0.2, 1), background-color 90ms 0ms cubic-bezier(0, 0, 0.2, 1);\n}\n.mdc-checkbox__native-control:checked ~ .mdc-checkbox__background .mdc-checkbox__checkmark-path,\n.mdc-checkbox__native-control:indeterminate ~ .mdc-checkbox__background .mdc-checkbox__checkmark-path,\n.mdc-checkbox__native-control[data-indeterminate=true] ~ .mdc-checkbox__background .mdc-checkbox__checkmark-path {\n  stroke-dashoffset: 0;\n}\n\n.mdc-checkbox__background::before {\n  position: absolute;\n  -webkit-transform: scale(0, 0);\n          transform: scale(0, 0);\n  border-radius: 50%;\n  opacity: 0;\n  pointer-events: none;\n  content: "";\n  will-change: opacity, transform;\n  transition: opacity 90ms 0ms cubic-bezier(0.4, 0, 0.6, 1), -webkit-transform 90ms 0ms cubic-bezier(0.4, 0, 0.6, 1);\n  transition: opacity 90ms 0ms cubic-bezier(0.4, 0, 0.6, 1), transform 90ms 0ms cubic-bezier(0.4, 0, 0.6, 1);\n  transition: opacity 90ms 0ms cubic-bezier(0.4, 0, 0.6, 1), transform 90ms 0ms cubic-bezier(0.4, 0, 0.6, 1), -webkit-transform 90ms 0ms cubic-bezier(0.4, 0, 0.6, 1);\n}\n\n.mdc-checkbox__native-control:focus ~ .mdc-checkbox__background::before {\n  -webkit-transform: scale(1);\n          transform: scale(1);\n  opacity: 0.12;\n  transition: opacity 80ms 0ms cubic-bezier(0, 0, 0.2, 1), -webkit-transform 80ms 0ms cubic-bezier(0, 0, 0.2, 1);\n  transition: opacity 80ms 0ms cubic-bezier(0, 0, 0.2, 1), transform 80ms 0ms cubic-bezier(0, 0, 0.2, 1);\n  transition: opacity 80ms 0ms cubic-bezier(0, 0, 0.2, 1), transform 80ms 0ms cubic-bezier(0, 0, 0.2, 1), -webkit-transform 80ms 0ms cubic-bezier(0, 0, 0.2, 1);\n}\n\n.mdc-checkbox__native-control {\n  position: absolute;\n  margin: 0;\n  padding: 0;\n  opacity: 0;\n  cursor: inherit;\n}\n.mdc-checkbox__native-control:disabled {\n  cursor: default;\n  pointer-events: none;\n}\n\n.mdc-checkbox--touch {\n  margin-top: 4px;\n  margin-bottom: 4px;\n  margin-right: 4px;\n  margin-left: 4px;\n}\n.mdc-checkbox--touch .mdc-checkbox__native-control {\n  top: -4px;\n  right: -4px;\n  left: -4px;\n  width: 48px;\n  height: 48px;\n}\n\n.mdc-checkbox__native-control:checked ~ .mdc-checkbox__background .mdc-checkbox__checkmark {\n  transition: opacity 180ms 0ms cubic-bezier(0, 0, 0.2, 1), -webkit-transform 180ms 0ms cubic-bezier(0, 0, 0.2, 1);\n  transition: opacity 180ms 0ms cubic-bezier(0, 0, 0.2, 1), transform 180ms 0ms cubic-bezier(0, 0, 0.2, 1);\n  transition: opacity 180ms 0ms cubic-bezier(0, 0, 0.2, 1), transform 180ms 0ms cubic-bezier(0, 0, 0.2, 1), -webkit-transform 180ms 0ms cubic-bezier(0, 0, 0.2, 1);\n  opacity: 1;\n}\n.mdc-checkbox__native-control:checked ~ .mdc-checkbox__background .mdc-checkbox__mixedmark {\n  -webkit-transform: scaleX(1) rotate(-45deg);\n          transform: scaleX(1) rotate(-45deg);\n}\n\n.mdc-checkbox__native-control:indeterminate ~ .mdc-checkbox__background .mdc-checkbox__checkmark,\n.mdc-checkbox__native-control[data-indeterminate=true] ~ .mdc-checkbox__background .mdc-checkbox__checkmark {\n  -webkit-transform: rotate(45deg);\n          transform: rotate(45deg);\n  opacity: 0;\n  transition: opacity 90ms 0ms cubic-bezier(0.4, 0, 0.6, 1), -webkit-transform 90ms 0ms cubic-bezier(0.4, 0, 0.6, 1);\n  transition: opacity 90ms 0ms cubic-bezier(0.4, 0, 0.6, 1), transform 90ms 0ms cubic-bezier(0.4, 0, 0.6, 1);\n  transition: opacity 90ms 0ms cubic-bezier(0.4, 0, 0.6, 1), transform 90ms 0ms cubic-bezier(0.4, 0, 0.6, 1), -webkit-transform 90ms 0ms cubic-bezier(0.4, 0, 0.6, 1);\n}\n.mdc-checkbox__native-control:indeterminate ~ .mdc-checkbox__background .mdc-checkbox__mixedmark,\n.mdc-checkbox__native-control[data-indeterminate=true] ~ .mdc-checkbox__background .mdc-checkbox__mixedmark {\n  -webkit-transform: scaleX(1) rotate(0deg);\n          transform: scaleX(1) rotate(0deg);\n  opacity: 1;\n}\n\n@-webkit-keyframes mdc-ripple-fg-radius-in {\n  from {\n    -webkit-animation-timing-function: cubic-bezier(0.4, 0, 0.2, 1);\n            animation-timing-function: cubic-bezier(0.4, 0, 0.2, 1);\n    -webkit-transform: translate(var(--mdc-ripple-fg-translate-start, 0)) scale(1);\n            transform: translate(var(--mdc-ripple-fg-translate-start, 0)) scale(1);\n  }\n  to {\n    -webkit-transform: translate(var(--mdc-ripple-fg-translate-end, 0)) scale(var(--mdc-ripple-fg-scale, 1));\n            transform: translate(var(--mdc-ripple-fg-translate-end, 0)) scale(var(--mdc-ripple-fg-scale, 1));\n  }\n}\n\n@keyframes mdc-ripple-fg-radius-in {\n  from {\n    -webkit-animation-timing-function: cubic-bezier(0.4, 0, 0.2, 1);\n            animation-timing-function: cubic-bezier(0.4, 0, 0.2, 1);\n    -webkit-transform: translate(var(--mdc-ripple-fg-translate-start, 0)) scale(1);\n            transform: translate(var(--mdc-ripple-fg-translate-start, 0)) scale(1);\n  }\n  to {\n    -webkit-transform: translate(var(--mdc-ripple-fg-translate-end, 0)) scale(var(--mdc-ripple-fg-scale, 1));\n            transform: translate(var(--mdc-ripple-fg-translate-end, 0)) scale(var(--mdc-ripple-fg-scale, 1));\n  }\n}\n@-webkit-keyframes mdc-ripple-fg-opacity-in {\n  from {\n    -webkit-animation-timing-function: linear;\n            animation-timing-function: linear;\n    opacity: 0;\n  }\n  to {\n    opacity: var(--mdc-ripple-fg-opacity, 0);\n  }\n}\n@keyframes mdc-ripple-fg-opacity-in {\n  from {\n    -webkit-animation-timing-function: linear;\n            animation-timing-function: linear;\n    opacity: 0;\n  }\n  to {\n    opacity: var(--mdc-ripple-fg-opacity, 0);\n  }\n}\n@-webkit-keyframes mdc-ripple-fg-opacity-out {\n  from {\n    -webkit-animation-timing-function: linear;\n            animation-timing-function: linear;\n    opacity: var(--mdc-ripple-fg-opacity, 0);\n  }\n  to {\n    opacity: 0;\n  }\n}\n@keyframes mdc-ripple-fg-opacity-out {\n  from {\n    -webkit-animation-timing-function: linear;\n            animation-timing-function: linear;\n    opacity: var(--mdc-ripple-fg-opacity, 0);\n  }\n  to {\n    opacity: 0;\n  }\n}\n.mdc-checkbox {\n  --mdc-ripple-fg-size: 0;\n  --mdc-ripple-left: 0;\n  --mdc-ripple-top: 0;\n  --mdc-ripple-fg-scale: 1;\n  --mdc-ripple-fg-translate-end: 0;\n  --mdc-ripple-fg-translate-start: 0;\n  -webkit-tap-highlight-color: rgba(0, 0, 0, 0);\n}\n.mdc-checkbox .mdc-checkbox__ripple::before,\n.mdc-checkbox .mdc-checkbox__ripple::after {\n  position: absolute;\n  border-radius: 50%;\n  opacity: 0;\n  pointer-events: none;\n  content: "";\n}\n.mdc-checkbox .mdc-checkbox__ripple::before {\n  transition: opacity 15ms linear, background-color 15ms linear;\n  z-index: 1;\n}\n.mdc-checkbox.mdc-ripple-upgraded .mdc-checkbox__ripple::before {\n  -webkit-transform: scale(var(--mdc-ripple-fg-scale, 1));\n          transform: scale(var(--mdc-ripple-fg-scale, 1));\n}\n.mdc-checkbox.mdc-ripple-upgraded .mdc-checkbox__ripple::after {\n  top: 0;\n  /* @noflip */\n  left: 0;\n  -webkit-transform: scale(0);\n          transform: scale(0);\n  -webkit-transform-origin: center center;\n          transform-origin: center center;\n}\n.mdc-checkbox.mdc-ripple-upgraded--unbounded .mdc-checkbox__ripple::after {\n  top: var(--mdc-ripple-top, 0);\n  /* @noflip */\n  left: var(--mdc-ripple-left, 0);\n}\n.mdc-checkbox.mdc-ripple-upgraded--foreground-activation .mdc-checkbox__ripple::after {\n  -webkit-animation: mdc-ripple-fg-radius-in 225ms forwards, mdc-ripple-fg-opacity-in 75ms forwards;\n          animation: mdc-ripple-fg-radius-in 225ms forwards, mdc-ripple-fg-opacity-in 75ms forwards;\n}\n.mdc-checkbox.mdc-ripple-upgraded--foreground-deactivation .mdc-checkbox__ripple::after {\n  -webkit-animation: mdc-ripple-fg-opacity-out 150ms;\n          animation: mdc-ripple-fg-opacity-out 150ms;\n  -webkit-transform: translate(var(--mdc-ripple-fg-translate-end, 0)) scale(var(--mdc-ripple-fg-scale, 1));\n          transform: translate(var(--mdc-ripple-fg-translate-end, 0)) scale(var(--mdc-ripple-fg-scale, 1));\n}\n.mdc-checkbox .mdc-checkbox__ripple::before, .mdc-checkbox .mdc-checkbox__ripple::after {\n  background-color: #000;\n  /* @alternate */\n  background-color: var(--mdc-theme-on-surface, #000);\n}\n.mdc-checkbox:hover .mdc-checkbox__ripple::before {\n  opacity: 0.04;\n}\n.mdc-checkbox.mdc-ripple-upgraded--background-focused .mdc-checkbox__ripple::before, .mdc-checkbox:not(.mdc-ripple-upgraded):focus .mdc-checkbox__ripple::before {\n  transition-duration: 75ms;\n  opacity: 0.12;\n}\n.mdc-checkbox:not(.mdc-ripple-upgraded) .mdc-checkbox__ripple::after {\n  transition: opacity 150ms linear;\n}\n.mdc-checkbox:not(.mdc-ripple-upgraded):active .mdc-checkbox__ripple::after {\n  transition-duration: 75ms;\n  opacity: 0.12;\n}\n.mdc-checkbox.mdc-ripple-upgraded {\n  --mdc-ripple-fg-opacity: 0.12;\n}\n.mdc-checkbox .mdc-checkbox__ripple::before,\n.mdc-checkbox .mdc-checkbox__ripple::after {\n  top: calc(50% - 50%);\n  /* @noflip */\n  left: calc(50% - 50%);\n  width: 100%;\n  height: 100%;\n}\n.mdc-checkbox.mdc-ripple-upgraded .mdc-checkbox__ripple::before,\n.mdc-checkbox.mdc-ripple-upgraded .mdc-checkbox__ripple::after {\n  top: var(--mdc-ripple-top, calc(50% - 50%));\n  /* @noflip */\n  left: var(--mdc-ripple-left, calc(50% - 50%));\n  width: var(--mdc-ripple-fg-size, 100%);\n  height: var(--mdc-ripple-fg-size, 100%);\n}\n.mdc-checkbox.mdc-ripple-upgraded .mdc-checkbox__ripple::after {\n  width: var(--mdc-ripple-fg-size, 100%);\n  height: var(--mdc-ripple-fg-size, 100%);\n}\n\n.mdc-checkbox__ripple {\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  pointer-events: none;\n}\n\n.mdc-ripple-upgraded--background-focused .mdc-checkbox__background::before {\n  content: none;\n}\n\n/*# sourceMappingURL=mdc.checkbox.css.map*/'],sourceRoot:""}]),t.default=o},function(e,t,n){var r=n(1),o=n(12);"string"==typeof(o=o.__esModule?o.default:o)&&(o=[[e.i,o,""]]);var i={insert:"head",singleton:!1};r(o,i);e.exports=o.locals||{}},function(e,t,n){"use strict";n.r(t);var r=n(0),o=n.n(r)()(!0);o.push([e.i,'@-webkit-keyframes mdc-slider-emphasize{0%{-webkit-animation-timing-function:ease-out;animation-timing-function:ease-out}50%{-webkit-animation-timing-function:ease-in;animation-timing-function:ease-in;-webkit-transform:scale(0.85);transform:scale(0.85)}100%{-webkit-transform:scale(0.571);transform:scale(0.571)}}@keyframes mdc-slider-emphasize{0%{-webkit-animation-timing-function:ease-out;animation-timing-function:ease-out}50%{-webkit-animation-timing-function:ease-in;animation-timing-function:ease-in;-webkit-transform:scale(0.85);transform:scale(0.85)}100%{-webkit-transform:scale(0.571);transform:scale(0.571)}}.mdc-slider{position:relative;width:100%;height:48px;cursor:pointer;touch-action:pan-x;-webkit-tap-highlight-color:rgba(0,0,0,0)}.mdc-slider:not(.mdc-slider--disabled) .mdc-slider__track{background-color:#018786;background-color:var(--mdc-theme-secondary, #018786)}.mdc-slider:not(.mdc-slider--disabled) .mdc-slider__track-container::after{background-color:#018786;background-color:var(--mdc-theme-secondary, #018786);opacity:.26}.mdc-slider:not(.mdc-slider--disabled) .mdc-slider__track-marker-container{background-color:#018786;background-color:var(--mdc-theme-secondary, #018786)}.mdc-slider:not(.mdc-slider--disabled) .mdc-slider__thumb{fill:#018786;fill:var(--mdc-theme-secondary, #018786);stroke:#018786;stroke:var(--mdc-theme-secondary, #018786)}.mdc-slider:not(.mdc-slider--disabled) .mdc-slider__focus-ring{background-color:#018786;background-color:var(--mdc-theme-secondary, #018786)}.mdc-slider:not(.mdc-slider--disabled) .mdc-slider__pin{background-color:#018786;background-color:var(--mdc-theme-secondary, #018786)}.mdc-slider:not(.mdc-slider--disabled) .mdc-slider__pin{color:#fff;color:var(--mdc-theme-text-primary-on-dark, white)}.mdc-slider--disable-touch-action{touch-action:none}.mdc-slider--disabled{cursor:auto}.mdc-slider--disabled .mdc-slider__track{background-color:#9a9a9a}.mdc-slider--disabled .mdc-slider__track-container::after{background-color:#9a9a9a;opacity:.26}.mdc-slider--disabled .mdc-slider__track-marker-container{background-color:#9a9a9a}.mdc-slider--disabled .mdc-slider__thumb{fill:#9a9a9a;stroke:#9a9a9a}.mdc-slider--disabled .mdc-slider__thumb{stroke:#fff;stroke:var(--mdc-slider-bg-color-behind-component, white)}.mdc-slider:focus{outline:none}.mdc-slider__track-container{position:absolute;top:50%;width:100%;height:2px;overflow:hidden}.mdc-slider__track-container::after{position:absolute;top:0;left:0;display:block;width:100%;height:100%;content:""}.mdc-slider__track{position:absolute;width:100%;height:100%;-webkit-transform-origin:left top;transform-origin:left top;will-change:transform}.mdc-slider[dir=rtl] .mdc-slider__track,[dir=rtl] .mdc-slider .mdc-slider__track{-webkit-transform-origin:right top;transform-origin:right top}.mdc-slider__track-marker-container{display:flex;margin-right:0;margin-left:-1px;visibility:hidden}.mdc-slider[dir=rtl] .mdc-slider__track-marker-container,[dir=rtl] .mdc-slider .mdc-slider__track-marker-container{margin-right:-1px;margin-left:0}.mdc-slider__track-marker-container::after{display:block;width:2px;height:2px;content:""}.mdc-slider__track-marker{flex:1}.mdc-slider__track-marker::after{display:block;width:2px;height:2px;content:""}.mdc-slider__track-marker:first-child::after{width:3px}.mdc-slider__thumb-container{position:absolute;top:15px;left:0;width:21px;height:100%;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;will-change:transform}.mdc-slider__thumb{position:absolute;top:0;left:0;-webkit-transform:scale(0.571);transform:scale(0.571);stroke-width:3.5;transition:fill 100ms ease-out,stroke 100ms ease-out,-webkit-transform 100ms ease-out;transition:transform 100ms ease-out,fill 100ms ease-out,stroke 100ms ease-out;transition:transform 100ms ease-out,fill 100ms ease-out,stroke 100ms ease-out,-webkit-transform 100ms ease-out}.mdc-slider__focus-ring{width:21px;height:21px;border-radius:50%;opacity:0;transition:opacity 266.67ms ease-out,background-color 266.67ms ease-out,-webkit-transform 266.67ms ease-out;transition:transform 266.67ms ease-out,opacity 266.67ms ease-out,background-color 266.67ms ease-out;transition:transform 266.67ms ease-out,opacity 266.67ms ease-out,background-color 266.67ms ease-out,-webkit-transform 266.67ms ease-out}.mdc-slider__pin{display:flex;position:absolute;top:0;left:0;align-items:center;justify-content:center;width:26px;height:26px;margin-top:-2px;margin-left:-2px;-webkit-transform:rotate(-45deg) scale(0) translate(0, 0);transform:rotate(-45deg) scale(0) translate(0, 0);border-radius:50% 50% 50% 0%;z-index:1;transition:-webkit-transform 100ms ease-out;transition:transform 100ms ease-out;transition:transform 100ms ease-out,-webkit-transform 100ms ease-out}.mdc-slider__pin-value-marker{-moz-osx-font-smoothing:grayscale;-webkit-font-smoothing:antialiased;font-family:Roboto,sans-serif;font-family:var(--mdc-typography-body2-font-family, var(--mdc-typography-font-family, Roboto, sans-serif));font-size:.875rem;font-size:var(--mdc-typography-body2-font-size, 0.875rem);line-height:1.25rem;line-height:var(--mdc-typography-body2-line-height, 1.25rem);font-weight:400;font-weight:var(--mdc-typography-body2-font-weight, 400);letter-spacing:.0178571429em;letter-spacing:var(--mdc-typography-body2-letter-spacing, 0.0178571429em);text-decoration:inherit;-webkit-text-decoration:var(--mdc-typography-body2-text-decoration, inherit);text-decoration:var(--mdc-typography-body2-text-decoration, inherit);text-transform:inherit;text-transform:var(--mdc-typography-body2-text-transform, inherit);-webkit-transform:rotate(45deg);transform:rotate(45deg)}.mdc-slider--active .mdc-slider__thumb{-webkit-transform:scale3d(1, 1, 1);transform:scale3d(1, 1, 1)}.mdc-slider--focus .mdc-slider__thumb{-webkit-animation:mdc-slider-emphasize 266.67ms linear;animation:mdc-slider-emphasize 266.67ms linear}.mdc-slider--focus .mdc-slider__focus-ring{-webkit-transform:scale3d(1.55, 1.55, 1.55);transform:scale3d(1.55, 1.55, 1.55);opacity:.25}.mdc-slider--in-transit .mdc-slider__thumb{transition-delay:140ms}.mdc-slider--in-transit .mdc-slider__thumb-container,.mdc-slider--in-transit .mdc-slider__track,.mdc-slider:focus:not(.mdc-slider--active) .mdc-slider__thumb-container,.mdc-slider:focus:not(.mdc-slider--active) .mdc-slider__track{transition:-webkit-transform 80ms ease;transition:transform 80ms ease;transition:transform 80ms ease,-webkit-transform 80ms ease}.mdc-slider--discrete.mdc-slider--active .mdc-slider__thumb{-webkit-transform:scale(calc(12 / 21));transform:scale(calc(12 / 21))}.mdc-slider--discrete.mdc-slider--active .mdc-slider__pin{-webkit-transform:rotate(-45deg) scale(1) translate(19px, -20px);transform:rotate(-45deg) scale(1) translate(19px, -20px)}.mdc-slider--discrete.mdc-slider--focus .mdc-slider__thumb{-webkit-animation:none;animation:none}.mdc-slider--discrete.mdc-slider--display-markers .mdc-slider__track-marker-container{visibility:visible}',"",{version:3,sources:["webpack://node_modules/@material/slider/dist/mdc.slider.css"],names:[],mappings:"AAOA,wCACE,GACE,0CAAA,CACQ,kCAAA,CAEV,IACE,yCAAA,CACQ,iCAAA,CACR,6BAAA,CACQ,qBAAA,CAEV,KACE,8BAAA,CACQ,sBAAA,CAAA,CAGZ,gCACE,GACE,0CAAA,CACQ,kCAAA,CAEV,IACE,yCAAA,CACQ,iCAAA,CACR,6BAAA,CACQ,qBAAA,CAEV,KACE,8BAAA,CACQ,sBAAA,CAAA,CAGZ,YACE,iBAAA,CACA,UAAA,CACA,WAAA,CACA,cAAA,CACA,kBAAA,CACA,yCAAA,CAEF,0DACE,wBAAA,CAEA,oDAAA,CAEF,2EACE,wBAAA,CAEA,oDAAA,CACA,WAAA,CAEF,2EACE,wBAAA,CAEA,oDAAA,CAEF,0DACE,YAAA,CAEA,wCAAA,CACA,cAAA,CAEA,0CAAA,CAEF,+DACE,wBAAA,CAEA,oDAAA,CAEF,wDACE,wBAAA,CAEA,oDAAA,CAEF,wDACE,UAAA,CAEA,kDAAA,CAEF,kCACE,iBAAA,CAEF,sBACE,WAAA,CAEF,yCACE,wBAAA,CAEF,0DACE,wBAAA,CACA,WAAA,CAEF,0DACE,wBAAA,CAEF,yCACE,YAAA,CACA,cAAA,CAEF,yCAEE,WAAA,CACA,yDAAA,CAEF,kBACE,YAAA,CAEF,6BACE,iBAAA,CACA,OAAA,CACA,UAAA,CACA,UAAA,CACA,eAAA,CAEF,oCACE,iBAAA,CACA,KAAA,CACA,MAAA,CACA,aAAA,CACA,UAAA,CACA,WAAA,CACA,UAAA,CAEF,mBACE,iBAAA,CACA,UAAA,CACA,WAAA,CACA,iCAAA,CACQ,yBAAA,CACR,qBAAA,CAEF,iFACE,kCAAA,CACQ,0BAAA,CAGV,oCACE,YAAA,CACA,cAAA,CACA,gBAAA,CACA,iBAAA,CAEF,mHACE,iBAAA,CACA,aAAA,CAGF,2CACE,aAAA,CACA,SAAA,CACA,UAAA,CACA,UAAA,CAEF,0BACE,MAAA,CAEF,iCACE,aAAA,CACA,SAAA,CACA,UAAA,CACA,UAAA,CAEF,6CACE,SAAA,CAEF,6BACE,iBAAA,CACA,QAAA,CACA,MAAA,CACA,UAAA,CACA,WAAA,CACA,wBAAA,CACG,qBAAA,CACC,oBAAA,CACI,gBAAA,CACR,qBAAA,CAEF,mBACE,iBAAA,CACA,KAAA,CACA,MAAA,CACA,8BAAA,CACQ,sBAAA,CACR,gBAAA,CACA,qFAAA,CACA,6EAAA,CACA,8GAAA,CAEF,wBACE,UAAA,CACA,WAAA,CACA,iBAAA,CACA,SAAA,CACA,2GAAA,CACA,mGAAA,CACA,uIAAA,CAEF,iBACE,YAAA,CACA,iBAAA,CACA,KAAA,CACA,MAAA,CACA,kBAAA,CACA,sBAAA,CACA,UAAA,CACA,WAAA,CACA,eAAA,CACA,gBAAA,CACA,yDAAA,CACQ,iDAAA,CACR,4BAAA,CACA,SAAA,CACA,2CAAA,CACA,mCAAA,CACA,oEAAA,CAEF,8BACE,iCAAA,CACA,kCAAA,CACA,6BAAA,CAEA,0GAAA,CACA,iBAAA,CAEA,yDAAA,CACA,mBAAA,CAEA,4DAAA,CACA,eAAA,CAEA,wDAAA,CACA,4BAAA,CAEA,yEAAA,CACA,uBAAA,CAEA,4EAAA,CACQ,oEAAA,CACR,sBAAA,CAEA,kEAAA,CACA,+BAAA,CACQ,uBAAA,CAGV,uCACE,kCAAA,CACQ,0BAAA,CAGV,sCACE,sDAAA,CACQ,8CAAA,CAEV,2CACE,2CAAA,CACQ,mCAAA,CACR,WAAA,CAGF,2CACE,sBAAA,CAGF,sOAIE,sCAAA,CACA,8BAAA,CACA,0DAAA,CAGF,4DACE,sCAAA,CACQ,8BAAA,CAEV,0DACE,gEAAA,CACQ,wDAAA,CAEV,2DACE,sBAAA,CACQ,cAAA,CAEV,sFACE,kBAAA",sourcesContent:['/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/material-components/material-components-web/blob/master/LICENSE\n */\n@-webkit-keyframes mdc-slider-emphasize {\n  0% {\n    -webkit-animation-timing-function: ease-out;\n            animation-timing-function: ease-out;\n  }\n  50% {\n    -webkit-animation-timing-function: ease-in;\n            animation-timing-function: ease-in;\n    -webkit-transform: scale(0.85);\n            transform: scale(0.85);\n  }\n  100% {\n    -webkit-transform: scale(0.571);\n            transform: scale(0.571);\n  }\n}\n@keyframes mdc-slider-emphasize {\n  0% {\n    -webkit-animation-timing-function: ease-out;\n            animation-timing-function: ease-out;\n  }\n  50% {\n    -webkit-animation-timing-function: ease-in;\n            animation-timing-function: ease-in;\n    -webkit-transform: scale(0.85);\n            transform: scale(0.85);\n  }\n  100% {\n    -webkit-transform: scale(0.571);\n            transform: scale(0.571);\n  }\n}\n.mdc-slider {\n  position: relative;\n  width: 100%;\n  height: 48px;\n  cursor: pointer;\n  touch-action: pan-x;\n  -webkit-tap-highlight-color: rgba(0, 0, 0, 0);\n}\n.mdc-slider:not(.mdc-slider--disabled) .mdc-slider__track {\n  background-color: #018786;\n  /* @alternate */\n  background-color: var(--mdc-theme-secondary, #018786);\n}\n.mdc-slider:not(.mdc-slider--disabled) .mdc-slider__track-container::after {\n  background-color: #018786;\n  /* @alternate */\n  background-color: var(--mdc-theme-secondary, #018786);\n  opacity: 0.26;\n}\n.mdc-slider:not(.mdc-slider--disabled) .mdc-slider__track-marker-container {\n  background-color: #018786;\n  /* @alternate */\n  background-color: var(--mdc-theme-secondary, #018786);\n}\n.mdc-slider:not(.mdc-slider--disabled) .mdc-slider__thumb {\n  fill: #018786;\n  /* @alternate */\n  fill: var(--mdc-theme-secondary, #018786);\n  stroke: #018786;\n  /* @alternate */\n  stroke: var(--mdc-theme-secondary, #018786);\n}\n.mdc-slider:not(.mdc-slider--disabled) .mdc-slider__focus-ring {\n  background-color: #018786;\n  /* @alternate */\n  background-color: var(--mdc-theme-secondary, #018786);\n}\n.mdc-slider:not(.mdc-slider--disabled) .mdc-slider__pin {\n  background-color: #018786;\n  /* @alternate */\n  background-color: var(--mdc-theme-secondary, #018786);\n}\n.mdc-slider:not(.mdc-slider--disabled) .mdc-slider__pin {\n  color: white;\n  /* @alternate */\n  color: var(--mdc-theme-text-primary-on-dark, white);\n}\n.mdc-slider--disable-touch-action {\n  touch-action: none;\n}\n.mdc-slider--disabled {\n  cursor: auto;\n}\n.mdc-slider--disabled .mdc-slider__track {\n  background-color: #9a9a9a;\n}\n.mdc-slider--disabled .mdc-slider__track-container::after {\n  background-color: #9a9a9a;\n  opacity: 0.26;\n}\n.mdc-slider--disabled .mdc-slider__track-marker-container {\n  background-color: #9a9a9a;\n}\n.mdc-slider--disabled .mdc-slider__thumb {\n  fill: #9a9a9a;\n  stroke: #9a9a9a;\n}\n.mdc-slider--disabled .mdc-slider__thumb {\n  /* @alternate */\n  stroke: white;\n  stroke: var(--mdc-slider-bg-color-behind-component, white);\n}\n.mdc-slider:focus {\n  outline: none;\n}\n.mdc-slider__track-container {\n  position: absolute;\n  top: 50%;\n  width: 100%;\n  height: 2px;\n  overflow: hidden;\n}\n.mdc-slider__track-container::after {\n  position: absolute;\n  top: 0;\n  left: 0;\n  display: block;\n  width: 100%;\n  height: 100%;\n  content: "";\n}\n.mdc-slider__track {\n  position: absolute;\n  width: 100%;\n  height: 100%;\n  -webkit-transform-origin: left top;\n          transform-origin: left top;\n  will-change: transform;\n}\n.mdc-slider[dir=rtl] .mdc-slider__track, [dir=rtl] .mdc-slider .mdc-slider__track {\n  -webkit-transform-origin: right top;\n          transform-origin: right top;\n}\n\n.mdc-slider__track-marker-container {\n  display: flex;\n  margin-right: 0;\n  margin-left: -1px;\n  visibility: hidden;\n}\n.mdc-slider[dir=rtl] .mdc-slider__track-marker-container, [dir=rtl] .mdc-slider .mdc-slider__track-marker-container {\n  margin-right: -1px;\n  margin-left: 0;\n}\n\n.mdc-slider__track-marker-container::after {\n  display: block;\n  width: 2px;\n  height: 2px;\n  content: "";\n}\n.mdc-slider__track-marker {\n  flex: 1;\n}\n.mdc-slider__track-marker::after {\n  display: block;\n  width: 2px;\n  height: 2px;\n  content: "";\n}\n.mdc-slider__track-marker:first-child::after {\n  width: 3px;\n}\n.mdc-slider__thumb-container {\n  position: absolute;\n  top: 15px;\n  left: 0;\n  width: 21px;\n  height: 100%;\n  -webkit-user-select: none;\n     -moz-user-select: none;\n      -ms-user-select: none;\n          user-select: none;\n  will-change: transform;\n}\n.mdc-slider__thumb {\n  position: absolute;\n  top: 0;\n  left: 0;\n  -webkit-transform: scale(0.571);\n          transform: scale(0.571);\n  stroke-width: 3.5;\n  transition: fill 100ms ease-out, stroke 100ms ease-out, -webkit-transform 100ms ease-out;\n  transition: transform 100ms ease-out, fill 100ms ease-out, stroke 100ms ease-out;\n  transition: transform 100ms ease-out, fill 100ms ease-out, stroke 100ms ease-out, -webkit-transform 100ms ease-out;\n}\n.mdc-slider__focus-ring {\n  width: 21px;\n  height: 21px;\n  border-radius: 50%;\n  opacity: 0;\n  transition: opacity 266.67ms ease-out, background-color 266.67ms ease-out, -webkit-transform 266.67ms ease-out;\n  transition: transform 266.67ms ease-out, opacity 266.67ms ease-out, background-color 266.67ms ease-out;\n  transition: transform 266.67ms ease-out, opacity 266.67ms ease-out, background-color 266.67ms ease-out, -webkit-transform 266.67ms ease-out;\n}\n.mdc-slider__pin {\n  display: flex;\n  position: absolute;\n  top: 0;\n  left: 0;\n  align-items: center;\n  justify-content: center;\n  width: 26px;\n  height: 26px;\n  margin-top: -2px;\n  margin-left: -2px;\n  -webkit-transform: rotate(-45deg) scale(0) translate(0, 0);\n          transform: rotate(-45deg) scale(0) translate(0, 0);\n  border-radius: 50% 50% 50% 0%;\n  z-index: 1;\n  transition: -webkit-transform 100ms ease-out;\n  transition: transform 100ms ease-out;\n  transition: transform 100ms ease-out, -webkit-transform 100ms ease-out;\n}\n.mdc-slider__pin-value-marker {\n  -moz-osx-font-smoothing: grayscale;\n  -webkit-font-smoothing: antialiased;\n  font-family: Roboto, sans-serif;\n  /* @alternate */\n  font-family: var(--mdc-typography-body2-font-family, var(--mdc-typography-font-family, Roboto, sans-serif));\n  font-size: 0.875rem;\n  /* @alternate */\n  font-size: var(--mdc-typography-body2-font-size, 0.875rem);\n  line-height: 1.25rem;\n  /* @alternate */\n  line-height: var(--mdc-typography-body2-line-height, 1.25rem);\n  font-weight: 400;\n  /* @alternate */\n  font-weight: var(--mdc-typography-body2-font-weight, 400);\n  letter-spacing: 0.0178571429em;\n  /* @alternate */\n  letter-spacing: var(--mdc-typography-body2-letter-spacing, 0.0178571429em);\n  text-decoration: inherit;\n  /* @alternate */\n  -webkit-text-decoration: var(--mdc-typography-body2-text-decoration, inherit);\n          text-decoration: var(--mdc-typography-body2-text-decoration, inherit);\n  text-transform: inherit;\n  /* @alternate */\n  text-transform: var(--mdc-typography-body2-text-transform, inherit);\n  -webkit-transform: rotate(45deg);\n          transform: rotate(45deg);\n}\n\n.mdc-slider--active .mdc-slider__thumb {\n  -webkit-transform: scale3d(1, 1, 1);\n          transform: scale3d(1, 1, 1);\n}\n\n.mdc-slider--focus .mdc-slider__thumb {\n  -webkit-animation: mdc-slider-emphasize 266.67ms linear;\n          animation: mdc-slider-emphasize 266.67ms linear;\n}\n.mdc-slider--focus .mdc-slider__focus-ring {\n  -webkit-transform: scale3d(1.55, 1.55, 1.55);\n          transform: scale3d(1.55, 1.55, 1.55);\n  opacity: 0.25;\n}\n\n.mdc-slider--in-transit .mdc-slider__thumb {\n  transition-delay: 140ms;\n}\n\n.mdc-slider--in-transit .mdc-slider__thumb-container,\n.mdc-slider--in-transit .mdc-slider__track,\n.mdc-slider:focus:not(.mdc-slider--active) .mdc-slider__thumb-container,\n.mdc-slider:focus:not(.mdc-slider--active) .mdc-slider__track {\n  transition: -webkit-transform 80ms ease;\n  transition: transform 80ms ease;\n  transition: transform 80ms ease, -webkit-transform 80ms ease;\n}\n\n.mdc-slider--discrete.mdc-slider--active .mdc-slider__thumb {\n  -webkit-transform: scale(calc(12 / 21));\n          transform: scale(calc(12 / 21));\n}\n.mdc-slider--discrete.mdc-slider--active .mdc-slider__pin {\n  -webkit-transform: rotate(-45deg) scale(1) translate(19px, -20px);\n          transform: rotate(-45deg) scale(1) translate(19px, -20px);\n}\n.mdc-slider--discrete.mdc-slider--focus .mdc-slider__thumb {\n  -webkit-animation: none;\n          animation: none;\n}\n.mdc-slider--discrete.mdc-slider--display-markers .mdc-slider__track-marker-container {\n  visibility: visible;\n}\n\n/*# sourceMappingURL=mdc.slider.css.map*/'],sourceRoot:""}]),t.default=o},function(e,t){e.exports=require("crypto")},function(e,t,n){"use strict";n.r(t),n.d(t,"Headers",(function(){return C})),n.d(t,"Request",(function(){return M})),n.d(t,"Response",(function(){return T})),n.d(t,"FetchError",(function(){return a}));const r=Symbol("buffer"),o=Symbol("type");class i{constructor(){this[o]="";const e=arguments[0],t=arguments[1],n=[];if(e){const t=e,o=Number(t.length);for(let e=0;e<o;e++){const o=t[e];let a;a=o instanceof Buffer?o:ArrayBuffer.isView(o)?Buffer.from(o.buffer,o.byteOffset,o.byteLength):o instanceof ArrayBuffer?Buffer.from(o):o instanceof i?o[r]:Buffer.from("string"==typeof o?o:String(o)),n.push(a)}}this[r]=Buffer.concat(n);let a=t&&void 0!==t.type&&String(t.type).toLowerCase();a&&!/[^\u0020-\u007E]/.test(a)&&(this[o]=a)}get size(){return this[r].length}get type(){return this[o]}slice(){const e=this.size,t=arguments[0],n=arguments[1];let o,a;o=void 0===t?0:t<0?Math.max(e+t,0):Math.min(t,e),a=void 0===n?e:n<0?Math.max(e+n,0):Math.min(n,e);const s=Math.max(a-o,0),u=this[r].slice(o,o+s),c=new i([],{type:arguments[2]});return c[r]=u,c}}function a(e,t,n){Error.call(this,e),this.message=e,this.type=t,n&&(this.code=this.errno=n.code),Error.captureStackTrace(this,this.constructor)}Object.defineProperties(i.prototype,{size:{enumerable:!0},type:{enumerable:!0},slice:{enumerable:!0}}),Object.defineProperty(i.prototype,Symbol.toStringTag,{value:"Blob",writable:!1,enumerable:!1,configurable:!0}),a.prototype=Object.create(Error.prototype),a.prototype.constructor=a,a.prototype.name="FetchError";const s=n(2);const u=n(2).PassThrough;let c;try{c=n(!function(){var e=new Error("Cannot find module 'encoding'");throw e.code="MODULE_NOT_FOUND",e}()).convert}catch(e){}const l=Symbol("Body internals");function d(e){var t=this,n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},r=n.size;let o=void 0===r?0:r;var u=n.timeout;let c=void 0===u?0:u;null==e?e=null:"string"==typeof e||p(e)||e instanceof i||Buffer.isBuffer(e)||"[object ArrayBuffer]"===Object.prototype.toString.call(e)||e instanceof s||(e=String(e)),this[l]={body:e,disturbed:!1,error:null},this.size=o,this.timeout=c,e instanceof s&&e.on("error",(function(e){t[l].error=new a(`Invalid response body while trying to fetch ${t.url}: ${e.message}`,"system",e)}))}function h(){var e=this;if(this[l].disturbed)return d.Promise.reject(new TypeError("body used already for: "+this.url));if(this[l].disturbed=!0,this[l].error)return d.Promise.reject(this[l].error);if(null===this.body)return d.Promise.resolve(Buffer.alloc(0));if("string"==typeof this.body)return d.Promise.resolve(Buffer.from(this.body));if(this.body instanceof i)return d.Promise.resolve(this.body[r]);if(Buffer.isBuffer(this.body))return d.Promise.resolve(this.body);if("[object ArrayBuffer]"===Object.prototype.toString.call(this.body))return d.Promise.resolve(Buffer.from(this.body));if(!(this.body instanceof s))return d.Promise.resolve(Buffer.alloc(0));let t=[],n=0,o=!1;return new d.Promise((function(r,i){let s;e.timeout&&(s=setTimeout((function(){o=!0,i(new a(`Response timeout while trying to fetch ${e.url} (over ${e.timeout}ms)`,"body-timeout"))}),e.timeout)),e.body.on("error",(function(t){i(new a(`Invalid response body while trying to fetch ${e.url}: ${t.message}`,"system",t))})),e.body.on("data",(function(r){if(!o&&null!==r){if(e.size&&n+r.length>e.size)return o=!0,void i(new a(`content size at ${e.url} over limit: ${e.size}`,"max-size"));n+=r.length,t.push(r)}})),e.body.on("end",(function(){if(!o){clearTimeout(s);try{r(Buffer.concat(t))}catch(t){i(new a(`Could not create Buffer from response body for ${e.url}: ${t.message}`,"system",t))}}}))}))}function p(e){return"object"==typeof e&&"function"==typeof e.append&&"function"==typeof e.delete&&"function"==typeof e.get&&"function"==typeof e.getAll&&"function"==typeof e.has&&"function"==typeof e.set&&("URLSearchParams"===e.constructor.name||"[object URLSearchParams]"===Object.prototype.toString.call(e)||"function"==typeof e.sort)}function f(e){let t,n,r=e.body;if(e.bodyUsed)throw new Error("cannot clone body after it is used");return r instanceof s&&"function"!=typeof r.getBoundary&&(t=new u,n=new u,r.pipe(t),r.pipe(n),e[l].body=t,r=n),r}function m(e){const t=e.body;return null===t?0:"string"==typeof t?Buffer.byteLength(t):p(t)?Buffer.byteLength(String(t)):t instanceof i?t.size:Buffer.isBuffer(t)?t.length:"[object ArrayBuffer]"===Object.prototype.toString.call(t)?t.byteLength:t&&"function"==typeof t.getLengthSync&&(t._lengthRetrievers&&0==t._lengthRetrievers.length||t.hasKnownLength&&t.hasKnownLength())?t.getLengthSync():null}d.prototype={get body(){return this[l].body},get bodyUsed(){return this[l].disturbed},arrayBuffer(){return h.call(this).then((function(e){return e.buffer.slice(e.byteOffset,e.byteOffset+e.byteLength)}))},blob(){let e=this.headers&&this.headers.get("content-type")||"";return h.call(this).then((function(t){return Object.assign(new i([],{type:e.toLowerCase()}),{[r]:t})}))},json(){var e=this;return h.call(this).then((function(t){try{return JSON.parse(t.toString())}catch(t){return d.Promise.reject(new a(`invalid json response body at ${e.url} reason: ${t.message}`,"invalid-json"))}}))},text(){return h.call(this).then((function(e){return e.toString()}))},buffer(){return h.call(this)},textConverted(){var e=this;return h.call(this).then((function(t){return function(e,t){if("function"!=typeof c)throw new Error("The package `encoding` must be installed to use the textConverted() function");const n=t.get("content-type");let r,o,i="utf-8";n&&(r=/charset=([^;]*)/i.exec(n));o=e.slice(0,1024).toString(),!r&&o&&(r=/<meta.+?charset=(['"])(.+?)\1/i.exec(o));!r&&o&&(r=/<meta[\s]+?http-equiv=(['"])content-type\1[\s]+?content=(['"])(.+?)\2/i.exec(o),r&&(r=/charset=(.*)/i.exec(r.pop())));!r&&o&&(r=/<\?xml.+?encoding=(['"])(.+?)\1/i.exec(o));r&&(i=r.pop(),"gb2312"!==i&&"gbk"!==i||(i="gb18030"));return c(e,"UTF-8",i).toString()}(t,e.headers)}))}},Object.defineProperties(d.prototype,{body:{enumerable:!0},bodyUsed:{enumerable:!0},arrayBuffer:{enumerable:!0},blob:{enumerable:!0},json:{enumerable:!0},text:{enumerable:!0}}),d.mixIn=function(e){for(const t of Object.getOwnPropertyNames(d.prototype))if(!(t in e)){const n=Object.getOwnPropertyDescriptor(d.prototype,t);Object.defineProperty(e,t,n)}},d.Promise=global.Promise;const v=/[^\^_`a-zA-Z\-0-9!#$%&'*+.|~]/,g=/[^\t\x20-\x7e\x80-\xff]/;function b(e){if(e=""+e,v.test(e))throw new TypeError(e+" is not a legal HTTP header name")}function A(e){if(e=""+e,g.test(e))throw new TypeError(e+" is not a legal HTTP header value")}function y(e,t){t=t.toLowerCase();for(const n in e)if(n.toLowerCase()===t)return n}const x=Symbol("map");class C{constructor(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:void 0;if(this[x]=Object.create(null),e instanceof C){const t=e.raw(),n=Object.keys(t);for(const e of n)for(const n of t[e])this.append(e,n)}else if(null==e);else{if("object"!=typeof e)throw new TypeError("Provided initializer must be an object");{const t=e[Symbol.iterator];if(null!=t){if("function"!=typeof t)throw new TypeError("Header pairs must be iterable");const n=[];for(const t of e){if("object"!=typeof t||"function"!=typeof t[Symbol.iterator])throw new TypeError("Each header pair must be iterable");n.push(Array.from(t))}for(const e of n){if(2!==e.length)throw new TypeError("Each header pair must be a name/value tuple");this.append(e[0],e[1])}}else for(const t of Object.keys(e)){const n=e[t];this.append(t,n)}}}}get(e){b(e=""+e);const t=y(this[x],e);return void 0===t?null:this[x][t].join(", ")}forEach(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:void 0,n=w(this),r=0;for(;r<n.length;){var o=n[r];const i=o[0],a=o[1];e.call(t,a,i,this),n=w(this),r++}}set(e,t){t=""+t,b(e=""+e),A(t);const n=y(this[x],e);this[x][void 0!==n?n:e]=[t]}append(e,t){t=""+t,b(e=""+e),A(t);const n=y(this[x],e);void 0!==n?this[x][n].push(t):this[x][e]=[t]}has(e){return b(e=""+e),void 0!==y(this[x],e)}delete(e){b(e=""+e);const t=y(this[x],e);void 0!==t&&delete this[x][t]}raw(){return this[x]}keys(){return _(this,"key")}values(){return _(this,"value")}[Symbol.iterator](){return _(this,"key+value")}}function w(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"key+value";const n=Object.keys(e[x]).sort();return n.map("key"===t?function(e){return e.toLowerCase()}:"value"===t?function(t){return e[x][t].join(", ")}:function(t){return[t.toLowerCase(),e[x][t].join(", ")]})}C.prototype.entries=C.prototype[Symbol.iterator],Object.defineProperty(C.prototype,Symbol.toStringTag,{value:"Headers",writable:!1,enumerable:!1,configurable:!0}),Object.defineProperties(C.prototype,{get:{enumerable:!0},forEach:{enumerable:!0},set:{enumerable:!0},append:{enumerable:!0},has:{enumerable:!0},delete:{enumerable:!0},keys:{enumerable:!0},values:{enumerable:!0},entries:{enumerable:!0}});const k=Symbol("internal");function _(e,t){const n=Object.create(E);return n[k]={target:e,kind:t,index:0},n}const E=Object.setPrototypeOf({next(){if(!this||Object.getPrototypeOf(this)!==E)throw new TypeError("Value of `this` is not a HeadersIterator");var e=this[k];const t=e.target,n=e.kind,r=e.index,o=w(t,n);return r>=o.length?{value:void 0,done:!0}:(this[k].index=r+1,{value:o[r],done:!1})}},Object.getPrototypeOf(Object.getPrototypeOf([][Symbol.iterator]())));function I(e){const t=Object.assign({__proto__:null},e[x]),n=y(e[x],"Host");return void 0!==n&&(t[n]=t[n][0]),t}Object.defineProperty(E,Symbol.toStringTag,{value:"HeadersIterator",writable:!1,enumerable:!1,configurable:!0});const R=n(3).STATUS_CODES,S=Symbol("Response internals");class T{constructor(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:null,t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};d.call(this,e,t);const n=t.status||200;this[S]={url:t.url,status:n,statusText:t.statusText||R[n],headers:new C(t.headers)}}get url(){return this[S].url}get status(){return this[S].status}get ok(){return this[S].status>=200&&this[S].status<300}get statusText(){return this[S].statusText}get headers(){return this[S].headers}clone(){return new T(f(this),{url:this.url,status:this.status,statusText:this.statusText,headers:this.headers,ok:this.ok})}}d.mixIn(T.prototype),Object.defineProperties(T.prototype,{url:{enumerable:!0},status:{enumerable:!0},ok:{enumerable:!0},statusText:{enumerable:!0},headers:{enumerable:!0},clone:{enumerable:!0}}),Object.defineProperty(T.prototype,Symbol.toStringTag,{value:"Response",writable:!1,enumerable:!1,configurable:!0});var D=n(4);const F=D.format,N=D.parse,B=Symbol("Request internals");function O(e){return"object"==typeof e&&"object"==typeof e[B]}class M{constructor(e){let t,n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};O(e)?t=N(e.url):(t=e&&e.href?N(e.href):N(""+e),e={});let r=n.method||e.method||"GET";if(r=r.toUpperCase(),(null!=n.body||O(e)&&null!==e.body)&&("GET"===r||"HEAD"===r))throw new TypeError("Request with GET/HEAD method cannot have body");let o=null!=n.body?n.body:O(e)&&null!==e.body?f(e):null;d.call(this,o,{timeout:n.timeout||e.timeout||0,size:n.size||e.size||0});const a=new C(n.headers||e.headers||{});if(null!=n.body){const e=function(e){const t=e.body;return null===t?null:"string"==typeof t?"text/plain;charset=UTF-8":p(t)?"application/x-www-form-urlencoded;charset=UTF-8":t instanceof i?t.type||null:Buffer.isBuffer(t)||"[object ArrayBuffer]"===Object.prototype.toString.call(t)?null:"function"==typeof t.getBoundary?"multipart/form-data;boundary="+t.getBoundary():null}(this);null===e||a.has("Content-Type")||a.append("Content-Type",e)}this[B]={method:r,redirect:n.redirect||e.redirect||"follow",headers:a,parsedURL:t},this.follow=void 0!==n.follow?n.follow:void 0!==e.follow?e.follow:20,this.compress=void 0!==n.compress?n.compress:void 0===e.compress||e.compress,this.counter=n.counter||e.counter||0,this.agent=n.agent||e.agent}get method(){return this[B].method}get url(){return F(this[B].parsedURL)}get headers(){return this[B].headers}get redirect(){return this[B].redirect}clone(){return new M(this)}}d.mixIn(M.prototype),Object.defineProperty(M.prototype,Symbol.toStringTag,{value:"Request",writable:!1,enumerable:!1,configurable:!0}),Object.defineProperties(M.prototype,{method:{enumerable:!0},url:{enumerable:!0},headers:{enumerable:!0},redirect:{enumerable:!0},clone:{enumerable:!0}});const P=n(3),L=n(15);const z=n(2).PassThrough;const W=n(4).resolve,U=n(16);function V(e,t){if(!V.Promise)throw new Error("native promise missing, set fetch.Promise to your favorite alternative");return d.Promise=V.Promise,new V.Promise((function(n,o){const s=new M(e,t),u=function(e){const t=e[B].parsedURL,n=new C(e[B].headers);if(n.has("Accept")||n.set("Accept","*/*"),!t.protocol||!t.hostname)throw new TypeError("Only absolute URLs are supported");if(!/^https?:$/.test(t.protocol))throw new TypeError("Only HTTP(S) protocols are supported");let r=null;if(null==e.body&&/^(POST|PUT)$/i.test(e.method)&&(r="0"),null!=e.body){const t=m(e);"number"==typeof t&&(r=String(t))}return r&&n.set("Content-Length",r),n.has("User-Agent")||n.set("User-Agent","node-fetch/1.0 (+https://github.com/bitinn/node-fetch)"),e.compress&&n.set("Accept-Encoding","gzip,deflate"),n.has("Connection")||e.agent||n.set("Connection","close"),Object.assign({},t,{method:e.method,headers:I(n),agent:e.agent})}(s),c=(0,("https:"===u.protocol?L:P).request)(u);let l;function d(){c.abort(),clearTimeout(l)}s.timeout&&c.once("socket",(function(e){l=setTimeout((function(){o(new a("network timeout at: "+s.url,"request-timeout")),d()}),s.timeout)})),c.on("error",(function(e){o(new a(`request to ${s.url} failed, reason: ${e.message}`,"system",e)),d()})),c.on("response",(function(e){clearTimeout(l);const t=function(e){const t=new C;for(const n of Object.keys(e))if(!v.test(n))if(Array.isArray(e[n]))for(const r of e[n])g.test(r)||(void 0===t[x][n]?t[x][n]=[r]:t[x][n].push(r));else g.test(e[n])||(t[x][n]=[e[n]]);return t}(e.headers);if(V.isRedirect(e.statusCode)){const r=t.get("Location"),i=null===r?null:W(s.url,r);switch(s.redirect){case"error":return o(new a("redirect mode is set to error: "+s.url,"no-redirect")),void d();case"manual":null!==i&&t.set("Location",i);break;case"follow":if(null===i)break;if(s.counter>=s.follow)return o(new a("maximum redirect reached at: "+s.url,"max-redirect")),void d();const r={headers:new C(s.headers),follow:s.follow,counter:s.counter+1,agent:s.agent,compress:s.compress,method:s.method,body:s.body};return 303!==e.statusCode&&s.body&&null===m(s)?(o(new a("Cannot follow redirect with body being a readable stream","unsupported-redirect")),void d()):(303!==e.statusCode&&(301!==e.statusCode&&302!==e.statusCode||"POST"!==s.method)||(r.method="GET",r.body=void 0,r.headers.delete("content-length")),n(V(new M(i,r))),void d())}}let r=e.pipe(new z);const i={url:s.url,status:e.statusCode,statusText:e.statusMessage,headers:t,size:s.size,timeout:s.timeout},u=t.get("Content-Encoding");if(!s.compress||"HEAD"===s.method||null===u||204===e.statusCode||304===e.statusCode)return void n(new T(r,i));const c={flush:U.Z_SYNC_FLUSH,finishFlush:U.Z_SYNC_FLUSH};if("gzip"==u||"x-gzip"==u)return r=r.pipe(U.createGunzip(c)),void n(new T(r,i));if("deflate"!=u&&"x-deflate"!=u)n(new T(r,i));else{e.pipe(new z).once("data",(function(e){r=8==(15&e[0])?r.pipe(U.createInflate()):r.pipe(U.createInflateRaw()),n(new T(r,i))}))}})),function(e,t){const n=t.body;null===n?e.end():"string"==typeof n?(e.write(n),e.end()):p(n)?(e.write(Buffer.from(String(n))),e.end()):n instanceof i?(e.write(n[r]),e.end()):Buffer.isBuffer(n)?(e.write(n),e.end()):"[object ArrayBuffer]"===Object.prototype.toString.call(n)?(e.write(Buffer.from(n)),e.end()):n.pipe(e)}(c,s)}))}V.isRedirect=function(e){return 301===e||302===e||303===e||307===e||308===e},V.default=V,V.Promise=global.Promise,t.default=V},function(e,t){e.exports=require("https")},function(e,t){e.exports=require("zlib")},function(e,t){e.exports=require("util")},function(e,t){e.exports=require("fs")},function(e,t,n){"use strict";n.r(t);
/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */
var r=function(e,t){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(e,t)};function o(e,t){function n(){this.constructor=e}r(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}var i=function(){return(i=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e}).apply(this,arguments)};function a(e,t,n,r){return new(n||(n=Promise))((function(o,i){function a(e){try{u(r.next(e))}catch(e){i(e)}}function s(e){try{u(r.throw(e))}catch(e){i(e)}}function u(e){var t;e.done?o(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(a,s)}u((r=r.apply(e,t||[])).next())}))}function s(e,t){var n,r,o,i,a={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function s(i){return function(s){return function(i){if(n)throw new TypeError("Generator is already executing.");for(;a;)try{if(n=1,r&&(o=2&i[0]?r.return:i[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,i[1])).done)return o;switch(r=0,o&&(i=[2&i[0],o.value]),i[0]){case 0:case 1:o=i;break;case 4:return a.label++,{value:i[1],done:!1};case 5:a.label++,r=i[1],i=[0];continue;case 7:i=a.ops.pop(),a.trys.pop();continue;default:if(!(o=a.trys,(o=o.length>0&&o[o.length-1])||6!==i[0]&&2!==i[0])){a=0;continue}if(3===i[0]&&(!o||i[1]>o[0]&&i[1]<o[3])){a.label=i[1];break}if(6===i[0]&&a.label<o[1]){a.label=o[1],o=i;break}if(o&&a.label<o[2]){a.label=o[2],a.ops.push(i);break}o[2]&&a.ops.pop(),a.trys.pop();continue}i=t.call(e,a)}catch(e){i=[6,e],r=0}finally{n=o=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,s])}}}function u(e,t){var n="function"==typeof Symbol&&e[Symbol.iterator];if(!n)return e;var r,o,i=n.call(e),a=[];try{for(;(void 0===t||t-- >0)&&!(r=i.next()).done;)a.push(r.value)}catch(e){o={error:e}}finally{try{r&&!r.done&&(n=i.return)&&n.call(i)}finally{if(o)throw o.error}}return a}function c(){for(var e=[],t=0;t<arguments.length;t++)e=e.concat(u(arguments[t]));return e}function l(){for(var e=0,t=0,n=arguments.length;t<n;t++)e+=arguments[t].length;var r=Array(e),o=0;for(t=0;t<n;t++)for(var i=arguments[t],a=0,s=i.length;a<s;a++,o++)r[o]=i[a];return r}
/**
 * @license
 * Copyright 2016 Google Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */
var d=function(){function e(e){void 0===e&&(e={}),this.adapter=e}return Object.defineProperty(e,"cssClasses",{get:function(){return{}},enumerable:!0,configurable:!0}),Object.defineProperty(e,"strings",{get:function(){return{}},enumerable:!0,configurable:!0}),Object.defineProperty(e,"numbers",{get:function(){return{}},enumerable:!0,configurable:!0}),Object.defineProperty(e,"defaultAdapter",{get:function(){return{}},enumerable:!0,configurable:!0}),e.prototype.init=function(){},e.prototype.destroy=function(){},e}(),h=function(){function e(e,t){for(var n=[],r=2;r<arguments.length;r++)n[r-2]=arguments[r];this.root=e,this.initialize.apply(this,c(n)),this.foundation=void 0===t?this.getDefaultFoundation():t,this.foundation.init(),this.initialSyncWithDOM()}return e.attachTo=function(t){return new e(t,new d({}))},e.prototype.initialize=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t]},e.prototype.getDefaultFoundation=function(){throw new Error("Subclasses must override getDefaultFoundation to return a properly configured foundation class")},e.prototype.initialSyncWithDOM=function(){},e.prototype.destroy=function(){this.foundation.destroy()},e.prototype.listen=function(e,t,n){this.root.addEventListener(e,t,n)},e.prototype.unlisten=function(e,t,n){this.root.removeEventListener(e,t,n)},e.prototype.emit=function(e,t,n){var r;void 0===n&&(n=!1),"function"==typeof CustomEvent?r=new CustomEvent(e,{bubbles:n,detail:t}):(r=document.createEvent("CustomEvent")).initCustomEvent(e,n,!1,t),this.root.dispatchEvent(r)},e}();
/**
 * @license
 * Copyright 2019 Google Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */
function p(e){return void 0===e&&(e=window),!!function(e){void 0===e&&(e=window);var t=!1;try{var n={get passive(){return t=!0,!1}},r=function(){};e.document.addEventListener("test",r,n),e.document.removeEventListener("test",r,n)}catch(e){t=!1}return t}
/**
 * @license
 * Copyright 2017 Google Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */(e)&&{passive:!0}}var f={ACTIVE:"mdc-slider--active",DISABLED:"mdc-slider--disabled",DISCRETE:"mdc-slider--discrete",FOCUS:"mdc-slider--focus",HAS_TRACK_MARKER:"mdc-slider--display-markers",IN_TRANSIT:"mdc-slider--in-transit",IS_DISCRETE:"mdc-slider--discrete",DISABLE_TOUCH_ACTION:"mdc-slider--disable-touch-action"},m={ARIA_DISABLED:"aria-disabled",ARIA_VALUEMAX:"aria-valuemax",ARIA_VALUEMIN:"aria-valuemin",ARIA_VALUENOW:"aria-valuenow",CHANGE_EVENT:"MDCSlider:change",INPUT_EVENT:"MDCSlider:input",PIN_VALUE_MARKER_SELECTOR:".mdc-slider__pin-value-marker",STEP_DATA_ATTR:"data-step",THUMB_CONTAINER_SELECTOR:".mdc-slider__thumb-container",TRACK_MARKER_CONTAINER_SELECTOR:".mdc-slider__track-marker-container",TRACK_SELECTOR:".mdc-slider__track"},v={PAGE_FACTOR:4},g={animation:{prefixed:"-webkit-animation",standard:"animation"},transform:{prefixed:"-webkit-transform",standard:"transform"},transition:{prefixed:"-webkit-transition",standard:"transition"}},b={animationend:{cssProperty:"animation",prefixed:"webkitAnimationEnd",standard:"animationend"},animationiteration:{cssProperty:"animation",prefixed:"webkitAnimationIteration",standard:"animationiteration"},animationstart:{cssProperty:"animation",prefixed:"webkitAnimationStart",standard:"animationstart"},transitionend:{cssProperty:"transition",prefixed:"webkitTransitionEnd",standard:"transitionend"}};function A(e){return Boolean(e.document)&&"function"==typeof e.document.createElement}
/**
 * @license
 * Copyright 2017 Google Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */
var y="undefined"!=typeof window,x=y&&!!window.PointerEvent,C=x?["pointerdown"]:["mousedown","touchstart"],w=x?["pointerup"]:["mouseup","touchend"],k={mousedown:"mousemove",pointerdown:"pointermove",touchstart:"touchmove"},_="ArrowDown",E="ArrowLeft",I="ArrowRight",R="ArrowUp",S="End",T="Home",D="PageDown",F="PageUp",N=function(e){function t(n){var r=e.call(this,i(i({},t.defaultAdapter),n))||this;return r.savedTabIndex_=NaN,r.active_=!1,r.inTransit_=!1,r.isDiscrete_=!1,r.hasTrackMarker_=!1,r.handlingThumbTargetEvt_=!1,r.min_=0,r.max_=100,r.step_=0,r.value_=0,r.disabled_=!1,r.preventFocusState_=!1,r.thumbContainerPointerHandler_=function(){return r.handlingThumbTargetEvt_=!0},r.interactionStartHandler_=function(e){return r.handleDown_(e)},r.keydownHandler_=function(e){return r.handleKeydown_(e)},r.focusHandler_=function(){return r.handleFocus_()},r.blurHandler_=function(){return r.handleBlur_()},r.resizeHandler_=function(){return r.layout()},r}return o(t,e),Object.defineProperty(t,"cssClasses",{get:function(){return f},enumerable:!0,configurable:!0}),Object.defineProperty(t,"strings",{get:function(){return m},enumerable:!0,configurable:!0}),Object.defineProperty(t,"numbers",{get:function(){return v},enumerable:!0,configurable:!0}),Object.defineProperty(t,"defaultAdapter",{get:function(){return{hasClass:function(){return!1},addClass:function(){},removeClass:function(){},getAttribute:function(){return null},setAttribute:function(){},removeAttribute:function(){},computeBoundingRect:function(){return{top:0,right:0,bottom:0,left:0,width:0,height:0}},getTabIndex:function(){return 0},registerInteractionHandler:function(){},deregisterInteractionHandler:function(){},registerThumbContainerInteractionHandler:function(){},deregisterThumbContainerInteractionHandler:function(){},registerBodyInteractionHandler:function(){},deregisterBodyInteractionHandler:function(){},registerResizeHandler:function(){},deregisterResizeHandler:function(){},notifyInput:function(){},notifyChange:function(){},setThumbContainerStyleProperty:function(){},setTrackStyleProperty:function(){},setMarkerValue:function(){},setTrackMarkers:function(){},isRTL:function(){return!1}}},enumerable:!0,configurable:!0}),t.prototype.init=function(){var e=this;this.isDiscrete_=this.adapter.hasClass(f.IS_DISCRETE),this.hasTrackMarker_=this.adapter.hasClass(f.HAS_TRACK_MARKER),C.forEach((function(t){e.adapter.registerInteractionHandler(t,e.interactionStartHandler_),e.adapter.registerThumbContainerInteractionHandler(t,e.thumbContainerPointerHandler_)})),x&&this.adapter.addClass(f.DISABLE_TOUCH_ACTION),this.adapter.registerInteractionHandler("keydown",this.keydownHandler_),this.adapter.registerInteractionHandler("focus",this.focusHandler_),this.adapter.registerInteractionHandler("blur",this.blurHandler_),this.adapter.registerResizeHandler(this.resizeHandler_),this.layout(),this.isDiscrete_&&0===this.getStep()&&(this.step_=1)},t.prototype.destroy=function(){var e=this;C.forEach((function(t){e.adapter.deregisterInteractionHandler(t,e.interactionStartHandler_),e.adapter.deregisterThumbContainerInteractionHandler(t,e.thumbContainerPointerHandler_)})),this.adapter.deregisterInteractionHandler("keydown",this.keydownHandler_),this.adapter.deregisterInteractionHandler("focus",this.focusHandler_),this.adapter.deregisterInteractionHandler("blur",this.blurHandler_),this.adapter.deregisterResizeHandler(this.resizeHandler_)},t.prototype.setupTrackMarker=function(){this.isDiscrete_&&this.hasTrackMarker_&&0!==this.getStep()&&this.adapter.setTrackMarkers(this.getStep(),this.getMax(),this.getMin())},t.prototype.layout=function(){this.rect_=this.adapter.computeBoundingRect(),this.updateUIForCurrentValue_()},t.prototype.getValue=function(){return this.value_},t.prototype.setValue=function(e){this.setValue_(e,!1)},t.prototype.getMax=function(){return this.max_},t.prototype.setMax=function(e){if(e<this.min_)throw new Error("Cannot set max to be less than the slider's minimum value");this.max_=e,this.setValue_(this.value_,!1,!0),this.adapter.setAttribute(m.ARIA_VALUEMAX,String(this.max_)),this.setupTrackMarker()},t.prototype.getMin=function(){return this.min_},t.prototype.setMin=function(e){if(e>this.max_)throw new Error("Cannot set min to be greater than the slider's maximum value");this.min_=e,this.setValue_(this.value_,!1,!0),this.adapter.setAttribute(m.ARIA_VALUEMIN,String(this.min_)),this.setupTrackMarker()},t.prototype.getStep=function(){return this.step_},t.prototype.setStep=function(e){if(e<0)throw new Error("Step cannot be set to a negative number");this.isDiscrete_&&("number"!=typeof e||e<1)&&(e=1),this.step_=e,this.setValue_(this.value_,!1,!0),this.setupTrackMarker()},t.prototype.isDisabled=function(){return this.disabled_},t.prototype.setDisabled=function(e){this.disabled_=e,this.toggleClass_(f.DISABLED,this.disabled_),this.disabled_?(this.savedTabIndex_=this.adapter.getTabIndex(),this.adapter.setAttribute(m.ARIA_DISABLED,"true"),this.adapter.removeAttribute("tabindex")):(this.adapter.removeAttribute(m.ARIA_DISABLED),isNaN(this.savedTabIndex_)||this.adapter.setAttribute("tabindex",String(this.savedTabIndex_)))},t.prototype.handleDown_=function(e){var t=this;if(!this.disabled_){this.preventFocusState_=!0,this.setInTransit_(!this.handlingThumbTargetEvt_),this.handlingThumbTargetEvt_=!1,this.setActive_(!0);var n=function(e){t.handleMove_(e)},r=k[e.type],o=function(){t.handleUp_(),t.adapter.deregisterBodyInteractionHandler(r,n),w.forEach((function(e){return t.adapter.deregisterBodyInteractionHandler(e,o)}))};this.adapter.registerBodyInteractionHandler(r,n),w.forEach((function(e){return t.adapter.registerBodyInteractionHandler(e,o)})),this.setValueFromEvt_(e)}},t.prototype.handleMove_=function(e){e.preventDefault(),this.setValueFromEvt_(e)},t.prototype.handleUp_=function(){this.setActive_(!1),this.adapter.notifyChange()},t.prototype.getClientX_=function(e){return e.targetTouches&&e.targetTouches.length>0?e.targetTouches[0].clientX:e.clientX},t.prototype.setValueFromEvt_=function(e){var t=this.getClientX_(e),n=this.computeValueFromClientX_(t);this.setValue_(n,!0)},t.prototype.computeValueFromClientX_=function(e){var t=this.max_,n=this.min_,r=(e-this.rect_.left)/this.rect_.width;return this.adapter.isRTL()&&(r=1-r),n+r*(t-n)},t.prototype.handleKeydown_=function(e){var t=this.getKeyId_(e),n=this.getValueForKeyId_(t);isNaN(n)||(e.preventDefault(),this.adapter.addClass(f.FOCUS),this.setValue_(n,!0),this.adapter.notifyChange())},t.prototype.getKeyId_=function(e){return e.key===E||37===e.keyCode?E:e.key===I||39===e.keyCode?I:e.key===R||38===e.keyCode?R:e.key===_||40===e.keyCode?_:e.key===T||36===e.keyCode?T:e.key===S||35===e.keyCode?S:e.key===F||33===e.keyCode?F:e.key===D||34===e.keyCode?D:""},t.prototype.getValueForKeyId_=function(e){var t=this.max_,n=this.min_,r=this.step_||(t-n)/100;switch(this.adapter.isRTL()&&(e===E||e===I)&&(r=-r),e){case E:case _:return this.value_-r;case I:case R:return this.value_+r;case T:return this.min_;case S:return this.max_;case F:return this.value_+r*v.PAGE_FACTOR;case D:return this.value_-r*v.PAGE_FACTOR;default:return NaN}},t.prototype.handleFocus_=function(){this.preventFocusState_||this.adapter.addClass(f.FOCUS)},t.prototype.handleBlur_=function(){this.preventFocusState_=!1,this.adapter.removeClass(f.FOCUS)},t.prototype.setValue_=function(e,t,n){if(void 0===n&&(n=!1),e!==this.value_||n){var r=this.min_,o=this.max_,i=e===r||e===o;this.step_&&!i&&(e=this.quantize_(e)),e<r?e=r:e>o&&(e=o),e=e||0,this.value_=e,this.adapter.setAttribute(m.ARIA_VALUENOW,String(this.value_)),this.updateUIForCurrentValue_(),t&&(this.adapter.notifyInput(),this.isDiscrete_&&this.adapter.setMarkerValue(e))}},t.prototype.quantize_=function(e){return Math.round(e/this.step_)*this.step_},t.prototype.updateUIForCurrentValue_=function(){var e=this,t=this.max_,n=this.min_,r=(this.value_-n)/(t-n),o=r*this.rect_.width;this.adapter.isRTL()&&(o=this.rect_.width-o);var i=y?function(e,t){if(A(e)&&t in g){var n=e.document.createElement("div"),r=g[t],o=r.standard,i=r.prefixed;return o in n.style?o:i}return t}(window,"transform"):"transform",a=y?function(e,t){if(A(e)&&t in b){var n=e.document.createElement("div"),r=b[t],o=r.standard,i=r.prefixed;return r.cssProperty in n.style?o:i}return t}(window,"transitionend"):"transitionend";if(this.inTransit_){var s=function(){e.setInTransit_(!1),e.adapter.deregisterThumbContainerInteractionHandler(a,s)};this.adapter.registerThumbContainerInteractionHandler(a,s)}requestAnimationFrame((function(){e.adapter.setThumbContainerStyleProperty(i,"translateX("+o+"px) translateX(-50%)"),e.adapter.setTrackStyleProperty(i,"scaleX("+r+")")}))},t.prototype.setActive_=function(e){this.active_=e,this.toggleClass_(f.ACTIVE,this.active_)},t.prototype.setInTransit_=function(e){this.inTransit_=e,this.toggleClass_(f.IN_TRANSIT,this.inTransit_)},t.prototype.toggleClass_=function(e,t){t?this.adapter.addClass(e):this.adapter.removeClass(e)},t}(d),B=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return o(t,e),t.attachTo=function(e){return new t(e)},Object.defineProperty(t.prototype,"value",{get:function(){return this.foundation.getValue()},set:function(e){this.foundation.setValue(e)},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"min",{get:function(){return this.foundation.getMin()},set:function(e){this.foundation.setMin(e)},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"max",{get:function(){return this.foundation.getMax()},set:function(e){this.foundation.setMax(e)},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"step",{get:function(){return this.foundation.getStep()},set:function(e){this.foundation.setStep(e)},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"disabled",{get:function(){return this.foundation.isDisabled()},set:function(e){this.foundation.setDisabled(e)},enumerable:!0,configurable:!0}),t.prototype.initialize=function(){this.thumbContainer_=this.root.querySelector(m.THUMB_CONTAINER_SELECTOR),this.track_=this.root.querySelector(m.TRACK_SELECTOR),this.pinValueMarker_=this.root.querySelector(m.PIN_VALUE_MARKER_SELECTOR),this.trackMarkerContainer_=this.root.querySelector(m.TRACK_MARKER_CONTAINER_SELECTOR)},t.prototype.getDefaultFoundation=function(){var e=this;return new N({hasClass:function(t){return e.root.classList.contains(t)},addClass:function(t){return e.root.classList.add(t)},removeClass:function(t){return e.root.classList.remove(t)},getAttribute:function(t){return e.root.getAttribute(t)},setAttribute:function(t,n){return e.root.setAttribute(t,n)},removeAttribute:function(t){return e.root.removeAttribute(t)},computeBoundingRect:function(){return e.root.getBoundingClientRect()},getTabIndex:function(){return e.root.tabIndex},registerInteractionHandler:function(t,n){return e.listen(t,n,p())},deregisterInteractionHandler:function(t,n){return e.unlisten(t,n,p())},registerThumbContainerInteractionHandler:function(t,n){e.thumbContainer_.addEventListener(t,n,p())},deregisterThumbContainerInteractionHandler:function(t,n){e.thumbContainer_.removeEventListener(t,n,p())},registerBodyInteractionHandler:function(e,t){return document.body.addEventListener(e,t)},deregisterBodyInteractionHandler:function(e,t){return document.body.removeEventListener(e,t)},registerResizeHandler:function(e){return window.addEventListener("resize",e)},deregisterResizeHandler:function(e){return window.removeEventListener("resize",e)},notifyInput:function(){return e.emit(m.INPUT_EVENT,e)},notifyChange:function(){return e.emit(m.CHANGE_EVENT,e)},setThumbContainerStyleProperty:function(t,n){e.thumbContainer_.style.setProperty(t,n)},setTrackStyleProperty:function(t,n){return e.track_.style.setProperty(t,n)},setMarkerValue:function(t){return e.pinValueMarker_.innerText=t.toLocaleString()},setTrackMarkers:function(t,n,r){var o=t.toLocaleString(),i="linear-gradient(to right, currentColor 2px, transparent 0) "+("0 center / calc((100% - 2px) / "+("(("+n.toLocaleString()+" - "+r.toLocaleString()+") / "+o+")")+") 100% repeat-x");e.trackMarkerContainer_.style.setProperty("background",i)},isRTL:function(){return"rtl"===getComputedStyle(e.root).direction}})},t.prototype.initialSyncWithDOM=function(){var e=this.parseFloat_(this.root.getAttribute(m.ARIA_VALUENOW),this.value),t=this.parseFloat_(this.root.getAttribute(m.ARIA_VALUEMIN),this.min),n=this.parseFloat_(this.root.getAttribute(m.ARIA_VALUEMAX),this.max);t>=this.max?(this.max=n,this.min=t):(this.min=t,this.max=n),this.step=this.parseFloat_(this.root.getAttribute(m.STEP_DATA_ATTR),this.step),this.value=e,this.disabled=this.root.hasAttribute(m.ARIA_DISABLED)&&"false"!==this.root.getAttribute(m.ARIA_DISABLED),this.foundation.setupTrackMarker()},t.prototype.layout=function(){this.foundation.layout()},t.prototype.stepUp=function(e){void 0===e&&(e=this.step||1),this.value+=e},t.prototype.stepDown=function(e){void 0===e&&(e=this.step||1),this.value-=e},t.prototype.parseFloat_=function(e,t){var n=parseFloat(e);return"number"==typeof n&&isFinite(n)?n:t},t}(h),O=function(e,t){return(O=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(e,t)};function M(e,t){function n(){this.constructor=e}O(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}function P(e,t,n,r){return new(n||(n=Promise))((function(o,i){function a(e){try{u(r.next(e))}catch(e){i(e)}}function s(e){try{u(r.throw(e))}catch(e){i(e)}}function u(e){e.done?o(e.value):new n((function(t){t(e.value)})).then(a,s)}u((r=r.apply(e,t||[])).next())}))}function L(e,t){var n,r,o,i,a={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function s(i){return function(s){return function(i){if(n)throw new TypeError("Generator is already executing.");for(;a;)try{if(n=1,r&&(o=2&i[0]?r.return:i[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,i[1])).done)return o;switch(r=0,o&&(i=[2&i[0],o.value]),i[0]){case 0:case 1:o=i;break;case 4:return a.label++,{value:i[1],done:!1};case 5:a.label++,r=i[1],i=[0];continue;case 7:i=a.ops.pop(),a.trys.pop();continue;default:if(!(o=(o=a.trys).length>0&&o[o.length-1])&&(6===i[0]||2===i[0])){a=0;continue}if(3===i[0]&&(!o||i[1]>o[0]&&i[1]<o[3])){a.label=i[1];break}if(6===i[0]&&a.label<o[1]){a.label=o[1],o=i;break}if(o&&a.label<o[2]){a.label=o[2],a.ops.push(i);break}o[2]&&a.ops.pop(),a.trys.pop();continue}i=t.call(e,a)}catch(e){i=[6,e],r=0}finally{n=o=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,s])}}}var z=function(){function e(e){this.global=e,this.flags={},this.flagRegistry={},this.urlFlags={},this.populateURLFlags()}return e.prototype.setPlatform=function(e,t){null!=this.platform&&console.warn("Platform "+this.platformName+" has already been set. Overwriting the platform with "+t+"."),this.platformName=e,this.platform=t},e.prototype.registerFlag=function(e,t,n){if(this.flagRegistry[e]={evaluationFn:t,setHook:n},null!=this.urlFlags[e]){var r=this.urlFlags[e];console.warn("Setting feature override from URL "+e+": "+r+"."),this.set(e,r)}},e.prototype.get=function(e){return e in this.flags||(this.flags[e]=this.evaluateFlag(e)),this.flags[e]},e.prototype.getNumber=function(e){return this.get(e)},e.prototype.getBool=function(e){return this.get(e)},e.prototype.getFlags=function(){return this.flags},Object.defineProperty(e.prototype,"features",{get:function(){return this.flags},enumerable:!0,configurable:!0}),e.prototype.set=function(e,t){if(null==this.flagRegistry[e])throw new Error("Cannot set flag "+e+" as it has not been registered.");this.flags[e]=t,null!=this.flagRegistry[e].setHook&&this.flagRegistry[e].setHook(t)},e.prototype.evaluateFlag=function(e){if(null==this.flagRegistry[e])throw new Error("Cannot evaluate flag '"+e+"': no evaluation function found.");return this.flagRegistry[e].evaluationFn()},e.prototype.setFlags=function(e){this.flags=Object.assign({},e)},e.prototype.reset=function(){this.flags={},this.urlFlags={},this.populateURLFlags()},e.prototype.populateURLFlags=function(){var e=this;if(void 0!==this.global&&void 0!==this.global.location&&void 0!==this.global.location.search){var t,n,r=(t=this.global.location.search,n={},t.replace(/[?&]([^=?&]+)(?:=([^&]*))?/g,(function(e){for(var t=[],r=1;r<arguments.length;r++)t[r-1]=arguments[r];return W(n,t[0],t[1]),t.join("=")})),n);"tfjsflags"in r&&r.tfjsflags.split(",").forEach((function(t){var n=t.split(":"),r=n[0],o=n[1];e.urlFlags[r]=function(e,t){if("true"===(t=t.toLowerCase())||"false"===t)return"true"===t;if(""+ +t===t)return+t;throw new Error("Could not parse value flag value "+t+" for flag "+e+".")}(r,o)}))}},e}();function W(e,t,n){e[decodeURIComponent(t)]=decodeURIComponent(n||"")}function U(){return V}var V=null,G=new Map,H=new Map;function j(e,t){var n=Q(e,t);return G.get(n)}function q(e){for(var t=G.entries(),n=[];;){var r=t.next(),o=r.done,i=r.value;if(o)break;var a=i[0],s=i[1];a.split("_")[0]===e&&n.push(s)}return n}function K(e){var t=e.kernelName,n=e.backendName,r=Q(t,n);if(G.has(r))throw new Error("The kernel '"+t+"' for backend '"+n+"' is already registered");G.set(r,e)}function X(e){var t=e.kernelName;H.has(t)&&console.warn("Overriding the gradient for '"+t+"'"),H.set(t,e)}function Q(e,t){return t+"_"+e}function Y(e){for(var t=e.length,n=0,r=0;t>0;)r=Math.random()*t|0,n=e[--t],e[t]=e[r],e[r]=n}function $(e,t,n){return Math.max(e,Math.min(t,n))}function J(e){return e%2==0?e:e+1}function Z(e){for(var t=0,n=0;n<e.length;n++)t+=e[n];return t}function ee(e,t){if(!e)throw new Error("string"==typeof t?t:t())}function te(e,t,n){void 0===n&&(n=""),ee(ie(e,t),(function(){return n+" Shapes "+e+" and "+t+" must match"}))}function ne(e){ee(null!=e,(function(){return"The input to the tensor constructor must be a non-null value."}))}function re(e,t,n){if(void 0===t&&(t=[]),void 0===n&&(n=!1),null==t&&(t=[]),Array.isArray(e)||Ae(e)&&!n)for(var r=0;r<e.length;++r)re(e[r],t,n);else t.push(e);return t}function oe(e){if(0===e.length)return 1;for(var t=e[0],n=1;n<e.length;n++)t*=e[n];return t}function ie(e,t){if(e===t)return!0;if(null==e||null==t)return!1;if(e.length!==t.length)return!1;for(var n=0;n<e.length;n++)if(e[n]!==t[n])return!1;return!0}function ae(e){return e%1==0}function se(e){if(null!=Math.tanh)return Math.tanh(e);if(e===1/0)return 1;if(e===-1/0)return-1;var t=Math.exp(2*e);return(t-1)/(t+1)}function ue(e){var t=Math.ceil(Math.sqrt(e));return[t,Math.ceil(e/t)]}function ce(e,t){return t<=e.length?e:e+" ".repeat(t-e.length)}function le(e,t,n){return void 0===t&&(t=function(e){return 0}),new Promise((function(r,o){var i=0,a=function(){if(e())r();else{i++;var s=t(i);null!=n&&i>=n?o():setTimeout(a,s)}};a()}))}function de(e,t){for(var n=1,r=-1,o=0;o<e.length;++o)if(e[o]>=0)n*=e[o];else if(-1===e[o]){if(-1!==r)throw Error("Shapes can only have 1 implicit size. Found -1 at dim "+r+" and dim "+o);r=o}else if(e[o]<0)throw Error("Shapes can not be < 0. Found "+e[o]+" at dim "+o);if(-1===r){if(t>0&&t!==n)throw Error("Size("+t+") must match the product of shape "+e);return e}if(0===n)throw Error("Cannot infer the missing size in ["+e+"] when there are 0 elements");if(t%n!=0)throw Error("The implicit shape can't be a fractional number. Got "+t+" / "+n);var i=e.slice();return i[r]=t/n,i}function he(e,t){var n=t.length;return ee((e=null==e?t.map((function(e,t){return t})):[].concat(e)).every((function(e){return e>=-n&&e<n})),(function(){return"All values in axis param must be in range [-"+n+", "+n+") but got axis "+e})),ee(e.every((function(e){return ae(e)})),(function(){return"All values in axis param must be integers but got axis "+e})),e.map((function(e){return e<0?n+e:e}))}function pe(e,t){for(var n=[],r=[],o=null!=t&&Array.isArray(t)&&0===t.length,i=null==t||o?null:he(t,e).sort(),a=0,s=0;s<e.length;++s){if(null!=i){if(i[a]===s&&1!==e[s])throw new Error("Can't squeeze axis "+s+" since its dim '"+e[s]+"' is not 1");(null==i[a]||i[a]>s)&&1===e[s]&&(n.push(e[s]),r.push(s)),i[a]<=s&&a++}1!==e[s]&&(n.push(e[s]),r.push(s))}return{newShape:n,keptDims:r}}function fe(e,t){var n=null;if(null==e||"float32"===e)n=new Float32Array(t);else if("int32"===e)n=new Int32Array(t);else{if("bool"!==e)throw new Error("Unknown data type "+e);n=new Uint8Array(t)}return n}function me(e,t){var n=null;if(null==e||"float32"===e)n=new Float32Array(t);else if("int32"===e)n=new Int32Array(t);else if("bool"===e)n=new Uint8Array(t);else{if("string"!==e)throw new Error("Unknown data type "+e);n=new Array(t)}return n}function ve(e,t){for(var n=0;n<e.length;n++){var r=e[n];if(isNaN(r)||!isFinite(r))throw Error("A tensor of type "+t+" being uploaded contains "+r+".")}}function ge(e){return"bool"===e||"complex64"===e||"float32"===e||"int32"===e||"string"===e}function be(e,t){return!("complex64"===t||"float32"===t&&"complex64"!==e||"int32"===t&&"float32"!==e&&"complex64"!==e||"bool"===t&&"bool"===e)}function Ae(e){return e instanceof Float32Array||e instanceof Int32Array||e instanceof Uint8Array}function ye(e){if("float32"===e||"int32"===e)return 4;if("complex64"===e)return 8;if("bool"===e)return 1;throw new Error("Unknown dtype "+e)}function xe(e){if(null==e)return 0;var t=0;return e.forEach((function(e){return t+=e.length})),t}function Ce(e){return"string"==typeof e||e instanceof String}function we(e){return"boolean"==typeof e}function ke(e){return"number"==typeof e}function _e(e){return Array.isArray(e)?_e(e[0]):e instanceof Float32Array?"float32":e instanceof Int32Array||e instanceof Uint8Array?"int32":ke(e)?"float32":Ce(e)?"string":we(e)?"bool":"float32"}function Ee(e){return!!(e&&e.constructor&&e.call&&e.apply)}function Ie(e,t){for(var n=t;n<e;++n)if(e%n==0)return n;return e}function Re(e){var t=e.length;if(t<2)return[];var n=new Array(t-1);n[t-2]=e[t-1];for(var r=t-3;r>=0;--r)n[r]=n[r+1]*e[r+1];return n}function Se(e,t,n){if("string"===t)throw new Error("Cannot convert a string[] to a TypedArray");if(Array.isArray(e)&&(e=re(e)),n&&ve(e,t),function(e,t){return e instanceof Float32Array&&"float32"===t||e instanceof Int32Array&&"int32"===t||e instanceof Uint8Array&&"bool"===t}(e,t))return e;if(null==t||"float32"===t||"complex64"===t)return new Float32Array(e);if("int32"===t)return new Int32Array(e);if("bool"===t){for(var r=new Uint8Array(e.length),o=0;o<r.length;++o)0!==Math.round(e[o])&&(r[o]=1);return r}throw new Error("Unknown data type "+t)}function Te(e,t){if(0===e.length)return t[0];var n=e.reduce((function(e,t){return e*t}));if(0===n)return[];if(n!==t.length)throw new Error("["+e+"] does not match the input size.");return function e(t,n,r){var o=new Array;if(1===n.length)for(var i=n[0],a=0;a<i;a++)o[a]=r[t+a];else{i=n[0];var s=n.slice(1),u=s.reduce((function(e,t){return e*t}));for(a=0;a<i;a++)o[a]=e(t+a*u,s,r)}return o}(0,e,t)}function De(e,t){for(var n=Fe(e,t),r=0;r<n.length;r++)n[r]=1;return n}function Fe(e,t){if(null==t||"float32"===t||"complex64"===t)return new Float32Array(e);if("int32"===t)return new Int32Array(e);if("bool"===t)return new Uint8Array(e);throw new Error("Unknown data type "+t)}function Ne(){return U().platform.now()}function Be(e){e.forEach((function(t){ee(Number.isInteger(t)&&t>=0,(function(){return"Tensor must have a shape comprised of positive integers but got shape ["+e+"]."}))}))}function Oe(e,t){return void 0===t&&(t="utf-8"),t=t||"utf-8",U().platform.encode(e,t)}function Me(e,t){return void 0===t&&(t="utf-8"),t=t||"utf-8",U().platform.decode(e,t)}function Pe(e,t,n){if(0===t)return 0;if(1===t)return e[0];for(var r=e[e.length-1],o=0;o<e.length-1;++o)r+=n[o]*e[o];return r}function Le(e,t,n){if(0===t)return[];if(1===t)return[e];for(var r=new Array(t),o=0;o<r.length-1;++o)r[o]=Math.floor(e/n[o]),e-=r[o]*n[o];return r[r.length-1]=e,r}Object.freeze({shuffle:Y,clamp:$,nearestLargerEven:J,sum:Z,randUniform:function(e,t){var n=Math.random();return t*n+(1-n)*e},distSquared:function(e,t){for(var n=0,r=0;r<e.length;r++){var o=Number(e[r])-Number(t[r]);n+=o*o}return n},assert:ee,assertShapesMatch:te,assertNonNull:ne,flatten:re,sizeFromShape:oe,isScalarShape:function(e){return 0===e.length},arraysEqual:ie,isInt:ae,tanh:se,sizeToSquarishShape:ue,createShuffledIndices:function(e){for(var t=new Uint32Array(e),n=0;n<e;++n)t[n]=n;return Y(t),t},rightPad:ce,repeatedTry:le,inferFromImplicitShape:de,parseAxisParam:he,squeezeShape:pe,getTypedArrayFromDType:fe,getArrayFromDType:me,checkConversionForErrors:ve,isValidDtype:ge,hasEncodingLoss:be,isTypedArray:Ae,bytesPerElement:ye,bytesFromStringArray:xe,isString:Ce,isBoolean:we,isNumber:ke,inferDtype:_e,isFunction:Ee,nearestDivisor:Ie,computeStrides:Re,toTypedArray:Se,toNestedArray:Te,makeOnesTypedArray:De,makeZerosTypedArray:Fe,now:Ne,assertNonNegativeIntegerDimensions:Be,fetch:function(e,t){return U().platform.fetch(e,t)},encodeString:Oe,decodeString:Me,locToIndex:Pe,indexToLoc:Le});var ze=function(){function e(e,t){this.backendTimer=e,this.logger=t,null==t&&(this.logger=new We)}return e.prototype.profileKernel=function(e,t,n){var r,o=this,i=this.backendTimer.time((function(){r=n()}));return r.forEach((function(n){n.data().then((function(r){!function(e,t,n){if("float32"!==t)return!1;for(var r=0;r<e.length;r++){var o=e[r];if(isNaN(o)||!isFinite(o))return console.warn("Found "+o+" in the result of '"+n+"'"),!0}}(r,n.dtype,e),i.then((function(i){var a="";null!=i.getExtraProfileInfo&&(a=i.getExtraProfileInfo()),o.logger.logKernelProfile(e,n,r,i.kernelMs,t,a)}))}))})),r},e}(),We=function(){function e(){}return e.prototype.logKernelProfile=function(e,t,n,r,o,i){var a="number"==typeof r?ce(r+"ms",9):r.error,s=ce(e,25),u=t.rank,c=t.size,l=ce(t.shape.toString(),14),d="";for(var h in o){var p=o[h].shape||t.shape,f=p.length;d+=h+": "+f+"D "+(f>0?p:"")+" "}console.log("%c"+s+"\t%c"+a+"\t%c"+u+"D "+l+"\t%c"+c+"\t%c"+d+"\t%c"+i,"font-weight:bold","color:red","color:blue","color: orange","color: green","color: steelblue")},e}();function Ue(e,t,n){return ce(Array.isArray(e)?parseFloat(e[0].toFixed(7))+" + "+parseFloat(e[1].toFixed(7))+"j":Ce(e)?"'"+e+"'":"bool"===n?Ve(e):parseFloat(e.toFixed(7)).toString(),t)}function Ve(e){return 0===e?"false":"true"}function Ge(e){for(var t=[],n=0;n<e.length;n+=2)t.push([e[n],e[n+1]]);return t}var He=function(){function e(e,t,n){var r=this;if(this.dtype=t,this.shape=e.slice(),this.size=oe(e),null!=n){var o=n.length;ee(o===this.size,(function(){return"Length of values '"+o+"' does not match the size inferred by the shape '"+r.size+"'."}))}if("complex64"===t)throw new Error("complex64 dtype TensorBuffers are not supported. Please create a TensorBuffer for the real and imaginary parts separately and call tf.complex(real, imag).");this.values=n||me(t,this.size),this.strides=Re(e)}return e.prototype.set=function(e){for(var t=this,n=[],r=1;r<arguments.length;r++)n[r-1]=arguments[r];0===n.length&&(n=[0]),ee(n.length===this.rank,(function(){return"The number of provided coordinates ("+n.length+") must match the rank ("+t.rank+")"}));var o=this.locToIndex(n);this.values[o]=e},e.prototype.get=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];0===e.length&&(e=[0]);for(var n=0,r=0,o=e;r<o.length;r++){var i=o[r];if(i<0||i>=this.shape[n]){var a="Requested out of range element at "+e+".   Buffer shape="+this.shape;throw new Error(a)}n++}for(var s=e[e.length-1],u=0;u<e.length-1;++u)s+=this.strides[u]*e[u];return this.values[s]},e.prototype.locToIndex=function(e){if(0===this.rank)return 0;if(1===this.rank)return e[0];for(var t=e[e.length-1],n=0;n<e.length-1;++n)t+=this.strides[n]*e[n];return t},e.prototype.indexToLoc=function(e){if(0===this.rank)return[];if(1===this.rank)return[e];for(var t=new Array(this.shape.length),n=0;n<t.length-1;++n)t[n]=Math.floor(e/this.strides[n]),e-=t[n]*this.strides[n];return t[t.length-1]=e,t},Object.defineProperty(e.prototype,"rank",{get:function(){return this.shape.length},enumerable:!0,configurable:!0}),e.prototype.toTensor=function(){return je().makeTensor(this.values,this.shape,this.dtype)},e}(),je=null,qe=null,Ke=null,Xe=function(){function e(e,t,n,r){this.kept=!1,this.isDisposedInternal=!1,this.shape=e.slice(),this.dtype=t||"float32",this.size=oe(e),this.strides=Re(e),this.dataId=n,this.id=r,this.rankType=this.rank<5?this.rank.toString():"higher"}return e.prototype.flatten=function(){return this.throwIfDisposed(),this.as1D()},e.prototype.asScalar=function(){return this.throwIfDisposed(),ee(1===this.size,(function(){return"The array must have only 1 element."})),this.reshape([])},e.prototype.as1D=function(){return this.throwIfDisposed(),this.reshape([this.size])},e.prototype.as2D=function(e,t){return this.throwIfDisposed(),this.reshape([e,t])},e.prototype.as3D=function(e,t,n){return this.throwIfDisposed(),this.reshape([e,t,n])},e.prototype.as4D=function(e,t,n,r){return this.throwIfDisposed(),this.reshape([e,t,n,r])},e.prototype.as5D=function(e,t,n,r,o){return this.throwIfDisposed(),this.reshape([e,t,n,r,o])},e.prototype.asType=function(e){return this.throwIfDisposed(),qe.cast(this,e)},Object.defineProperty(e.prototype,"rank",{get:function(){return this.shape.length},enumerable:!0,configurable:!0}),e.prototype.buffer=function(){return P(this,void 0,void 0,(function(){var e;return L(this,(function(t){switch(t.label){case 0:return[4,this.data()];case 1:return e=t.sent(),[2,qe.buffer(this.shape,this.dtype,e)]}}))}))},e.prototype.bufferSync=function(){return qe.buffer(this.shape,this.dtype,this.dataSync())},e.prototype.array=function(){return P(this,void 0,void 0,(function(){var e;return L(this,(function(t){switch(t.label){case 0:return[4,this.data()];case 1:return e=t.sent(),[2,Te(this.shape,e)]}}))}))},e.prototype.arraySync=function(){return Te(this.shape,this.dataSync())},e.prototype.data=function(){return P(this,void 0,void 0,(function(){var e,t;return L(this,(function(n){switch(n.label){case 0:return this.throwIfDisposed(),e=je().read(this.dataId),"string"!==this.dtype?[3,2]:[4,e];case 1:t=n.sent();try{return[2,t.map((function(e){return Me(e)}))]}catch(e){throw new Error("Failed to decode the string bytes into utf-8. To get the original bytes, call tensor.bytes().")}n.label=2;case 2:return[2,e]}}))}))},e.prototype.dataSync=function(){this.throwIfDisposed();var e=je().readSync(this.dataId);if("string"===this.dtype)try{return e.map((function(e){return Me(e)}))}catch(e){throw new Error("Failed to decode the string bytes into utf-8. To get the original bytes, call tensor.bytes().")}return e},e.prototype.bytes=function(){return P(this,void 0,void 0,(function(){var e;return L(this,(function(t){switch(t.label){case 0:return this.throwIfDisposed(),[4,je().read(this.dataId)];case 1:return e=t.sent(),"string"===this.dtype?[2,e]:[2,new Uint8Array(e.buffer)]}}))}))},e.prototype.dispose=function(){this.isDisposed||(je().disposeTensor(this),this.isDisposedInternal=!0)},Object.defineProperty(e.prototype,"isDisposed",{get:function(){return this.isDisposedInternal},enumerable:!0,configurable:!0}),e.prototype.throwIfDisposed=function(){if(this.isDisposed)throw new Error("Tensor is disposed.")},e.prototype.toFloat=function(){return this.asType("float32")},e.prototype.toInt=function(){return this.asType("int32")},e.prototype.toBool=function(){return this.asType("bool")},e.prototype.print=function(e){return void 0===e&&(e=!1),qe.print(this,e)},e.prototype.reshape=function(e){return this.throwIfDisposed(),qe.reshape(this,e)},e.prototype.reshapeAs=function(e){return this.throwIfDisposed(),this.reshape(e.shape)},e.prototype.expandDims=function(e){return void 0===e&&(e=0),qe.expandDims(this,e)},e.prototype.cumsum=function(e,t,n){return void 0===e&&(e=0),void 0===t&&(t=!1),void 0===n&&(n=!1),qe.cumsum(this,e,t,n)},e.prototype.squeeze=function(e){return this.throwIfDisposed(),qe.squeeze(this,e)},e.prototype.clone=function(){return this.throwIfDisposed(),qe.clone(this)},e.prototype.oneHot=function(e,t,n){return this.throwIfDisposed(),qe.oneHot(this,e,t,n)},e.prototype.toString=function(e){return void 0===e&&(e=!1),function(e,t,n,r){var o=Re(t),i=function(e,t,n,r){var o=oe(t),i=r[r.length-1],a=new Array(i).fill(0),s=t.length,u="complex64"===n?Ge(e):e;if(s>1)for(var c=0;c<o/i;c++)for(var l=c*i,d=0;d<i;d++)a[d]=Math.max(a[d],Ue(u[l+d],0,n).length);return a}(e,t,n,o),a=t.length,s=function e(t,n,r,o,i,a){void 0===a&&(a=!0);var s="complex64"===r?2:1,u=n[0],c=n.length;if(0===c)return"complex64"===r?[Ue(Ge(t)[0],0,r)]:"bool"===r?[Ve(t[0])]:[t[0].toString()];if(1===c){if(u>20){var l=3*s,d=Array.from(t.slice(0,l)),h=Array.from(t.slice((u-3)*s,u*s));return"complex64"===r&&(d=Ge(d),h=Ge(h)),["["+d.map((function(e,t){return Ue(e,i[t],r)})).join(", ")+", ..., "+h.map((function(e,t){return Ue(e,i[u-3+t],r)})).join(", ")+"]"]}return["["+("complex64"===r?Ge(t):Array.from(t)).map((function(e,t){return Ue(e,i[t],r)})).join(", ")+"]"]}var p=n.slice(1),f=o.slice(1),m=o[0]*s,v=[];if(u>20){for(var g=0;g<3;g++){var b=(A=g*m)+m;v.push.apply(v,e(t.slice(A,b),p,r,f,i,!1))}for(v.push("..."),g=u-3;g<u;g++)b=(A=g*m)+m,v.push.apply(v,e(t.slice(A,b),p,r,f,i,g===u-1))}else for(g=0;g<u;g++){var A;b=(A=g*m)+m,v.push.apply(v,e(t.slice(A,b),p,r,f,i,g===u-1))}var y=2===c?",":"";for(v[0]="["+v[0]+y,g=1;g<v.length-1;g++)v[g]=" "+v[g]+y;var x=",\n";for(g=2;g<c;g++)x+="\n";return v[v.length-1]=" "+v[v.length-1]+"]"+(a?"":x),v}(e,t,n,o,i),u=["Tensor"];return r&&(u.push("  dtype: "+n),u.push("  rank: "+a),u.push("  shape: ["+t+"]"),u.push("  values:")),u.push(s.map((function(e){return"    "+e})).join("\n")),u.join("\n")}(this.dataSync(),this.shape,this.dtype,e)},e.prototype.tile=function(e){return this.throwIfDisposed(),qe.tile(this,e)},e.prototype.gather=function(e,t){return void 0===t&&(t=0),this.throwIfDisposed(),qe.gather(this,e,t)},e.prototype.matMul=function(e,t,n){return void 0===t&&(t=!1),void 0===n&&(n=!1),this.throwIfDisposed(),qe.matMul(this,e,t,n)},e.prototype.dot=function(e){return this.throwIfDisposed(),qe.dot(this,e)},e.prototype.norm=function(e,t,n){return void 0===e&&(e="euclidean"),void 0===t&&(t=null),void 0===n&&(n=!1),this.throwIfDisposed(),qe.norm(this,e,t,n)},e.prototype.slice=function(e,t){return this.throwIfDisposed(),qe.slice(this,e,t)},e.prototype.reverse=function(e){return this.throwIfDisposed(),qe.reverse(this,e)},e.prototype.concat=function(t,n){return void 0===n&&(n=0),this.throwIfDisposed(),t instanceof e&&(t=[t]),qe.concat([this].concat(t),n)},e.prototype.split=function(e,t){return void 0===t&&(t=0),this.throwIfDisposed(),qe.split(this,e,t)},e.prototype.stack=function(e,t){return void 0===t&&(t=0),qe.stack([this,e],t)},e.prototype.unstack=function(e){return void 0===e&&(e=0),qe.unstack(this,e)},e.prototype.pad=function(e,t){return void 0===t&&(t=0),qe.pad(this,e,t)},e.prototype.batchNormalization=function(e,t,n,r,o){return void 0===n&&(n=.001),Ke("tf.batchNormalization() is going away. Use tf.batchNorm() instead, and note the positional argument change of scale, offset, and varianceEpsilon"),this.batchNorm(e,t,o,r,n)},e.prototype.batchNorm=function(e,t,n,r,o){return void 0===o&&(o=.001),this.throwIfDisposed(),qe.batchNorm(this,e,t,n,r,o)},e.prototype.all=function(e,t){return void 0===e&&(e=null),void 0===t&&(t=!1),this.throwIfDisposed(),qe.all(this,e,t)},e.prototype.any=function(e,t){return void 0===e&&(e=null),void 0===t&&(t=!1),this.throwIfDisposed(),qe.any(this,e,t)},e.prototype.logSumExp=function(e,t){return void 0===e&&(e=null),void 0===t&&(t=!1),this.throwIfDisposed(),qe.logSumExp(this,e,t)},e.prototype.sum=function(e,t){return void 0===e&&(e=null),void 0===t&&(t=!1),this.throwIfDisposed(),qe.sum(this,e,t)},e.prototype.prod=function(e,t){return void 0===e&&(e=null),void 0===t&&(t=!1),this.throwIfDisposed(),qe.prod(this,e,t)},e.prototype.mean=function(e,t){return void 0===e&&(e=null),void 0===t&&(t=!1),this.throwIfDisposed(),qe.mean(this,e,t)},e.prototype.min=function(e,t){return void 0===e&&(e=null),void 0===t&&(t=!1),this.throwIfDisposed(),qe.min(this,e,t)},e.prototype.max=function(e,t){return void 0===e&&(e=null),void 0===t&&(t=!1),this.throwIfDisposed(),qe.max(this,e,t)},e.prototype.argMin=function(e){return void 0===e&&(e=null),this.throwIfDisposed(),qe.argMin(this,e)},e.prototype.argMax=function(e){return void 0===e&&(e=null),this.throwIfDisposed(),qe.argMax(this,e)},e.prototype.cast=function(e){return this.throwIfDisposed(),qe.cast(this,e)},e.prototype.add=function(e){return this.throwIfDisposed(),qe.add(this,e)},e.prototype.addStrict=function(e){return this.throwIfDisposed(),qe.addStrict(this,e)},e.prototype.atan2=function(e){return this.throwIfDisposed(),qe.atan2(this,e)},e.prototype.sub=function(e){return this.throwIfDisposed(),qe.sub(this,e)},e.prototype.subStrict=function(e){return this.throwIfDisposed(),qe.subStrict(this,e)},e.prototype.pow=function(e){return this.throwIfDisposed(),qe.pow(this,e)},e.prototype.powStrict=function(e){return this.throwIfDisposed(),qe.powStrict(this,e)},e.prototype.mul=function(e){return this.throwIfDisposed(),qe.mul(this,e)},e.prototype.mulStrict=function(e){return this.throwIfDisposed(),qe.mulStrict(this,e)},e.prototype.div=function(e){return this.throwIfDisposed(),qe.div(this,e)},e.prototype.divNoNan=function(e){return this.throwIfDisposed(),qe.divNoNan(this,e)},e.prototype.floorDiv=function(e){return this.throwIfDisposed(),qe.floorDiv(this,e)},e.prototype.divStrict=function(e){return this.throwIfDisposed(),qe.divStrict(this,e)},e.prototype.minimum=function(e){return this.throwIfDisposed(),qe.minimum(this,e)},e.prototype.minimumStrict=function(e){return this.throwIfDisposed(),qe.minimumStrict(this,e)},e.prototype.maximum=function(e){return this.throwIfDisposed(),qe.maximum(this,e)},e.prototype.maximumStrict=function(e){return this.throwIfDisposed(),qe.maximumStrict(this,e)},e.prototype.mod=function(e){return this.throwIfDisposed(),qe.mod(this,e)},e.prototype.modStrict=function(e){return this.throwIfDisposed(),qe.modStrict(this,e)},e.prototype.squaredDifferenceStrict=function(e){return this.throwIfDisposed(),qe.squaredDifferenceStrict(this,e)},e.prototype.transpose=function(e){return this.throwIfDisposed(),qe.transpose(this,e)},e.prototype.notEqual=function(e){return this.throwIfDisposed(),qe.notEqual(this,e)},e.prototype.notEqualStrict=function(e){return this.throwIfDisposed(),qe.notEqualStrict(this,e)},e.prototype.less=function(e){return this.throwIfDisposed(),qe.less(this,e)},e.prototype.lessStrict=function(e){return this.throwIfDisposed(),qe.lessStrict(this,e)},e.prototype.equal=function(e){return this.throwIfDisposed(),qe.equal(this,e)},e.prototype.equalStrict=function(e){return this.throwIfDisposed(),qe.equalStrict(this,e)},e.prototype.lessEqual=function(e){return this.throwIfDisposed(),qe.lessEqual(this,e)},e.prototype.lessEqualStrict=function(e){return this.throwIfDisposed(),qe.lessEqualStrict(this,e)},e.prototype.greater=function(e){return this.throwIfDisposed(),qe.greater(this,e)},e.prototype.greaterStrict=function(e){return this.throwIfDisposed(),qe.greaterStrict(this,e)},e.prototype.greaterEqual=function(e){return this.throwIfDisposed(),qe.greaterEqual(this,e)},e.prototype.greaterEqualStrict=function(e){return this.throwIfDisposed(),qe.greaterEqualStrict(this,e)},e.prototype.logicalAnd=function(e){return this.throwIfDisposed(),qe.logicalAnd(this,e)},e.prototype.logicalOr=function(e){return this.throwIfDisposed(),qe.logicalOr(this,e)},e.prototype.logicalNot=function(){return this.throwIfDisposed(),qe.logicalNot(this)},e.prototype.logicalXor=function(e){return this.throwIfDisposed(),qe.logicalXor(this,e)},e.prototype.where=function(e,t){return this.throwIfDisposed(),qe.where(e,this,t)},e.prototype.neg=function(){return this.throwIfDisposed(),qe.neg(this)},e.prototype.ceil=function(){return this.throwIfDisposed(),qe.ceil(this)},e.prototype.floor=function(){return this.throwIfDisposed(),qe.floor(this)},e.prototype.sign=function(){return this.throwIfDisposed(),qe.sign(this)},e.prototype.isNaN=function(){return this.throwIfDisposed(),qe.isNaN(this)},e.prototype.isInf=function(){return this.throwIfDisposed(),qe.isInf(this)},e.prototype.isFinite=function(){return this.throwIfDisposed(),qe.isFinite(this)},e.prototype.exp=function(){return this.throwIfDisposed(),qe.exp(this)},e.prototype.expm1=function(){return this.throwIfDisposed(),qe.expm1(this)},e.prototype.log=function(){return this.throwIfDisposed(),qe.log(this)},e.prototype.log1p=function(){return this.throwIfDisposed(),qe.log1p(this)},e.prototype.sqrt=function(){return this.throwIfDisposed(),qe.sqrt(this)},e.prototype.rsqrt=function(){return this.throwIfDisposed(),qe.rsqrt(this)},e.prototype.square=function(){return this.throwIfDisposed(),qe.square(this)},e.prototype.reciprocal=function(){return this.throwIfDisposed(),qe.reciprocal(this)},e.prototype.abs=function(){return this.throwIfDisposed(),qe.abs(this)},e.prototype.clipByValue=function(e,t){return this.throwIfDisposed(),qe.clipByValue(this,e,t)},e.prototype.relu=function(){return this.throwIfDisposed(),qe.relu(this)},e.prototype.relu6=function(){return this.throwIfDisposed(),qe.relu6(this)},e.prototype.elu=function(){return this.throwIfDisposed(),qe.elu(this)},e.prototype.selu=function(){return this.throwIfDisposed(),qe.selu(this)},e.prototype.leakyRelu=function(e){return void 0===e&&(e=.2),this.throwIfDisposed(),qe.leakyRelu(this,e)},e.prototype.prelu=function(e){return this.throwIfDisposed(),qe.prelu(this,e)},e.prototype.sigmoid=function(){return this.throwIfDisposed(),qe.sigmoid(this)},e.prototype.logSigmoid=function(){return this.throwIfDisposed(),qe.logSigmoid(this)},e.prototype.softplus=function(){return this.throwIfDisposed(),qe.softplus(this)},e.prototype.zerosLike=function(){return this.throwIfDisposed(),qe.zerosLike(this)},e.prototype.onesLike=function(){return this.throwIfDisposed(),qe.onesLike(this)},e.prototype.sin=function(){return this.throwIfDisposed(),qe.sin(this)},e.prototype.cos=function(){return this.throwIfDisposed(),qe.cos(this)},e.prototype.tan=function(){return this.throwIfDisposed(),qe.tan(this)},e.prototype.asin=function(){return this.throwIfDisposed(),qe.asin(this)},e.prototype.acos=function(){return this.throwIfDisposed(),qe.acos(this)},e.prototype.atan=function(){return this.throwIfDisposed(),qe.atan(this)},e.prototype.sinh=function(){return this.throwIfDisposed(),qe.sinh(this)},e.prototype.cosh=function(){return this.throwIfDisposed(),qe.cosh(this)},e.prototype.tanh=function(){return this.throwIfDisposed(),qe.tanh(this)},e.prototype.asinh=function(){return this.throwIfDisposed(),qe.asinh(this)},e.prototype.acosh=function(){return this.throwIfDisposed(),qe.acosh(this)},e.prototype.atanh=function(){return this.throwIfDisposed(),qe.atanh(this)},e.prototype.erf=function(){return this.throwIfDisposed(),qe.erf(this)},e.prototype.round=function(){return this.throwIfDisposed(),qe.round(this)},e.prototype.step=function(e){return void 0===e&&(e=0),this.throwIfDisposed(),qe.step(this,e)},e.prototype.softmax=function(e){return void 0===e&&(e=-1),this.throwIfDisposed(),qe.softmax(this,e)},e.prototype.logSoftmax=function(e){return void 0===e&&(e=-1),this.throwIfDisposed(),qe.logSoftmax(this,e)},e.prototype.resizeBilinear=function(e,t){return void 0===t&&(t=!1),this.throwIfDisposed(),qe.image.resizeBilinear(this,e,t)},e.prototype.resizeNearestNeighbor=function(e,t){return void 0===t&&(t=!1),this.throwIfDisposed(),qe.image.resizeNearestNeighbor(this,e,t)},e.prototype.conv1d=function(e,t,n,r,o,i){return void 0===r&&(r="NWC"),void 0===o&&(o=1),this.throwIfDisposed(),qe.conv1d(this,e,t,n,r,o,i)},e.prototype.conv2d=function(e,t,n,r,o,i){return void 0===r&&(r="NHWC"),void 0===o&&(o=[1,1]),this.throwIfDisposed(),qe.conv2d(this,e,t,n,r,o,i)},e.prototype.conv2dTranspose=function(e,t,n,r,o){return this.throwIfDisposed(),qe.conv2dTranspose(this,e,t,n,r,o)},e.prototype.depthwiseConv2D=function(e,t,n,r,o,i){return void 0===r&&(r="NHWC"),void 0===o&&(o=[1,1]),this.throwIfDisposed(),qe.depthwiseConv2d(this,e,t,n,r,o,i)},e.prototype.separableConv2d=function(e,t,n,r,o,i){return void 0===o&&(o=[1,1]),void 0===i&&(i="NHWC"),this.throwIfDisposed(),qe.separableConv2d(this,e,t,n,r,o,i)},e.prototype.avgPool=function(e,t,n,r){return this.throwIfDisposed(),qe.avgPool(this,e,t,n,r)},e.prototype.maxPool=function(e,t,n,r){return this.throwIfDisposed(),qe.maxPool(this,e,t,n,r)},e.prototype.localResponseNormalization=function(e,t,n,r){return void 0===e&&(e=5),void 0===t&&(t=1),void 0===n&&(n=1),void 0===r&&(r=.5),qe.localResponseNormalization(this,e,t,n,r)},e.prototype.pool=function(e,t,n,r,o){return this.throwIfDisposed(),qe.pool(this,e,t,n,r,o)},e.prototype.variable=function(e,t,n){return void 0===e&&(e=!0),this.throwIfDisposed(),je().makeVariable(this,e,t,n)},e.prototype.unsortedSegmentSum=function(e,t){return this.throwIfDisposed(),qe.unsortedSegmentSum(this,e,t)},e.prototype.batchToSpaceND=function(e,t){return this.throwIfDisposed(),qe.batchToSpaceND(this,e,t)},e.prototype.spaceToBatchND=function(e,t){return this.throwIfDisposed(),qe.spaceToBatchND(this,e,t)},e.prototype.topk=function(e,t){return void 0===e&&(e=1),void 0===t&&(t=!0),this.throwIfDisposed(),qe.topk(this,e,t)},e.prototype.stridedSlice=function(e,t,n,r,o,i,a,s){return void 0===r&&(r=0),void 0===o&&(o=0),void 0===i&&(i=0),void 0===a&&(a=0),void 0===s&&(s=0),this.throwIfDisposed(),qe.stridedSlice(this,e,t,n,r,o,i,a,s)},e.prototype.depthToSpace=function(e,t){return this.throwIfDisposed(),qe.depthToSpace(this,e,t)},e.prototype.fft=function(){return this.throwIfDisposed(),qe.spectral.fft(this)},e.prototype.ifft=function(){return this.throwIfDisposed(),qe.spectral.ifft(this)},e.prototype.rfft=function(){return this.throwIfDisposed(),qe.spectral.rfft(this)},e.prototype.irfft=function(){return this.throwIfDisposed(),qe.spectral.irfft(this)},e}();Object.defineProperty(Xe,Symbol.hasInstance,{value:function(e){return!!e&&null!=e.dataId&&null!=e.shape&&null!=e.dtype}});var Qe,Ye,$e,Je,Ze,et,tt=function(e){function t(t,n,r,o){var i=e.call(this,t.shape,t.dtype,t.dataId,o)||this;return i.trainable=n,i.name=r,i}return M(t,e),t.prototype.assign=function(e){if(e.dtype!==this.dtype)throw new Error("dtype of the new value ("+e.dtype+") and previous value ("+this.dtype+") must match");if(!ie(e.shape,this.shape))throw new Error("shape of the new value ("+e.shape+") and previous value ("+this.shape+") must match");je().disposeTensor(this),this.dataId=e.dataId,je().incRef(this,null)},t.prototype.dispose=function(){je().disposeVariable(this),this.isDisposedInternal=!0},t}(Xe);Object.defineProperty(tt,Symbol.hasInstance,{value:function(e){return e instanceof Xe&&null!=e.assign&&e.assign instanceof Function}}),(et=Qe||(Qe={})).R0="R0",et.R1="R1",et.R2="R2",et.R3="R3",et.R4="R4",et.R5="R5",et.R6="R6",function(e){e.float32="float32",e.int32="int32",e.bool="int32",e.complex64="complex64"}(Ye||(Ye={})),function(e){e.float32="float32",e.int32="int32",e.bool="bool",e.complex64="complex64"}($e||($e={})),function(e){e.float32="float32",e.int32="float32",e.bool="float32",e.complex64="complex64"}(Je||(Je={})),function(e){e.float32="complex64",e.int32="complex64",e.bool="complex64",e.complex64="complex64"}(Ze||(Ze={}));var nt={float32:Je,int32:Ye,bool:$e,complex64:Ze};function rt(e,t){if("string"===e||"string"===t){if("string"===e&&"string"===t)return"string";throw new Error("Can not upcast "+e+" with "+t)}return nt[e][t]}function ot(e){return rt(e,"int32")}function it(e,t){if(e.dtype===t.dtype)return[e,t];var n=rt(e.dtype,t.dtype);return[e.cast(n),t.cast(n)]}function at(e,t){ee(e.dtype===t.dtype,(function(){return"The dtypes of the first("+e.dtype+") and second("+t.dtype+") input must match"}))}function st(e){var t=[];return function e(t,n,r){if(null!=t)if(t instanceof Xe)n.push(t);else if(o=t,Array.isArray(o)||"object"==typeof o){var o,i=t;for(var a in i){var s=i[a];r.has(s)||(r.add(s),e(s,n,r))}}}(e,t,new Set),t}Object.freeze({makeTypesMatch:it,assertTypesMatch:at,isTensorInList:function(e,t){return t.some((function(t){return t.id===e.id}))},getTensorsInContainer:st});var ut,ct=function(){function e(){this.registeredVariables={},this.nextTapeNodeId=0,this.numBytes=0,this.numTensors=0,this.numStringTensors=0,this.numDataBuffers=0,this.gradientDepth=0,this.kernelDepth=0,this.scopeStack=[],this.numDataMovesStack=[],this.nextScopeId=0,this.tensorInfo=new WeakMap,this.profiling=!1,this.activeProfile={newBytes:0,newTensors:0,peakBytes:0,kernels:[],result:null}}return e.prototype.dispose=function(){for(var e in this.registeredVariables)this.registeredVariables[e].dispose()},e}(),lt=function(){function e(e){this.ENV=e,this.registry={},this.registryFactory={},this.pendingBackendInitId=0,this.state=new ct}return e.prototype.ready=function(){return P(this,void 0,void 0,(function(){var e,t,n;return L(this,(function(r){switch(r.label){case 0:if(null!=this.pendingBackendInit)return[2,this.pendingBackendInit.then((function(){}))];if(null!=this.backendInstance)return[2];e=this.getSortedBackends(),t=0,r.label=1;case 1:return t<e.length?(n=e[t],[4,this.initializeBackend(n).success]):[3,5];case 2:return r.sent()?[4,this.setBackend(n)]:[3,4];case 3:return r.sent(),[2];case 4:return t++,[3,1];case 5:throw new Error("Could not initialize any backends, all backend initializations failed.")}}))}))},Object.defineProperty(e.prototype,"backend",{get:function(){if(null!=this.pendingBackendInit)throw new Error("Backend '"+this.backendName+"' has not yet been initialized. Make sure to await tf.ready() or await tf.setBackend() before calling other methods");if(null==this.backendInstance){var e=this.initializeBackendsAndReturnBest(),t=e.name;if(e.asyncInit)throw new Error("The highest priority backend '"+t+"' has not yet been initialized. Make sure to await tf.ready() or await tf.setBackend() before calling other methods");this.setBackend(t)}return this.backendInstance},enumerable:!0,configurable:!0}),e.prototype.backendNames=function(){return Object.keys(this.registryFactory)},e.prototype.findBackend=function(e){if(!(e in this.registry)){if(!(e in this.registryFactory))return null;if(this.initializeBackend(e).asyncInit)return null}return this.registry[e]},e.prototype.findBackendFactory=function(e){return e in this.registryFactory?this.registryFactory[e].factory:null},e.prototype.registerBackend=function(e,t,n){return void 0===n&&(n=1),e in this.registryFactory?(console.warn(e+" backend was already registered. Reusing existing backend factory."),!1):(this.registryFactory[e]={factory:t,priority:n},!0)},e.prototype.setBackend=function(e){return P(this,void 0,void 0,(function(){var t,n,r;return L(this,(function(o){switch(o.label){case 0:if(null==this.registryFactory[e])throw new Error("Backend name '"+e+"' not found in registry");return this.backendName=e,null!=this.registry[e]?[3,4]:(this.backendInstance=null,t=this.initializeBackend(e),n=t.success,t.asyncInit?[4,n]:[3,2]);case 1:return r=o.sent(),[3,3];case 2:r=n,o.label=3;case 3:if(!r)return[2,!1];o.label=4;case 4:return this.backendInstance=this.registry[e],this.setupRegisteredKernels(),this.profiler=new ze(this.backendInstance),[2,!0]}}))}))},e.prototype.setupRegisteredKernels=function(){var e=this;q(this.backendName).forEach((function(t){null!=t.setupFunc&&t.setupFunc(e.backendInstance)}))},e.prototype.disposeRegisteredKernels=function(e){var t=this;q(e).forEach((function(n){null!=n.disposeFunc&&n.disposeFunc(t.registry[e])}))},e.prototype.initializeBackend=function(e){var t=this,n=this.registryFactory[e];if(null==n)throw new Error("Cannot initialize backend "+e+", no registration found.");try{var r=n.factory();if(Promise.resolve(r)===r){var o=++this.pendingBackendInitId,i=r.then((function(n){return!(o<t.pendingBackendInitId||(t.registry[e]=n,t.pendingBackendInit=null,0))})).catch((function(n){return!(o<t.pendingBackendInitId||(t.pendingBackendInit=null,console.warn("Initialization of backend "+e+" failed"),console.warn(n.stack||n.message),1))}));return this.pendingBackendInit=i,{success:i,asyncInit:!0}}return this.registry[e]=r,{success:!0,asyncInit:!1}}catch(t){return console.warn("Initialization of backend "+e+" failed"),console.warn(t.stack||t.message),{success:!1,asyncInit:!1}}},e.prototype.removeBackend=function(e){if(!(e in this.registryFactory))throw new Error(e+" backend not found in registry");this.backendName===e&&null!=this.pendingBackendInit&&this.pendingBackendInitId++,e in this.registry&&(this.disposeRegisteredKernels(e),this.registry[e].dispose(),delete this.registry[e]),delete this.registryFactory[e],this.backendName===e&&(this.pendingBackendInit=null,this.backendName=null,this.backendInstance=null)},e.prototype.getSortedBackends=function(){var e=this;if(0===Object.keys(this.registryFactory).length)throw new Error("No backend found in registry.");return Object.keys(this.registryFactory).sort((function(t,n){return e.registryFactory[n].priority-e.registryFactory[t].priority}))},e.prototype.initializeBackendsAndReturnBest=function(){for(var e=this.getSortedBackends(),t=0;t<e.length;t++){var n=e[t],r=this.initializeBackend(n),o=r.success,i=r.asyncInit;if(i||o)return{name:n,asyncInit:i}}throw new Error("Could not initialize any backends, all backend initializations failed.")},e.prototype.moveData=function(e,t){var n=this.state.tensorInfo.get(t),r=n.backend,o=this.readSync(t);r.disposeData(t),n.backend=e,e.move(t,o,n.shape,n.dtype),this.shouldCheckForMemLeaks()&&this.state.numDataMovesStack[this.state.numDataMovesStack.length-1]++},e.prototype.tidy=function(e,t){var n,r=this,o=null;if(null==t){if("function"!=typeof e)throw new Error("Please provide a function to tidy()");t=e}else{if("string"!=typeof e&&!(e instanceof String))throw new Error("When calling with two arguments, the first argument to tidy() must be a string");if("function"!=typeof t)throw new Error("When calling with two arguments, the 2nd argument to tidy() must be a function");o=e}return this.scopedRun((function(){return r.startScope(o)}),(function(){return r.endScope(n)}),(function(){return(n=t())instanceof Promise&&console.error("Cannot return a Promise inside of tidy."),n}))},e.prototype.scopedRun=function(e,t,n){e();try{var r=n();return t(),r}catch(e){throw t(),e}},e.prototype.nextTensorId=function(){return e.nextTensorId++},e.prototype.nextVariableId=function(){return e.nextVariableId++},e.prototype.clone=function(e){var t=this.makeTensorFromDataId(e.dataId,e.shape,e.dtype),n={x:e};return this.addTapeNode(this.state.activeScope.name,n,[t],(function(e){return{x:function(){return e.toFloat()}}}),[]),t},e.prototype.runKernel=function(e,t,n,r,o){return this.runKernelFunc(null,t,null,e,n,r,o)},e.prototype.shouldCheckForMemLeaks=function(){return this.ENV.getBool("IS_TEST")},e.prototype.checkKernelForMemLeak=function(e,t,n){var r=this.backend.numDataIds(),o=0;n.forEach((function(e){o+="complex64"===e.dtype?3:1}));var i=this.state.numDataMovesStack[this.state.numDataMovesStack.length-1],a=r-t-o-i;if(a>0)throw new Error("Backend '"+this.backendName+"' has an internal memory leak ("+a+" data ids) after running '"+e+"'")},e.prototype.runKernelFunc=function(e,t,n,r,o,i,a){var s,u=this;void 0===i&&(i=[]),void 0===a&&(a=[]);var c=[],l=this.isTapeOn();null==r&&(r=null!=this.state.activeScope?this.state.activeScope.name:"");var d,h=function(e){l&&(c=e.map((function(e){return u.keep(u.clone(e))})))},p=this.state.numBytes,f=this.state.numTensors;this.shouldCheckForMemLeaks()&&this.state.numDataMovesStack.push(0);var m,v=j(r,this.backendName);return d=null!=v?function(){var e=u.backend.numDataIds();m=v.kernelFunc({inputs:t,attrs:o,backend:u.backend});var n=Array.isArray(m)?m:[m];u.shouldCheckForMemLeaks()&&u.checkKernelForMemLeak(r,e,n);var s=n.map((function(e){var t=e.dataId,n=e.shape,r=e.dtype;return u.makeTensorFromDataId(t,n,r)})),c=s.filter((function(e,t){return a[t]}));return h((i||[]).slice().concat(c)),s}:function(){var t=u.backend.numDataIds();m=u.tidy((function(){return e(u.backend,h)}));var n=Array.isArray(m)?m:[m];return u.shouldCheckForMemLeaks()&&u.checkKernelForMemLeak(r,t,n),n},this.scopedRun((function(){return u.state.kernelDepth++}),(function(){return u.state.kernelDepth--}),(function(){s=u.ENV.getBool("DEBUG")?u.profiler.profileKernel(r,t,(function(){return d()})):d()})),l&&this.addTapeNode(r,t,s,n,c),this.state.profiling&&this.state.activeProfile.kernels.push({name:r,bytesAdded:this.state.numBytes-p,totalBytesSnapshot:this.state.numBytes,tensorsAdded:this.state.numTensors-f,totalTensorsSnapshot:this.state.numTensors,inputShapes:Object.keys(t).map((function(e){return t[e].shape})),outputShapes:s.map((function(e){return e.shape}))}),Array.isArray(m)?s:s[0]},e.prototype.makeTensor=function(e,t,n,r){if(null==e)throw new Error("Values passed to engine.makeTensor() are null");n=n||"float32",r=r||this.backend;var o=e;"string"===n&&Ce(e[0])&&(o=e.map((function(e){return Oe(e)})));var i=r.write(o,t,n),a=new Xe(t,n,i,this.nextTensorId());if(this.incRef(a,r),"string"===n){var s=this.state.tensorInfo.get(i),u=xe(o);this.state.numBytes+=u-s.bytes,s.bytes=u}return a},e.prototype.makeTensorFromDataId=function(e,t,n,r){var o=new Xe(t,n=n||"float32",e,this.nextTensorId());return this.incRef(o,r),o},e.prototype.makeVariable=function(e,t,n,r){void 0===t&&(t=!0),n=n||this.nextVariableId().toString(),null!=r&&r!==e.dtype&&(e=e.asType(r));var o=new tt(e,t,n,this.nextTensorId());if(null!=this.state.registeredVariables[o.name])throw new Error("Variable with name "+o.name+" was already registered");return this.state.registeredVariables[o.name]=o,this.incRef(o,this.backend),o},e.prototype.incRef=function(e,t){var n=this.state.tensorInfo.has(e.dataId)?this.state.tensorInfo.get(e.dataId).refCount:0;if(this.state.numTensors++,"string"===e.dtype&&this.state.numStringTensors++,0===n){this.state.numDataBuffers++;var r=0;"complex64"!==e.dtype&&"string"!==e.dtype&&(r=e.size*ye(e.dtype)),this.state.tensorInfo.set(e.dataId,{backend:t||this.backend,dtype:e.dtype,shape:e.shape,bytes:r,refCount:0}),this.state.numBytes+=r}this.state.tensorInfo.get(e.dataId).refCount++,e instanceof tt||this.track(e)},e.prototype.disposeTensor=function(e){if(this.state.tensorInfo.has(e.dataId)){this.state.numTensors--,"string"===e.dtype&&this.state.numStringTensors--;var t=this.state.tensorInfo.get(e.dataId);t.refCount<=1?("complex64"!==e.dtype&&(this.state.numBytes-=t.bytes),this.state.numDataBuffers--,t.backend.disposeData(e.dataId),this.state.tensorInfo.delete(e.dataId)):this.state.tensorInfo.get(e.dataId).refCount--}},e.prototype.disposeVariables=function(){for(var e in this.state.registeredVariables){var t=this.state.registeredVariables[e];this.disposeVariable(t)}},e.prototype.disposeVariable=function(e){this.disposeTensor(e),null!=this.state.registeredVariables[e.name]&&delete this.state.registeredVariables[e.name]},e.prototype.memory=function(){var e=this.backend.memory();return e.numTensors=this.state.numTensors,e.numDataBuffers=this.state.numDataBuffers,e.numBytes=this.state.numBytes,this.state.numStringTensors>0&&(e.unreliable=!0,null==e.reasons&&(e.reasons=[]),e.reasons.push("Memory usage by string tensors is approximate (2 bytes per character)")),e},e.prototype.profile=function(e){return P(this,void 0,void 0,(function(){var t,n;return L(this,(function(r){return this.state.profiling=!0,t=this.state.numBytes,n=this.state.numTensors,this.state.activeProfile.kernels=[],this.state.activeProfile.result=e(),this.state.profiling=!1,this.state.activeProfile.peakBytes=Math.max.apply(Math,this.state.activeProfile.kernels.map((function(e){return e.totalBytesSnapshot}))),this.state.activeProfile.newBytes=this.state.numBytes-t,this.state.activeProfile.newTensors=this.state.numTensors-n,[2,this.state.activeProfile]}))}))},e.prototype.isTapeOn=function(){return this.state.gradientDepth>0&&0===this.state.kernelDepth},e.prototype.addTapeNode=function(e,t,n,r,o){var i=this,a={id:this.state.nextTapeNodeId++,kernelName:e,inputs:t,outputs:n,saved:o},s=function(e){return H.get(e)}(e);null!=s&&(r=s.gradFunc),null!=r&&(a.gradient=function(e){return e=e.map((function(e,t){if(null==e){var r=n[t],o=Fe(r.size,r.dtype);return i.makeTensor(o,r.shape,r.dtype)}return e})),r(e.length>1?e:e[0],o)}),this.state.activeTape.push(a)},e.prototype.keep=function(e){return e.kept=!0,e},e.prototype.startTape=function(){0===this.state.gradientDepth&&(this.state.activeTape=[]),this.state.gradientDepth++},e.prototype.endTape=function(){this.state.gradientDepth--},e.prototype.startScope=function(e){var t={track:[],name:"unnamed scope",id:this.state.nextScopeId++};e&&(t.name=e),this.state.scopeStack.push(t),this.state.activeScope=t},e.prototype.endScope=function(e){for(var t=this,n=st(e),r=new Set(n.map((function(e){return e.id}))),o=0;o<this.state.activeScope.track.length;o++){var i=this.state.activeScope.track[o];i.kept||r.has(i.id)||i.dispose()}var a=this.state.scopeStack.pop();this.state.activeScope=0===this.state.scopeStack.length?null:this.state.scopeStack[this.state.scopeStack.length-1],n.forEach((function(e){e.kept||e.scopeId!==a.id||t.track(e)}))},e.prototype.gradients=function(e,t,n,r){var o=this;if(void 0===r&&(r=!1),ee(t.length>0,(function(){return"gradients() received an empty list of xs."})),null!=n&&"float32"!==n.dtype)throw new Error("dy must have 'float32' dtype, but has '"+n.dtype+"'");var i=this.scopedRun((function(){return o.startTape()}),(function(){return o.endTape()}),(function(){return o.tidy("forward",e)}));ee(i instanceof Xe,(function(){return"The result y returned by f() must be a tensor."}));var a=function(e,t,n){for(var r={},o={},i=0;i<t.length;i++)r[t[i].id]=!0;for(i=0;i<e.length;i++){var a=(f=e[i]).inputs;for(var s in a){for(var u=a[s],c=!1,l=0;l<t.length;l++)if(r[u.id]){f.outputs.forEach((function(e){return r[e.id]=!0})),c=!0,o[f.id]=!0;break}if(c)break}}var d={};d[n.id]=!0;var h={};for(i=e.length-1;i>=0;i--)for(a=(f=e[i]).inputs,l=0;l<f.outputs.length;l++)if(d[f.outputs[l].id]){for(var s in a)d[a[s].id]=!0,h[f.id]=!0;break}var p=[];for(i=0;i<e.length;i++){var f;if(o[(f=e[i]).id]&&h[f.id]){var m={};for(var s in f.inputs){var v=f.inputs[s];r[v.id]&&(m[s]=v)}var g=Object.assign({},f);g.inputs=m,g.outputs=f.outputs,p.push(g)}}return p}(this.state.activeTape,t,i);if(!r&&0===a.length&&t.length>0)throw new Error("Cannot compute gradient of y=f(x) with respect to x. Make sure that the f you passed encloses all operations that lead from x to y.");return this.tidy("backward",(function(){var e,r,s={};s[i.id]=null==n?(r=De(oe(e=i.shape),"float32"),dt.makeTensor(r,e,"float32")):n,function(e,t,n){for(var r=function(r){var o=t[r],i=[];if(o.outputs.forEach((function(t){var n=e[t.id];null!=n?i.push(n):i.push(null)})),null==o.gradient)throw new Error("Cannot compute gradient: gradient function not found for "+o.kernelName+".");var a=o.gradient(i),s=function(t){if(!(t in a))throw new Error("Cannot backprop through input "+t+". Available gradients found: "+Object.keys(a)+".");var r=n((function(){return a[t]()}));if("float32"!==r.dtype)throw new Error("Error in gradient for op "+o.kernelName+". The gradient of input "+t+" must have 'float32' dtype, but has '"+r.dtype+"'");var i=o.inputs[t];if(!ie(r.shape,i.shape))throw new Error("Error in gradient for op "+o.kernelName+". The gradient of input '"+t+"' has shape '"+r.shape+"', which does not match the shape of the input '"+i.shape+"'");if(null==e[i.id])e[i.id]=r;else{var s=e[i.id];e[i.id]=s.add(r),s.dispose()}};for(var u in o.inputs)s(u)},o=t.length-1;o>=0;o--)r(o)}(s,a,(function(e){return o.tidy(e)}));var u=t.map((function(e){return s[e.id]}));return 0===o.state.gradientDepth&&(o.state.activeTape.forEach((function(e){for(var t=0,n=e.saved;t<n.length;t++)n[t].dispose()})),o.state.activeTape=null),{value:i,grads:u}}))},e.prototype.customGrad=function(e){var t=this;return ee(Ee(e),(function(){return"The f passed in customGrad(f) must be a function."})),function(){for(var n,r=[],o=0;o<arguments.length;o++)r[o]=arguments[o];ee(r.every((function(e){return e instanceof Xe})),(function(){return"The args passed in customGrad(f)(x1, x2,...) must all be tensors"}));var i={};return r.forEach((function(e,t){i[t]=e})),t.runKernelFunc((function(t,o){return ee((n=e.apply(void 0,r.concat([o]))).value instanceof Xe,(function(){return"The function f passed in customGrad(f) must return an object where `obj.value` is a tensor"})),ee(Ee(n.gradFunc),(function(){return"The function f passed in customGrad(f) must return an object where `obj.gradFunc` is a function."})),n.value}),i,(function(e,t){var o=n.gradFunc(e,t),i=Array.isArray(o)?o:[o];ee(i.length===r.length,(function(){return"The function f passed in customGrad(f) must return an object where `obj.gradFunc` is a function that returns the same number of tensors as inputs passed to f(...)."})),ee(i.every((function(e){return e instanceof Xe})),(function(){return"The function f passed in customGrad(f) must return an object where `obj.gradFunc` is a function that returns a list of only tensors."}));var a={};return i.forEach((function(e,t){a[t]=function(){return e}})),a}))}},e.prototype.readSync=function(e){return this.state.tensorInfo.get(e).backend.readSync(e)},e.prototype.read=function(e){return this.state.tensorInfo.get(e).backend.read(e)},e.prototype.time=function(e){return P(this,void 0,void 0,(function(){var t,n;return L(this,(function(r){switch(r.label){case 0:return t=Ne(),[4,this.backend.time(e)];case 1:return(n=r.sent()).wallMs=Ne()-t,[2,n]}}))}))},e.prototype.track=function(e){return null!=this.state.activeScope&&(e.scopeId=this.state.activeScope.id,this.state.activeScope.track.push(e)),e},Object.defineProperty(e.prototype,"registeredVariables",{get:function(){return this.state.registeredVariables},enumerable:!0,configurable:!0}),e.prototype.reset=function(){for(var e in this.pendingBackendInitId++,this.state.dispose(),this.ENV.reset(),this.state=new ct,this.registry)this.disposeRegisteredKernels(e),this.registry[e].dispose(),delete this.registry[e];this.backendName=null,this.backendInstance=null,this.pendingBackendInit=null},e.nextTensorId=0,e.nextVariableId=0,e}(),dt=function(){var e=function(){if(null==ut){var e=void 0;if("undefined"!=typeof window)e=window;else if("undefined"!=typeof global)e=global;else if("undefined"!=typeof process)e=process;else{if("undefined"==typeof self)throw new Error("Could not find a global object");e=self}ut=e}return ut}();if(null==e._tfengine){var t=new z(e);e._tfengine=new lt(t)}return function(e){V=e}(e._tfengine.ENV),je=function(){return e._tfengine},e._tfengine}();function ht(){return"undefined"!=typeof window&&null!=window.document||"undefined"!=typeof WorkerGlobalScope}var pt=U();pt.registerFlag("DEBUG",(function(){return!1}),(function(e){e&&console.warn("Debugging mode is ON. The output of every math call will be downloaded to CPU and checked for NaNs. This significantly impacts performance.")})),pt.registerFlag("IS_BROWSER",(function(){return ht()})),pt.registerFlag("IS_NODE",(function(){return"undefined"!=typeof process&&void 0!==process.versions&&void 0!==process.versions.node})),pt.registerFlag("IS_CHROME",(function(){return"undefined"!=typeof navigator&&null!=navigator&&null!=navigator.userAgent&&/Chrome/.test(navigator.userAgent)&&/Google Inc/.test(navigator.vendor)})),pt.registerFlag("PROD",(function(){return!1})),pt.registerFlag("TENSORLIKE_CHECK_SHAPE_CONSISTENCY",(function(){return pt.getBool("DEBUG")})),pt.registerFlag("DEPRECATION_WARNINGS_ENABLED",(function(){return!0})),pt.registerFlag("IS_TEST",(function(){return!1}));var ft,mt,vt,gt={},bt={alpha:!1,antialias:!1,premultipliedAlpha:!1,preserveDrawingBuffer:!1,depth:!1,stencil:!1,failIfMajorPerformanceCaveat:!0};function At(e,t){gt[e]=t}function yt(e){e in gt||(gt[e]=function(e){if(1!==e&&2!==e)throw new Error("Cannot get WebGL rendering context, WebGL is disabled.");var t=function(e){if("undefined"!=typeof OffscreenCanvas&&2===e)return new OffscreenCanvas(300,150);if("undefined"!=typeof document)return document.createElement("canvas");throw new Error("Cannot create a canvas in this context")}(e);return t.addEventListener("webglcontextlost",(function(t){t.preventDefault(),delete gt[e]}),!1),1===e?t.getContext("webgl",bt)||t.getContext("experimental-webgl",bt):t.getContext("webgl2",bt)}(e));var t=gt[e];return t.isContextLost()?(delete gt[e],yt(e)):(t.disable(t.DEPTH_TEST),t.disable(t.STENCIL_TEST),t.disable(t.BLEND),t.disable(t.DITHER),t.disable(t.POLYGON_OFFSET_FILL),t.disable(t.SAMPLE_COVERAGE),t.enable(t.SCISSOR_TEST),t.enable(t.CULL_FACE),t.cullFace(t.BACK),gt[e])}function xt(e,t){return[t,e]}function Ct(e){var t=oe(e);return ue(Math.ceil(t/4))}function wt(e,t){return[Math.max(1,Math.ceil(t/2)),Math.max(1,Math.ceil(e/2))]}function kt(e,t){var n,r,o,i,a,s,u,c,l,d=e;return 2===U().getNumber("WEBGL_VERSION")?(n=d.R32F,r=d.R16F,o=d.RGBA16F,i=d.RGBA32F,a=d.RED,s=4,u=1,c=d.HALF_FLOAT,l=d.FLOAT):(n=e.RGBA,r=e.RGBA,o=e.RGBA,i=d.RGBA,a=e.RGBA,s=4,u=4,c=null!=t?t.HALF_FLOAT_OES:null,l=e.FLOAT),{internalFormatFloat:n,internalFormatHalfFloat:r,internalFormatPackedHalfFloat:o,internalFormatPackedFloat:i,textureFormatFloat:a,downloadTextureFormat:e.RGBA,downloadUnpackNumChannels:s,defaultNumChannels:u,textureTypeHalfFloat:c,textureTypeFloat:l}}function _t(e,t,n){var r=n();return t&&function(e){var t=e.getError();if(t!==e.NO_ERROR)throw new Error("WebGL Error: "+It(e,t))}(e),r}!function(e){e[e.DENSE=0]="DENSE",e[e.SHARED_BATCH=1]="SHARED_BATCH"}(ft||(ft={})),function(e){e[e.RENDER=0]="RENDER",e[e.UPLOAD=1]="UPLOAD",e[e.PIXELS=2]="PIXELS",e[e.DOWNLOAD=3]="DOWNLOAD"}(mt||(mt={})),function(e){e[e.UNPACKED_FLOAT16=0]="UNPACKED_FLOAT16",e[e.UNPACKED_FLOAT32=1]="UNPACKED_FLOAT32",e[e.PACKED_4X1_UNSIGNED_BYTE=2]="PACKED_4X1_UNSIGNED_BYTE",e[e.PACKED_2X2_FLOAT32=3]="PACKED_2X2_FLOAT32",e[e.PACKED_2X2_FLOAT16=4]="PACKED_2X2_FLOAT16"}(vt||(vt={}));function Et(e){return!!(U().getBool("WEBGL_RENDER_FLOAT32_ENABLED")||0===e||5.96e-8<Math.abs(e)&&Math.abs(e)<65504)}function It(e,t){switch(t){case e.NO_ERROR:return"NO_ERROR";case e.INVALID_ENUM:return"INVALID_ENUM";case e.INVALID_VALUE:return"INVALID_VALUE";case e.INVALID_OPERATION:return"INVALID_OPERATION";case e.INVALID_FRAMEBUFFER_OPERATION:return"INVALID_FRAMEBUFFER_OPERATION";case e.OUT_OF_MEMORY:return"OUT_OF_MEMORY";case e.CONTEXT_LOST_WEBGL:return"CONTEXT_LOST_WEBGL";default:return"Unknown error code "+t}}function Rt(e,t,n){return $t(e,t,(function(){return e.getExtension(n)}),'Extension "'+n+'" not supported on this browser.')}function St(e,t,n){var r=$t(e,t,(function(){return e.createShader(e.VERTEX_SHADER)}),"Unable to create vertex WebGLShader.");if(_t(e,t,(function(){return e.shaderSource(r,n)})),_t(e,t,(function(){return e.compileShader(r)})),!1===e.getShaderParameter(r,e.COMPILE_STATUS))throw console.log(e.getShaderInfoLog(r)),new Error("Failed to compile vertex shader.");return r}function Tt(e,t,n){var r=$t(e,t,(function(){return e.createShader(e.FRAGMENT_SHADER)}),"Unable to create fragment WebGLShader.");if(_t(e,t,(function(){return e.shaderSource(r,n)})),_t(e,t,(function(){return e.compileShader(r)})),!1===e.getShaderParameter(r,e.COMPILE_STATUS))throw function(e,t){var n=Nt.exec(t);if(null==n)return console.log("Couldn't parse line number in error: "+t),void console.log(e);for(var r=+n[1],o=e.split("\n"),i=o.length.toString().length+2,a=o.map((function(e,t){return ce((t+1).toString(),i)+e})),s=0,u=0;u<a.length;u++)s=Math.max(a[u].length,s);var c=a.slice(0,r-1),l=a.slice(r-1,r),d=a.slice(r);console.log(c.join("\n")),console.log(t.split("\n")[0]),console.log("%c "+ce(l[0],s),"border:1px solid red; background-color:#e3d2d2; color:#a61717"),console.log(d.join("\n"))}(n,e.getShaderInfoLog(r)),new Error("Failed to compile fragment shader.");return r}var Dt,Ft,Nt=/ERROR: [0-9]+:([0-9]+):/g;function Bt(e,t){return $t(e,t,(function(){return e.createProgram()}),"Unable to create WebGLProgram.")}function Ot(e,t,n){if(_t(e,t,(function(){return e.linkProgram(n)})),!1===e.getProgramParameter(n,e.LINK_STATUS))throw console.log(e.getProgramInfoLog(n)),new Error("Failed to link vertex and fragment shaders.")}function Mt(e,t,n){if(_t(e,t,(function(){return e.validateProgram(n)})),!1===e.getProgramParameter(n,e.VALIDATE_STATUS))throw console.log(e.getProgramInfoLog(n)),new Error("Shader program validation failed.")}function Pt(e,t,n){var r=$t(e,t,(function(){return e.createBuffer()}),"Unable to create WebGLBuffer");return _t(e,t,(function(){return e.bindBuffer(e.ARRAY_BUFFER,r)})),_t(e,t,(function(){return e.bufferData(e.ARRAY_BUFFER,n,e.STATIC_DRAW)})),r}function Lt(e,t,n){var r=$t(e,t,(function(){return e.createBuffer()}),"Unable to create WebGLBuffer");return _t(e,t,(function(){return e.bindBuffer(e.ELEMENT_ARRAY_BUFFER,r)})),_t(e,t,(function(){return e.bufferData(e.ELEMENT_ARRAY_BUFFER,n,e.STATIC_DRAW)})),r}function zt(e,t){return $t(e,t,(function(){return e.createTexture()}),"Unable to create WebGLTexture.")}function Wt(e,t){var n=U().getNumber("WEBGL_MAX_TEXTURE_SIZE");if(e<=0||t<=0){var r="["+e+"x"+t+"]";throw new Error("Requested texture size "+r+" is invalid.")}if(e>n||t>n)throw r="["+e+"x"+t+"]",new Error("Requested texture size "+r+" greater than WebGL maximum on this browser / GPU ["+n+"x"+n+"].")}function Ut(e,t){return $t(e,t,(function(){return e.createFramebuffer()}),"Unable to create WebGLFramebuffer.")}function Vt(e,t,n,r,o,i,a,s){var u=e.getAttribLocation(n,r);return-1!==u&&(_t(e,t,(function(){return e.bindBuffer(e.ARRAY_BUFFER,o)})),_t(e,t,(function(){return e.vertexAttribPointer(u,i,e.FLOAT,!1,a,s)})),_t(e,t,(function(){return e.enableVertexAttribArray(u)})),!0)}function Gt(e,t,n,r){Jt(e,r),_t(e,t,(function(){return e.activeTexture(e.TEXTURE0+r)})),_t(e,t,(function(){return e.bindTexture(e.TEXTURE_2D,n)}))}function Ht(e,t,n,r){return $t(e,t,(function(){return e.getUniformLocation(n,r)}),'uniform "'+r+'" not present in program.')}function jt(e,t,n){return e.getUniformLocation(t,n)}function qt(e,t,n,r,o,i){_t(e,t,(function(){return Gt(e,t,r,i)})),_t(e,t,(function(){return e.uniform1i(o,i)}))}function Kt(e,t,n,r){_t(e,t,(function(){return e.bindFramebuffer(e.FRAMEBUFFER,r)})),_t(e,t,(function(){return e.framebufferTexture2D(e.FRAMEBUFFER,e.COLOR_ATTACHMENT0,e.TEXTURE_2D,n,0)}))}function Xt(e,t,n){_t(e,t,(function(){return e.bindFramebuffer(e.FRAMEBUFFER,n)})),_t(e,t,(function(){return e.framebufferTexture2D(e.FRAMEBUFFER,e.COLOR_ATTACHMENT0,e.TEXTURE_2D,null,0)}))}function Qt(e){var t=e.checkFramebufferStatus(e.FRAMEBUFFER);if(t!==e.FRAMEBUFFER_COMPLETE)throw new Error("Error binding framebuffer: "+Yt(e,t))}function Yt(e,t){switch(t){case e.FRAMEBUFFER_INCOMPLETE_ATTACHMENT:return"FRAMEBUFFER_INCOMPLETE_ATTACHMENT";case e.FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT:return"FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT";case e.FRAMEBUFFER_INCOMPLETE_DIMENSIONS:return"FRAMEBUFFER_INCOMPLETE_DIMENSIONS";case e.FRAMEBUFFER_UNSUPPORTED:return"FRAMEBUFFER_UNSUPPORTED";default:return"unknown error "+t}}function $t(e,t,n,r){var o=_t(e,t,(function(){return n()}));if(null==o)throw new Error(r);return o}function Jt(e,t){var n=e.MAX_COMBINED_TEXTURE_IMAGE_UNITS-1,r=t+e.TEXTURE0;if(r<e.TEXTURE0||r>n)throw new Error("textureUnit must be in [gl.TEXTURE0, gl.TEXTURE"+n+"].")}function Zt(e,t){return void 0===t&&(t=2),oe(e.slice(0,e.length-t))}function en(e){if(0===e.length)throw Error("Cannot get rows and columns of an empty shape array.");return[e.length>1?e[e.length-2]:1,e[e.length-1]]}function tn(e){var t=[1,1,1];return 0===e.length||1===e.length&&1===e[0]||(t=[Zt(e)].concat(en(e))),t}function nn(e,t){var n;void 0===t&&(t=!1);var r=U().getNumber("WEBGL_MAX_TEXTURE_SIZE");if(t&&(r*=2,1===(e=e.map((function(t,n){return n>=e.length-2?J(e[n]):e[n]}))).length&&(e=[2,e[0]])),2!==e.length){var o=pe(e);e=o.newShape}var i=oe(e);if(e.length<=1&&i<=r)return[1,i];if(2===e.length&&e[0]<=r&&e[1]<=r)return e;if(3===e.length&&e[0]*e[1]<=r&&e[2]<=r)return[e[0]*e[1],e[2]];if(3===e.length&&e[0]<=r&&e[1]*e[2]<=r)return[e[0],e[1]*e[2]];if(4===e.length&&e[0]*e[1]*e[2]<=r&&e[3]<=r)return[e[0]*e[1]*e[2],e[3]];if(4===e.length&&e[0]<=r&&e[1]*e[2]*e[3]<=r)return[e[0],e[1]*e[2]*e[3]];if(t){var a=Zt(e),s=2,u=2;return e.length&&(s=(n=en(e))[0],u=n[1]),ue(i=a*(s/2)*(u/2)).map((function(e){return 2*e}))}return ue(i)}function rn(e){return e%2==0}function on(e,t){if(ie(e=e.slice(-2),t=t.slice(-2)))return!0;if(!e.length||!t.length)return!0;if(0===e[0]||0===e[1]||0===t[0]||0===t[1])return!0;if(e.length!==t.length){var n=e.slice(-1)[0],r=t.slice(-1)[0];if(n===r)return!0;if(rn(n)&&rn(r)&&(1===e[0]||1===t[0]))return!0}return e[1]===t[1]&&rn(e[0])&&rn(t[0])}function an(e){if(null==Dt){var t=yt(e);Dt=t.getParameter(t.MAX_TEXTURE_SIZE)}return Dt}function sn(e){if(null==Ft){var t=yt(e);Ft=t.getParameter(t.MAX_TEXTURE_IMAGE_UNITS)}return Math.min(16,Ft)}function un(e){if(0===e)return 0;var t=yt(e);return cn(t,"EXT_disjoint_timer_query_webgl2")&&2===e?2:cn(t,"EXT_disjoint_timer_query")?1:0}function cn(e,t){return null!=e.getExtension(t)}function ln(e){try{if(null!=yt(e))return!0}catch(e){return!1}return!1}function dn(e){if(0===e)return!1;var t=yt(e);if(1===e){if(!cn(t,"OES_texture_float"))return!1}else if(!cn(t,"EXT_color_buffer_float"))return!1;return pn(t)}function hn(e){if(0===e)return!1;var t=yt(e);if(1!==e){if(cn(t,"EXT_color_buffer_float"))return pn(t);if(cn(t,"EXT_color_buffer_half_float")){var n=t.getExtension("EXT_color_buffer_half_float");return function(e,t){var n=kt(e,t),r=e.createTexture();e.bindTexture(e.TEXTURE_2D,r),e.texImage2D(e.TEXTURE_2D,0,n.internalFormatHalfFloat,1,1,0,n.textureFormatFloat,n.textureTypeHalfFloat,null);var o=e.createFramebuffer();e.bindFramebuffer(e.FRAMEBUFFER,o),e.framebufferTexture2D(e.FRAMEBUFFER,e.COLOR_ATTACHMENT0,e.TEXTURE_2D,r,0);var i=e.checkFramebufferStatus(e.FRAMEBUFFER)===e.FRAMEBUFFER_COMPLETE;return e.bindTexture(e.TEXTURE_2D,null),e.bindFramebuffer(e.FRAMEBUFFER,null),e.deleteTexture(r),e.deleteFramebuffer(o),i}(t,n)}return!1}return!!cn(t,"OES_texture_float")&&!!cn(t,"WEBGL_color_buffer_float")&&pn(t)}function pn(e){var t=kt(e),n=e.createTexture();e.bindTexture(e.TEXTURE_2D,n),e.texImage2D(e.TEXTURE_2D,0,t.internalFormatFloat,1,1,0,t.textureFormatFloat,t.textureTypeFloat,null);var r=e.createFramebuffer();e.bindFramebuffer(e.FRAMEBUFFER,r),e.framebufferTexture2D(e.FRAMEBUFFER,e.COLOR_ATTACHMENT0,e.TEXTURE_2D,n,0);var o=e.checkFramebufferStatus(e.FRAMEBUFFER)===e.FRAMEBUFFER_COMPLETE;return e.bindTexture(e.TEXTURE_2D,null),e.bindFramebuffer(e.FRAMEBUFFER,null),e.deleteTexture(n),e.deleteFramebuffer(r),o}function fn(e){return 2===e&&null!=yt(e).fenceSync}var mn=Object.freeze({callAndCheck:_t,canBeRepresented:Et,getWebGLErrorMessage:It,getExtensionOrThrow:Rt,createVertexShader:St,createFragmentShader:Tt,createProgram:Bt,linkProgram:Ot,validateProgram:Mt,createStaticVertexBuffer:Pt,createStaticIndexBuffer:Lt,getNumChannels:function(){return 2===U().getNumber("WEBGL_VERSION")?1:4},createTexture:zt,validateTextureSize:Wt,createFramebuffer:Ut,bindVertexBufferToProgramAttribute:Vt,bindTextureUnit:Gt,unbindTextureUnit:function(e,t,n){Jt(e,n),_t(e,t,(function(){return e.activeTexture(e.TEXTURE0+n)})),_t(e,t,(function(){return e.bindTexture(e.TEXTURE_2D,null)}))},getProgramUniformLocationOrThrow:Ht,getProgramUniformLocation:jt,bindTextureToProgramUniformSampler:qt,bindCanvasToFramebuffer:function(e,t){_t(e,t,(function(){return e.bindFramebuffer(e.FRAMEBUFFER,null)})),_t(e,t,(function(){return e.viewport(0,0,e.canvas.width,e.canvas.height)})),_t(e,t,(function(){return e.scissor(0,0,e.canvas.width,e.canvas.height)}))},bindColorTextureToFramebuffer:Kt,unbindColorTextureFromFramebuffer:Xt,validateFramebuffer:Qt,getFramebufferErrorMessage:Yt,getBatchDim:Zt,getRowsCols:en,getShapeAs3D:tn,getTextureShapeFromLogicalShape:nn,isReshapeFree:on,getWebGLMaxTextureSize:an,resetMaxTextureSize:function(){Dt=null},resetMaxTexturesInShader:function(){Ft=null},getMaxTexturesInShader:sn,getWebGLDisjointQueryTimerVersion:un,hasExtension:cn,isWebGLVersionEnabled:ln,isCapableOfRenderingToFloatTexture:dn,isDownloadFloatTextureEnabled:hn,isWebGLFenceEnabled:fn}),vn=U();function gn(e){U().getBool("DEPRECATION_WARNINGS_ENABLED")&&console.warn(e+" You can disable deprecation warnings with tf.disableDeprecationWarnings().")}function bn(e,t){return dt.tidy(e,t)}function An(e){st(e).forEach((function(e){return e.dispose()}))}function yn(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];U().getBool("IS_TEST")||console.warn.apply(console,e)}function xn(e,t){var n=e;if(Ae(e))return"string"===t?[]:[e.length];if(!Array.isArray(e))return[];for(var r=[];Array.isArray(n)||Ae(n)&&"string"!==t;)r.push(n.length),n=n[0];return Array.isArray(e)&&U().getBool("TENSORLIKE_CHECK_SHAPE_CONSISTENCY")&&function e(t,n,r){if(r=r||[],Array.isArray(t)||Ae(t)){ee(n.length>0,(function(){return"Element arr["+r.join("][")+"] should be a primitive, but is an array of "+t.length+" elements"})),ee(t.length===n[0],(function(){return"Element arr["+r.join("][")+"] should have "+n[0]+" elements, but has "+t.length+" elements"}));for(var o=n.slice(1),i=0;i<t.length;++i)e(t[i],o,r.concat(i))}else ee(0===n.length,(function(){return"Element arr["+r.join("][")+"] is a primitive, but should be an array/TypedArray of "+n[0]+" elements"}))}(e,r,[]),r}function Cn(e,t,n,r){if(null!=e&&("numeric"!==e&&e!==t||"numeric"===e&&"string"===t))throw new Error("Argument '"+n+"' passed to '"+r+"' must be "+e+" tensor, but got "+t+" tensor")}function wn(e,t,n,r){if(void 0===r&&(r="numeric"),e instanceof Xe)return Cn(r,e.dtype,t,n),e;var o=_e(e);if("string"!==o&&["bool","int32","float32"].indexOf(r)>=0&&(o=r),Cn(r,o,t,n),null==e||!Ae(e)&&!Array.isArray(e)&&"number"!=typeof e&&"boolean"!=typeof e&&"string"!=typeof e){var i=null==e?"null":e.constructor.name;throw new Error("Argument '"+t+"' passed to '"+n+"' must be a Tensor or TensorLike, but got '"+i+"'")}var a=xn(e,o);Ae(e)||Array.isArray(e)||(e=[e]);var s="string"!==o?Se(e,o,U().getBool("DEBUG")):re(e,[],!0);return dt.makeTensor(s,a,o)}function kn(e,t,n,r){if(void 0===r&&(r="numeric"),!Array.isArray(e))throw new Error("Argument "+t+" passed to "+n+" must be a `Tensor[]` or `TensorLike[]`");return e.map((function(e,r){return wn(e,t+"["+r+"]",n)}),r)}function _n(e,t){for(var n=0;n<e.length;++n)if(e[e.length-n-1]!==t-1-n)return!1;return!0}function En(e,t,n){for(var r=e.length+t.length,o=[],i=0,a=0,s=0;s<r;s++)-1===n.indexOf(s)?o.push(e[i++]):o.push(t[a++]);return o}function In(e,t){for(var n=[],r=e.length,o=0;o<r;o++)-1===t.indexOf(o)&&n.push(e[o]);return[n,t.map((function(t){return e[t]}))]}function Rn(e,t){return En(e,t.map((function(e){return 1})),t)}function Sn(e,t,n){ee(_n(t,n),(function(){return e+" supports only inner-most axes for now. Got axes "+t+" and rank-"+n+" input."}))}function Tn(e,t){if(_n(e,t))return null;for(var n=[],r=0;r<t;++r)-1===e.indexOf(r)&&n.push(r);return e.forEach((function(e){return n.push(e)})),n}function Dn(e){return e.map((function(e,t){return[t,e]})).sort((function(e,t){return e[1]-t[1]})).map((function(e){return e[0]}))}function Fn(e,t){for(var n=[],r=t-e;r<t;++r)n.push(r);return n}function Nn(e,t){var n=e[0].length;e.forEach((function(e,t){ee(e.length===n,(function(){return"Error in concat"+n+"D: rank of tensors["+t+"] must be the same as the rank of the rest ("+n+")"}))})),ee(t>=0&&t<n,(function(){return"Error in concat"+n+"D: axis must be between 0 and "+(n-1)+"."}));var r=e[0];e.forEach((function(e,o){for(var i=0;i<n;i++)ee(i===t||e[i]===r[i],(function(){return"Error in concat"+n+"D: Shape of tensors["+o+"] ("+e+") does not match the shape of the rest ("+r+") along the non-concatenated axis "+o+"."}))}))}function Bn(e,t){for(var n=e[0].slice(),r=1;r<e.length;r++)n[t]+=e[r][t];return n}function On(e){var t=Object.keys(e);if(1!==t.length)throw new Error("Please provide an object with a single key (operation name) mapping to a function. Got an object with "+t.length+" keys.");var n=t[0],r=e[n];n.endsWith("_")&&(n=n.substring(0,n.length-1));var o=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];dt.startScope(n);try{var o=r.apply(void 0,e);return o instanceof Promise&&console.error("Cannot return a Promise inside of tidy."),dt.endScope(o),o}catch(e){throw dt.endScope(null),e}};return Object.defineProperty(o,"name",{value:n,configurable:!0}),o}vn.registerFlag("HAS_WEBGL",(function(){return vn.getNumber("WEBGL_VERSION")>0})),vn.registerFlag("WEBGL_VERSION",(function(){return ln(2)?2:ln(1)?1:0})),vn.registerFlag("WEBGL_BUFFER_SUPPORTED",(function(){return 2===vn.get("WEBGL_VERSION")})),vn.registerFlag("WEBGL_CPU_FORWARD",(function(){return!0})),vn.registerFlag("WEBGL_FORCE_F16_TEXTURES",(function(){return!1})),vn.registerFlag("WEBGL_PACK",(function(){return vn.getBool("HAS_WEBGL")})),vn.registerFlag("WEBGL_PACK_NORMALIZATION",(function(){return vn.getBool("WEBGL_PACK")})),vn.registerFlag("WEBGL_PACK_CLIP",(function(){return vn.getBool("WEBGL_PACK")})),vn.registerFlag("WEBGL_PACK_DEPTHWISECONV",(function(){return!1})),vn.registerFlag("WEBGL_PACK_BINARY_OPERATIONS",(function(){return vn.getBool("WEBGL_PACK")})),vn.registerFlag("WEBGL_PACK_UNARY_OPERATIONS",(function(){return vn.getBool("WEBGL_PACK")})),vn.registerFlag("WEBGL_PACK_ARRAY_OPERATIONS",(function(){return vn.getBool("WEBGL_PACK")})),vn.registerFlag("WEBGL_PACK_IMAGE_OPERATIONS",(function(){return vn.getBool("WEBGL_PACK")})),vn.registerFlag("WEBGL_PACK_REDUCE",(function(){return vn.getBool("WEBGL_PACK")})),vn.registerFlag("WEBGL_LAZILY_UNPACK",(function(){return vn.getBool("WEBGL_PACK")})),vn.registerFlag("WEBGL_CONV_IM2COL",(function(){return vn.getBool("WEBGL_PACK")})),vn.registerFlag("WEBGL_MAX_TEXTURE_SIZE",(function(){return an(vn.getNumber("WEBGL_VERSION"))})),vn.registerFlag("WEBGL_MAX_TEXTURES_IN_SHADER",(function(){return sn(vn.getNumber("WEBGL_VERSION"))})),vn.registerFlag("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION",(function(){var e=vn.getNumber("WEBGL_VERSION");return 0===e?0:un(e)})),vn.registerFlag("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE",(function(){return vn.getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")>0&&(e=navigator.userAgent||navigator.vendor||window.opera,!(/(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows ce|xda|xiino/i.test(e)||/1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\/|capi|ccwa|cdm\-|cell|chtm|cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|ds(12|\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\-|_)|g1 u|g560|gene|gf\-5|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|hi(pt|ta)|hp( i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(20|go|ma)|i230|iac( |\-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc\-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|\-[a-w])|libw|lynx|m1\-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\-2|po(ck|rt|se)|prox|psio|pt\-g|qa\-a|qc(07|12|21|32|60|\-[2-7]|i\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\-|oo|p\-)|sdk\/|se(c(\-|0|1)|47|mc|nd|ri)|sgh\-|shar|sie(\-|m)|sk\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\-|v\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\-|tdg\-|tel(i|m)|tim\-|t\-mo|to(pl|sh)|ts(70|m\-|m3|m5)|tx\-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\-|your|zeto|zte\-/i.test(e.substr(0,4))));var e})),vn.registerFlag("WEBGL_RENDER_FLOAT32_CAPABLE",(function(){return dn(vn.getNumber("WEBGL_VERSION"))})),vn.registerFlag("WEBGL_RENDER_FLOAT32_ENABLED",(function(){return!vn.getBool("WEBGL_FORCE_F16_TEXTURES")&&vn.getBool("WEBGL_RENDER_FLOAT32_CAPABLE")})),vn.registerFlag("WEBGL_DOWNLOAD_FLOAT_ENABLED",(function(){return hn(vn.getNumber("WEBGL_VERSION"))})),vn.registerFlag("WEBGL_FENCE_API_ENABLED",(function(){return fn(vn.getNumber("WEBGL_VERSION"))})),vn.registerFlag("WEBGL_SIZE_UPLOAD_UNIFORM",(function(){return vn.getBool("WEBGL_RENDER_FLOAT32_ENABLED")?4:0})),Ke=gn;var Mn=On({complex_:function(e,t){var n=wn(e,"real","complex"),r=wn(t,"imag","complex");return te(n.shape,r.shape,"real and imag shapes, "+n.shape+" and "+r.shape+", must match in call to tf.complex()."),dt.runKernelFunc((function(e){return e.complex(n,r)}),{$real:n,$imag:r})}}),Pn=On({real_:function(e){var t=wn(e,"input","real");return dt.runKernelFunc((function(e){return e.real(t)}),{$input:t})}}),Ln=On({imag_:function(e){var t=wn(e,"input","imag");return dt.runKernelFunc((function(e){return e.imag(t)}),{$input:t})}});function zn(e,t,n){return Wn(e,t,xn(e,n),n)}function Wn(e,t,n,r){if(null==r&&(r=_e(e)),"complex64"===r)throw new Error("Cannot construct a complex64 tensor directly. Please use tf.complex(real, imag).");if(!Ae(e)&&!Array.isArray(e)&&"number"!=typeof e&&"boolean"!=typeof e&&"string"!=typeof e)throw new Error("values passed to tensor(values) must be a number/boolean/string or an array of numbers/booleans/strings, or a TypedArray");if(null!=t){Be(t);var o=oe(t),i=oe(n);ee(o===i,(function(){return"Based on the provided shape, ["+t+"], the tensor should have "+o+" values but has "+i}));for(var a=0;a<n.length;++a){var s=n[a],u=a!==n.length-1||s!==oe(t.slice(a));ee(n[a]===t[a]||!u,(function(){return"Error creating a new Tensor. Inferred shape ("+n+") does not match the provided shape ("+t+"). "}))}}return Ae(e)||Array.isArray(e)||(e=[e]),t=t||n,e="string"!==r?Se(e,r,U().getBool("DEBUG")):re(e,[],!0),dt.makeTensor(e,t,r)}function Un(e,t){if((Ae(e)&&"string"!==t||Array.isArray(e))&&"complex64"!==t)throw new Error("Error creating a new Scalar: value must be a primitive (number|boolean|string)");if("string"===t&&Ae(e)&&!(e instanceof Uint8Array))throw new Error("When making a scalar from encoded string, the value must be `Uint8Array`.");return Wn(e,[],[],t)}function Vn(e,t){ne(e);var n=xn(e,t);if(1!==n.length)throw new Error("tensor1d() requires values to be a flat/TypedArray");return Wn(e,null,n,t)}function Gn(e,t,n){if(ne(e),null!=t&&2!==t.length)throw new Error("tensor2d() requires shape to have two numbers");var r=xn(e,n);if(2!==r.length&&1!==r.length)throw new Error("tensor2d() requires values to be number[][] or flat/TypedArray");if(1===r.length&&null==t)throw new Error("tensor2d() requires shape to be provided when `values` are a flat/TypedArray");return Wn(e,t,r,n)}function Hn(e,t,n){if(ne(e),null!=t&&3!==t.length)throw new Error("tensor3d() requires shape to have three numbers");var r=xn(e,n);if(3!==r.length&&1!==r.length)throw new Error("tensor3d() requires values to be number[][][] or flat/TypedArray");if(1===r.length&&null==t)throw new Error("tensor3d() requires shape to be provided when `values` are a flat array");return Wn(e,t,r,n)}function jn(e,t,n){if(ne(e),null!=t&&4!==t.length)throw new Error("tensor4d() requires shape to have four numbers");var r=xn(e,n);if(4!==r.length&&1!==r.length)throw new Error("tensor4d() requires values to be number[][][][] or flat/TypedArray");if(1===r.length&&null==t)throw new Error("tensor4d() requires shape to be provided when `values` are a flat array");return Wn(e,t,r,n)}function qn(e,t){if(void 0===t&&(t="float32"),"complex64"===t){var n=qn(e,"float32"),r=Kn(e,"float32");return Mn(n,r)}var o=De(oe(e),t);return dt.makeTensor(o,e,t)}function Kn(e,t){if(void 0===t&&(t="float32"),"complex64"===t){var n=Kn(e,"float32"),r=Kn(e,"float32");return Mn(n,r)}var o=Fe(oe(e),t);return dt.makeTensor(o,e,t)}function Xn(e,t,n){return dt.runKernelFunc((function(r){return r.fill(e,t,n)}),{})}function Qn(e,t,n,r){if(void 0===n&&(n=1),void 0===r&&(r="float32"),0===n)throw new Error("Cannot have a step of zero");if(e===t||e<t&&n<0||t<e&&n>1)return Kn([0],r);var o=Fe(Math.abs(Math.ceil((t-e)/n)),r);t<e&&1===n&&(n=-1),o[0]=e;for(var i=1;i<o.length;i++)o[i]=o[i-1]+n;return Vn(o,r)}var Yn=On({onesLike_:function(e){var t=wn(e,"x","onesLike");if("complex64"===t.dtype){var n=Yn(Pn(t)),r=$n(Ln(t));return Mn(n,r)}return dt.runKernelFunc((function(e){return e.onesLike(t)}),{$x:t},(function(e,t){return{$x:function(){return $n(e)}}}))}}),$n=On({zerosLike_:function(e){var t=wn(e,"x","zerosLike");return dt.runKernelFunc((function(e){return e.zerosLike(t)}),{$x:t},(function(e,t){return{$x:function(){return $n(e)}}}))}}),Jn=On({concat_:function(e,t){void 0===t&&(t=0),ee(e.length>=1,(function(){return"Pass at least one tensor to concat"}));var n=kn(e,"tensors","concat");"complex64"===n[0].dtype&&n.forEach((function(e){if("complex64"!==e.dtype)throw new Error("Cannot concatenate complex64 tensors with a tensor\n          with dtype "+e.dtype+". ")})),t=he(t,n[0].shape)[0];var r=Bn(n.map((function(e){return e.shape})),t);if(0===oe(r))return zn([],r);if(1===(n=n.filter((function(e){return e.size>0}))).length)return n[0];var o=n.map((function(e){return e.shape}));Nn(o,t);var i=n,a={axis:t};return dt.runKernelFunc((function(e){return e.concat(n,t)}),i,(function(e){var n=o.map((function(e){return e[t]}));return rr(e,n,t).map((function(e){return function(){return e}}))}),"Concat",a)}}),Zn=On({concat1d_:function(e){return Jn(e,0)}}),er=On({concat2d_:function(e,t){return Jn(e,t)}}),tr=On({concat3d_:function(e,t){return Jn(e,t)}}),nr=On({concat4d_:function(e,t){return Jn(e,t)}}),rr=On({split_:function(e,t,n){void 0===n&&(n=0);var r,o=wn(e,"x","split");return n=he(n,o.shape)[0],"number"==typeof t?(ee(o.shape[n]%t==0,(function(){return"Number of splits must evenly divide the axis."})),r=new Array(t).fill(o.shape[n]/t)):(ee(o.shape[n]===t.reduce((function(e,t){return e+t})),(function(){return"The sum of sizes must match the size of the axis dimension."})),r=t),dt.runKernelFunc((function(e){return e.split(o,r,n)}),{$x:o},(function(e){return{$x:function(){return Jn(e,n)}}}))}});function or(e,t){return e(t={exports:{}},t.exports),t.exports}"undefined"!=typeof globalThis?globalThis:"undefined"!=typeof window?window:"undefined"!=typeof global?global:"undefined"!=typeof self&&self;var ir=or((function(e){!function(e,t,n){function r(e){var t,n=this,r=(t=4022871197,function(e){e=e.toString();for(var n=0;n<e.length;n++){var r=.02519603282416938*(t+=e.charCodeAt(n));r-=t=r>>>0,t=(r*=t)>>>0,t+=4294967296*(r-=t)}return 2.3283064365386963e-10*(t>>>0)});n.next=function(){var e=2091639*n.s0+2.3283064365386963e-10*n.c;return n.s0=n.s1,n.s1=n.s2,n.s2=e-(n.c=0|e)},n.c=1,n.s0=r(" "),n.s1=r(" "),n.s2=r(" "),n.s0-=r(e),n.s0<0&&(n.s0+=1),n.s1-=r(e),n.s1<0&&(n.s1+=1),n.s2-=r(e),n.s2<0&&(n.s2+=1),r=null}function o(e,t){return t.c=e.c,t.s0=e.s0,t.s1=e.s1,t.s2=e.s2,t}function i(e,t){var n=new r(e),i=t&&t.state,a=n.next;return a.int32=function(){return 4294967296*n.next()|0},a.double=function(){return a()+11102230246251565e-32*(2097152*a()|0)},a.quick=a,i&&("object"==typeof i&&o(i,n),a.state=function(){return o(n,{})}),a}t&&t.exports?t.exports=i:this.alea=i}(0,e)})),ar=or((function(e){!function(e,t,n){function r(e){var t=this,n="";t.x=0,t.y=0,t.z=0,t.w=0,t.next=function(){var e=t.x^t.x<<11;return t.x=t.y,t.y=t.z,t.z=t.w,t.w^=t.w>>>19^e^e>>>8},e===(0|e)?t.x=e:n+=e;for(var r=0;r<n.length+64;r++)t.x^=0|n.charCodeAt(r),t.next()}function o(e,t){return t.x=e.x,t.y=e.y,t.z=e.z,t.w=e.w,t}function i(e,t){var n=new r(e),i=t&&t.state,a=function(){return(n.next()>>>0)/4294967296};return a.double=function(){do{var e=((n.next()>>>11)+(n.next()>>>0)/4294967296)/(1<<21)}while(0===e);return e},a.int32=n.next,a.quick=a,i&&("object"==typeof i&&o(i,n),a.state=function(){return o(n,{})}),a}t&&t.exports?t.exports=i:this.xor128=i}(0,e)})),sr=or((function(e){!function(e,t,n){function r(e){var t=this,n="";t.next=function(){var e=t.x^t.x>>>2;return t.x=t.y,t.y=t.z,t.z=t.w,t.w=t.v,(t.d=t.d+362437|0)+(t.v=t.v^t.v<<4^e^e<<1)|0},t.x=0,t.y=0,t.z=0,t.w=0,t.v=0,e===(0|e)?t.x=e:n+=e;for(var r=0;r<n.length+64;r++)t.x^=0|n.charCodeAt(r),r==n.length&&(t.d=t.x<<10^t.x>>>4),t.next()}function o(e,t){return t.x=e.x,t.y=e.y,t.z=e.z,t.w=e.w,t.v=e.v,t.d=e.d,t}function i(e,t){var n=new r(e),i=t&&t.state,a=function(){return(n.next()>>>0)/4294967296};return a.double=function(){do{var e=((n.next()>>>11)+(n.next()>>>0)/4294967296)/(1<<21)}while(0===e);return e},a.int32=n.next,a.quick=a,i&&("object"==typeof i&&o(i,n),a.state=function(){return o(n,{})}),a}t&&t.exports?t.exports=i:this.xorwow=i}(0,e)})),ur=or((function(e){!function(e,t,n){function r(e){var t=this;t.next=function(){var e,n,r=t.x,o=t.i;return e=r[o],n=(e^=e>>>7)^e<<24,n^=(e=r[o+1&7])^e>>>10,n^=(e=r[o+3&7])^e>>>3,n^=(e=r[o+4&7])^e<<7,e=r[o+7&7],n^=(e^=e<<13)^e<<9,r[o]=n,t.i=o+1&7,n},function(e,t){var n,r=[];if(t===(0|t))r[0]=t;else for(t=""+t,n=0;n<t.length;++n)r[7&n]=r[7&n]<<15^t.charCodeAt(n)+r[n+1&7]<<13;for(;r.length<8;)r.push(0);for(n=0;n<8&&0===r[n];++n);for(8==n?r[7]=-1:r[n],e.x=r,e.i=0,n=256;n>0;--n)e.next()}(t,e)}function o(e,t){return t.x=e.x.slice(),t.i=e.i,t}function i(e,t){null==e&&(e=+new Date);var n=new r(e),i=t&&t.state,a=function(){return(n.next()>>>0)/4294967296};return a.double=function(){do{var e=((n.next()>>>11)+(n.next()>>>0)/4294967296)/(1<<21)}while(0===e);return e},a.int32=n.next,a.quick=a,i&&(i.x&&o(i,n),a.state=function(){return o(n,{})}),a}t&&t.exports?t.exports=i:this.xorshift7=i}(0,e)})),cr=or((function(e){!function(e,t,n){function r(e){var t=this;t.next=function(){var e,n,r=t.w,o=t.X,i=t.i;return t.w=r=r+1640531527|0,n=o[i+34&127],e=o[i=i+1&127],n^=n<<13,e^=e<<17,n^=n>>>15,e^=e>>>12,n=o[i]=n^e,t.i=i,n+(r^r>>>16)|0},function(e,t){var n,r,o,i,a,s=[],u=128;for(t===(0|t)?(r=t,t=null):(t+="\0",r=0,u=Math.max(u,t.length)),o=0,i=-32;i<u;++i)t&&(r^=t.charCodeAt((i+32)%t.length)),0===i&&(a=r),r^=r<<10,r^=r>>>15,r^=r<<4,r^=r>>>13,i>=0&&(a=a+1640531527|0,o=0==(n=s[127&i]^=r+a)?o+1:0);for(o>=128&&(s[127&(t&&t.length||0)]=-1),o=127,i=512;i>0;--i)r=s[o+34&127],n=s[o=o+1&127],r^=r<<13,n^=n<<17,r^=r>>>15,n^=n>>>12,s[o]=r^n;e.w=a,e.X=s,e.i=o}(t,e)}function o(e,t){return t.i=e.i,t.w=e.w,t.X=e.X.slice(),t}function i(e,t){null==e&&(e=+new Date);var n=new r(e),i=t&&t.state,a=function(){return(n.next()>>>0)/4294967296};return a.double=function(){do{var e=((n.next()>>>11)+(n.next()>>>0)/4294967296)/(1<<21)}while(0===e);return e},a.int32=n.next,a.quick=a,i&&(i.X&&o(i,n),a.state=function(){return o(n,{})}),a}t&&t.exports?t.exports=i:this.xor4096=i}(0,e)})),lr=or((function(e){!function(e,t,n){function r(e){var t=this,n="";t.next=function(){var e=t.b,n=t.c,r=t.d,o=t.a;return e=e<<25^e>>>7^n,n=n-r|0,r=r<<24^r>>>8^o,o=o-e|0,t.b=e=e<<20^e>>>12^n,t.c=n=n-r|0,t.d=r<<16^n>>>16^o,t.a=o-e|0},t.a=0,t.b=0,t.c=-1640531527,t.d=1367130551,e===Math.floor(e)?(t.a=e/4294967296|0,t.b=0|e):n+=e;for(var r=0;r<n.length+20;r++)t.b^=0|n.charCodeAt(r),t.next()}function o(e,t){return t.a=e.a,t.b=e.b,t.c=e.c,t.d=e.d,t}function i(e,t){var n=new r(e),i=t&&t.state,a=function(){return(n.next()>>>0)/4294967296};return a.double=function(){do{var e=((n.next()>>>11)+(n.next()>>>0)/4294967296)/(1<<21)}while(0===e);return e},a.int32=n.next,a.quick=a,i&&("object"==typeof i&&o(i,n),a.state=function(){return o(n,{})}),a}t&&t.exports?t.exports=i:this.tychei=i}(0,e)})),dr=or((function(e){!function(t,r){var o,i=this,a=256,s="random",u=r.pow(a,6),c=r.pow(2,52),l=2*c,d=255;function h(e,n,d){var h=[],g=m(function e(t,n){var r,o=[],i=typeof t;if(n&&"object"==i)for(r in t)try{o.push(e(t[r],n-1))}catch(e){}return o.length?o:"string"==i?t:t+"\0"}((n=1==n?{entropy:!0}:n||{}).entropy?[e,v(t)]:null==e?function(){try{var e;return o&&(e=o.randomBytes)?e=e(a):(e=new Uint8Array(a),(i.crypto||i.msCrypto).getRandomValues(e)),v(e)}catch(e){var n=i.navigator,r=n&&n.plugins;return[+new Date,i,r,i.screen,v(t)]}}():e,3),h),b=new p(h),A=function(){for(var e=b.g(6),t=u,n=0;e<c;)e=(e+n)*a,t*=a,n=b.g(1);for(;e>=l;)e/=2,t/=2,n>>>=1;return(e+n)/t};return A.int32=function(){return 0|b.g(4)},A.quick=function(){return b.g(4)/4294967296},A.double=A,m(v(b.S),t),(n.pass||d||function(e,t,n,o){return o&&(o.S&&f(o,b),e.state=function(){return f(b,{})}),n?(r[s]=e,t):e})(A,g,"global"in n?n.global:this==r,n.state)}function p(e){var t,n=e.length,r=this,o=0,i=r.i=r.j=0,s=r.S=[];for(n||(e=[n++]);o<a;)s[o]=o++;for(o=0;o<a;o++)s[o]=s[i=d&i+e[o%n]+(t=s[o])],s[i]=t;(r.g=function(e){for(var t,n=0,o=r.i,i=r.j,s=r.S;e--;)t=s[o=d&o+1],n=n*a+s[d&(s[o]=s[i=d&i+t])+(s[i]=t)];return r.i=o,r.j=i,n})(a)}function f(e,t){return t.i=e.i,t.j=e.j,t.S=e.S.slice(),t}function m(e,t){for(var n,r=e+"",o=0;o<r.length;)t[d&o]=d&(n^=19*t[d&o])+r.charCodeAt(o++);return v(t)}function v(e){return String.fromCharCode.apply(0,e)}if(r.seedrandom=h,m(r.random(),t),e.exports){e.exports=h;try{o=n(13)}catch(e){}}}([],Math)}));dr.alea=ir,dr.xor128=ar,dr.xorwow=sr,dr.xorshift7=ur,dr.xor4096=cr,dr.tychei=lr;var hr=dr.alea,pr=function(){function e(e,t,n,r,o){this.mean=e,this.stdDev=t,this.dtype=n,this.nextVal=NaN,this.truncated=r,this.truncated&&(this.upper=this.mean+2*this.stdDev,this.lower=this.mean-2*this.stdDev);var i=o||Math.random();this.random=hr(i.toString())}return e.prototype.nextValue=function(){if(!isNaN(this.nextVal)){var e=this.nextVal;return this.nextVal=NaN,e}for(var t,n,r=!1;!r;){var o=void 0,i=void 0,a=void 0;do{a=(o=2*this.random()-1)*o+(i=2*this.random()-1)*i}while(a>=1||0===a);var s=Math.sqrt(-2*Math.log(a)/a);t=this.mean+this.stdDev*o*s,n=this.mean+this.stdDev*i*s,this.truncated&&!this.isValidTruncated(t)||(r=!0)}return this.truncated&&!this.isValidTruncated(n)||(this.nextVal=this.convertValue(n)),this.convertValue(t)},e.prototype.convertValue=function(e){return null==this.dtype||"float32"===this.dtype?e:Math.round(e)},e.prototype.isValidTruncated=function(e){return e<=this.upper&&e>=this.lower},e}(),fr=function(){function e(e,t,n,r){this.alpha=e,this.beta=1/t,this.dtype=n;var o=r||Math.random();this.randu=hr(o.toString()),this.randn=new pr(0,1,n,!1,this.randu()),this.d=e<1?e+2/3:e-1/3,this.c=1/Math.sqrt(9*this.d)}return e.prototype.nextValue=function(){for(var e,t,n,r,o,i;;){do{r=this.randn.nextValue(),i=1+this.c*r}while(i<=0);if(i*=i*i,t=1-.331*(e=r*r)*e,n=.5*e+this.d*(1-i+Math.log(i)),(o=this.randu())<t||Math.log(o)<n)break}return i=1/this.beta*this.d*i,this.alpha<1&&(i*=Math.pow(this.randu(),1/this.alpha)),this.convertValue(i)},e.prototype.convertValue=function(e){return"float32"===this.dtype?e:Math.round(e)},e}(),mr=function(){function e(e,t,n,r){var o=this;if(void 0===e&&(e=0),void 0===t&&(t=1),this.canReturnFloat=function(){return null==o.dtype||"float32"===o.dtype},this.min=e,this.range=t-e,this.dtype=n,null==r&&(r=Math.random()),"number"==typeof r&&(r=r.toString()),!this.canReturnFloat()&&this.range<=1)throw new Error("The difference between "+e+" - "+t+" <= 1 and dtype is not float");this.random=hr(r)}return e.prototype.convertValue=function(e){return this.canReturnFloat()?e:Math.round(e)},e.prototype.nextValue=function(){return this.convertValue(this.min+this.range*this.random())},e}();function vr(e,t,n){return void 0===t&&(t="float32"),t=t||"float32",Be(e),new He(e,t,n)}var gr=On({batchToSpaceND_:function(e,t,n){var r=wn(e,"x","batchToSpaceND"),o=t.reduce((function(e,t){return e*t}));return ee(r.rank>=1+t.length,(function(){return"input rank is "+r.rank+" but should be > than blockShape.length "+t.length})),ee(n.length===t.length,(function(){return"crops.length is "+n.length+" but should be equal to blockShape.length  "+t.length})),ee(r.shape[0]%o==0,(function(){return"input tensor batch is "+r.shape[0]+" but is not divisible by the product of the elements of blockShape "+t.join(" * ")+" === "+o})),dt.runKernelFunc((function(e){return e.batchToSpaceND(r,t,n)}),{$x:r},(function(e){return{$x:function(){return e.spaceToBatchND(t,n)}}}))}}),br=On({broadcastTo_:function(e,t){var n=wn(e,"broadcastTo","x"),r=n.shape;if(t.some((function(e){return!(e>0)||e%1!=0})))throw new Error("broadcastTo(): Invalid broadcast shape ["+t+"].");if(t.length<n.rank)throw new Error("broadcastTo(): shape.length="+t.length+" < input.rank="+n.rank+".");if(t.length>n.rank){for(var o=n.shape.slice();o.length<t.length;)o.unshift(1);n=n.reshape(o)}for(var i=Array.from(t),a=t.length-1;a>=0;a--)if(n.shape[a]===t[a])i[a]=1;else if(1!==n.shape[a])throw new Error("broadcastTo(): ["+r+"] cannot be broadcast to ["+t+"].");var s=i.map((function(e,t){return e>1?t:-1})).filter((function(e){return e>=0}));return 0===s.length?n.clone():dt.runKernelFunc((function(e){return e.tile(n,i)}),{input:n},(function(e){return{input:function(){return e.sum(s,!0)}}}))}}),Ar=On({cast_:function(e,t){var n=wn(e,"x","cast");if(!ge(t))throw new Error("Failed to cast to unknown dtype "+t);if("string"===t&&"string"!==n.dtype||"string"!==t&&"string"===n.dtype)throw new Error("Only strings can be casted to strings");var r={dtype:t};return dt.runKernelFunc((function(e){return e.cast(n,t)}),{x:n},(function(e){return{x:function(){return e.clone()}}}),"Cast",r)}}),yr=On({clone_:function(e){var t=wn(e,"x","clone",null);return dt.runKernelFunc((function(){return dt.makeTensorFromDataId(t.dataId,t.shape,t.dtype)}),{$x:t},(function(e){return{$x:function(){return e.toFloat()}}}))}}),xr=On({cumsum_:function(e,t,n,r){void 0===t&&(t=0),void 0===n&&(n=!1),void 0===r&&(r=!1);var o=wn(e,"x","cumsum"),i=Tn([t|=0],o.rank),a=o;null!=i&&(a=o.transpose(i));var s=Fn(1,o.rank)[0],u=dt.runKernelFunc((function(e){return e.cumsum(a,s,n,r)}),{permutedX:a},(function(e){return{permutedX:function(){return e.cumsum(t,n,!r)}}}));return null!=i&&(u=u.transpose(i)),u}}),Cr=On({depthToSpace_:function(e,t,n){void 0===n&&(n="NHWC");var r=wn(e,"x","depthToSpace"),o="NHWC"===n?r.shape[1]:r.shape[2],i="NHWC"===n?r.shape[2]:r.shape[3],a="NHWC"===n?r.shape[3]:r.shape[1];return ee(o*t>=0,(function(){return"Negative dimension size caused by overflow when multiplying\n      "+o+" and "+t+"  for depthToSpace with input shape\n      "+r.shape})),ee(i*t>=0,(function(){return"Negative dimension size caused by overflow when multiplying\n      "+i+" and "+t+" for depthToSpace with input shape\n          "+r.shape})),ee(a%(t*t)==0,(function(){return"Dimension size must be evenly divisible by "+t*t+" but is "+a+" for depthToSpace with input shape "+r.shape})),dt.runKernelFunc((function(e){return e.depthToSpace(r,t,n)}),{$x:r})}}),wr=On({expandDims_:function(e,t){void 0===t&&(t=0);var n=wn(e,"x","expandDims",null);ee(t<=n.rank,(function(){return"Axis must be <= rank of the tensor"}));var r=n.shape.slice();return t<0&&(ee(-(n.rank+1)<=t,(function(){return"Axis must be in the interval ["+-(n.rank+1)+", "+n.rank+"]"})),t=n.rank+t+1),r.splice(t,0,1),Mr(n,r)}}),kr=On({eye_:function(e,t,n,r){void 0===r&&(r="float32"),null==t&&(t=e);for(var o=vr([e,t],r),i=e<=t?e:t,a=0;a<i;++a)o.set(1,a,a);var s=o.toTensor().as2D(e,t);if(null==n)return s;if(1===n.length)return Wr(wr(s,0),[n[0],1,1]);if(2===n.length)return Wr(wr(wr(s,0),0),[n[0],n[1],1,1]);if(3===n.length)return Wr(wr(wr(wr(s,0),0),0),[n[0],n[1],n[2],1,1]);throw new Error("eye() currently supports only 1D and 2D batchShapes, but received "+n.length+"D.")}}),_r=On({multinomial_:function(e,t,n,r){void 0===r&&(r=!1);var o=wn(e,"logits","multinomial"),i=o.size,a=o.rank;if(i<2)throw new Error("Error in multinomial: you need at least 2 outcomes, but got "+i+".");if(a>2)throw new Error("Rank of probabilities must be 1 or 2, but is "+a);n=n||Math.random();var s=1===a?o.as2D(1,-1):o,u=dt.runKernelFunc((function(e){return e.multinomial(s,r,t,n)}),{logits2D:s});return 1===a?u.as1D():u}}),Er=On({oneHot_:function(e,t,n,r){if(void 0===n&&(n=1),void 0===r&&(r=0),t<2)throw new Error("Error in oneHot: depth must be >=2, but it is "+t);var o=wn(e,"indices","oneHot","int32"),i=o.shape.concat([t]);return o=o.flatten(),dt.runKernelFunc((function(e){return e.oneHot(o,t,n,r)}),{$indices:o},(function(e){return{$indices:function(){return Kn(o.shape,"float32")}}})).reshape(i)}}),Ir=On({pad_:function(e,t,n){void 0===n&&(n=0);var r=wn(e,"x","pad");if(0===r.rank)throw new Error("pad(scalar) is not defined. Pass non-scalar to pad");var o={paddings:t,constantValue:n};return dt.runKernelFunc((function(e){return e.pad(r,t,n)}),{x:r},(function(e){var n=t.map((function(e){return e[0]}));return{x:function(){return e.slice(n,r.shape)}}}),"PadV2",o)}}),Rr=On({pad1d_:function(e,t,n){return void 0===n&&(n=0),ee(2===t.length,(function(){return"Invalid number of paddings. Must be length of 2."})),Ir(e,[t],n)}}),Sr=On({pad2d_:function(e,t,n){return void 0===n&&(n=0),ee(2===t.length&&2===t[0].length&&2===t[1].length,(function(){return"Invalid number of paddings. Must be length of 2 each."})),Ir(e,t,n)}}),Tr=On({pad3d_:function(e,t,n){return void 0===n&&(n=0),ee(3===t.length&&2===t[0].length&&2===t[1].length&&2===t[2].length,(function(){return"Invalid number of paddings. Must be length of 2 each."})),Ir(e,t,n)}}),Dr=On({pad4d_:function(e,t,n){return void 0===n&&(n=0),ee(4===t.length&&2===t[0].length&&2===t[1].length&&2===t[2].length&&2===t[3].length,(function(){return"Invalid number of paddings. Must be length of 2 each."})),Ir(e,t,n)}}),Fr=On({rand_:function(e,t,n){var r=oe(e),o=null;if(null==n||"float32"===n)o=new Float32Array(r);else if("int32"===n)o=new Int32Array(r);else{if("bool"!==n)throw new Error("Unknown data type "+n);o=new Uint8Array(r)}for(var i=0;i<r;i++)o[i]=t();return dt.makeTensor(o,e,n)}}),Nr=On({randomNormal_:function(e,t,n,r,o){if(void 0===t&&(t=0),void 0===n&&(n=1),null!=r&&"bool"===r)throw new Error("Unsupported data type "+r);for(var i=new pr(t,n,r,!1,o),a=vr(e,r),s=0;s<a.values.length;s++)a.values[s]=i.nextValue();return a.toTensor()}}),Br=On({randomGamma_:function(e,t,n,r,o){if(void 0===n&&(n=1),void 0===r&&(r="float32"),null==n&&(n=1),null==r&&(r="float32"),"float32"!==r&&"int32"!==r)throw new Error("Unsupported data type "+r);for(var i=new fr(t,n,r,o),a=vr(e,r),s=0;s<a.values.length;s++)a.values[s]=i.nextValue();return a.toTensor()}}),Or=On({randomUniform_:function(e,t,n,r,o){void 0===t&&(t=0),void 0===n&&(n=1),void 0===r&&(r="float32");for(var i=vr(e,r),a=new mr(t,n,null,o),s=0;s<i.values.length;s++)i.values[s]=a.nextValue();return i.toTensor()}}),Mr=On({reshape_:function(e,t){var n=wn(e,"x","reshape",null);t=de(t,n.size),ee(n.size===oe(t),(function(){return"new shape and old shape must have the same number of elements."}));var r={shape:t};return dt.runKernelFunc((function(e){return e.reshape(n,t)}),{x:n},(function(e){return{x:function(){return e.reshape(n.shape)}}}),"Reshape",r)}}),Pr=On({spaceToBatchND_:function(e,t,n){var r=wn(e,"x","spaceToBatchND");return ee(r.rank>=1+t.length,(function(){return"input rank "+r.rank+" should be > than [blockShape] "+t.length})),ee(n.length===t.length,(function(){return"paddings.shape[0] "+n.length+" must be equal to [blockShape] "+t.length})),ee(r.shape.reduce((function(e,r,o){return o>0&&o<=t.length?e&&(r+n[o-1][0]+n[o-1][1])%t[o-1]==0:e}),!0),(function(){return"input spatial dimensions "+r.shape.slice(1)+" with paddings "+n.toString()+" must be divisible by blockShapes "+t.toString()})),dt.runKernelFunc((function(e){return e.spaceToBatchND(r,t,n)}),{$x:r},(function(e){return{$x:function(){return e.batchToSpaceND(t,n)}}}))}}),Lr=On({squeeze_:function(e,t){var n=wn(e,"x","squeeze");return Mr(n,pe(n.shape,t).newShape)}}),zr=On({stack_:function(e,t){void 0===t&&(t=0);var n=kn(e,"tensors","stack");if(ee(n.length>=1,(function(){return"Pass at least one tensor to tf.stack"})),1===n.length)return n[0].expandDims(t);var r=n[0].rank,o=n[0].shape,i=n[0].dtype;ee(t<=r,(function(){return"Axis must be <= rank of the tensor"})),n.forEach((function(e){te(o,e.shape,"All tensors passed to stack must have matching shapes")})),n.forEach((function(e){ee(i===e.dtype,(function(){return"All tensors passed to stack must have matching dtypes"}))}));var a=n.map((function(e){return e.expandDims(t)}));return Jn(a,t)}}),Wr=On({tile_:function(e,t){var n=wn(e,"x","tile",null);ee(n.rank===t.length,(function(){return"Error in transpose: rank of input "+n.rank+" must match length of reps "+t+"."}));var r=[n],o={reps:t};return dt.runKernelFunc((function(e,r){var o=e.tile(n,t);return r([n]),o}),{x:n},(function(e,n){var r=n[0];return{x:function(){var n=$n(r);if(1===r.rank)for(var o=0;o<t[0];++o)n=n.add(e.slice([o*r.shape[0]],[r.shape[0]]));else if(2===r.rank)for(o=0;o<t[0];++o)for(var i=0;i<t[1];++i)n=n.add(e.slice([o*r.shape[0],i*r.shape[1]],[r.shape[0],r.shape[1]]));else if(3===r.rank)for(o=0;o<t[0];++o)for(i=0;i<t[1];++i)for(var a=0;a<t[2];++a)n=n.add(e.slice([o*r.shape[0],i*r.shape[1],a*r.shape[2]],[r.shape[0],r.shape[1],r.shape[2]]));else{if(4!==r.rank)throw new Error("Gradient for tile operation is not implemented for rank-"+r.rank+" tensors yet.");for(o=0;o<t[0];++o)for(i=0;i<t[1];++i)for(a=0;a<t[2];++a)for(var s=0;s<t[3];++s)n=n.add(e.slice([o*r.shape[0],i*r.shape[1],a*r.shape[2],s*r.shape[3]],[r.shape[0],r.shape[1],r.shape[2],r.shape[3]]))}return n}}}),"Tile",o,r)}}),Ur=On({truncatedNormal_:function(e,t,n,r,o){if(void 0===t&&(t=0),void 0===n&&(n=1),null!=r&&"bool"===r)throw new Error("Unsupported data type "+r);for(var i=new pr(t,n,r,!0,o),a=vr(e,r),s=0;s<a.values.length;s++)a.values[s]=i.nextValue();return a.toTensor()}}),Vr=On({unstack_:function(e,t){void 0===t&&(t=0),t=t||0;var n=wn(e,"x","unstack");ee(t>=-n.shape.length&&t<n.shape.length,(function(){return"Axis = "+t+" is not in [-"+n.shape.length+", "+n.shape.length+")"})),t<0&&(t+=n.shape.length);var r={axis:t};return dt.runKernelFunc((function(e){return e.unstack(n,t)}),{x:n},(function(e){return{x:function(){return zr(e,t)}}}),"Unpack",r)}});function Gr(e,t,n,r){void 0===r&&(r=!0);var o=[];if(r)(o=o.concat(t.slice(0))).push(e[0]/n),o=o.concat(e.slice(1));else{o=o.concat(e[0]);for(var i=t.length,a=0;a<i;++a)o=o.concat([e[a+1]/t[a],t[a]]);o=o.concat(e.slice(i+1))}return o}function Hr(e,t,n){void 0===n&&(n=!0);var r=[];if(n){r.push(t);for(var o=t+1;o<e;++o)o<=2*t?(r.push(o),r.push(o-(t+1))):r.push(o)}else{var i=[],a=[];for(o=1;o<e;++o)o>=2*t+1||o%2==1?a.push(o):i.push(o);r.push.apply(r,i),r.push(0),r.push.apply(r,a)}return r}function jr(e,t,n,r){void 0===r&&(r=!0);var o=[];r?o.push(e[0]/n):o.push(e[0]*n);for(var i=1;i<e.length;++i)i<=t.length?r?o.push(t[i-1]*e[i]):o.push(e[i]/t[i-1]):o.push(e[i]);return o}function qr(e,t){for(var n=[0],r=0;r<t;++r)n.push(e[r][0]);return n}function Kr(e,t,n){for(var r=e.slice(0,1),o=0;o<n;++o)r.push(e[o+1]-t[o][0]-t[o][1]);return r}function Xr(e,t){if(e.rank<1)throw new Error("tf.gatherND() expects the input to be rank 1 or higher, but the rank was "+e.rank+".");if(t.rank<1)throw new Error("tf.gatherND() expects the indices to be rank 1 or higher, but the rank was "+t.rank+".");if("int32"!==t.dtype)throw new Error("tf.gatherND() expects the indices to be int32 type, but the dtype was "+t.dtype+".");if(t.shape[t.rank-1]>e.rank)throw new Error("index innermost dimension length must be <= tensor rank; saw: "+t.shape[t.rank-1]+" vs. "+e.rank);if(0===e.size)throw new Error("Requested more than 0 entries, but input is empty. Input shape: "+e.shape+".");for(var n=t.shape,r=n[n.length-1],o=1,i=0;i<n.length-1;++i)o*=n[i];var a=e.shape,s=n.slice();s.pop();var u=1;for(i=r;i<e.rank;++i)u*=a[i],s.push(a[i]);var c=Re(e.shape).map((function(e){return e/u})).concat([1]).slice(0,r);return[s,o,u,c]}Object.freeze({prepareAndValidate:Xr});function Qr(e){return e<=30?e:Ie(e,Math.floor(Math.sqrt(e)))}function Yr(e,t,n){var r=t.rank>1?t.shape[t.rank-1]:1,o=t.rank>1?t.rank-1:1,i="Must have updates.shape = indices.shape[:batchDim] + shape[sliceDim:], got updates.shape: "+n.shape+", indices.shape: "+t.shape+", shape: "+e+", sliceDim: "+r+", and batchDim: "+o+".";if(n.rank<o)throw new Error(i+" update.rank < "+o+". ");if(e.length<r+(n.rank-o))throw new Error(i+" Output shape length < "+(r+(n.rank-o)));if(n.rank!==o+e.length-r)throw new Error(i+" update.rank != "+(o+e.length-r));for(var a=0;a<o;++a)if(n.shape[a]!==t.shape[a])throw new Error(i+" updates.shape["+a+"] ("+n.shape[a]+") != indices.shape["+a+"] ("+t.shape[a]+").");for(a=0;a<n.rank-o;++a)if(n.shape[a+o]!==e[a+r])throw new Error(i+" updates.shape["+(a+o)+"] ("+n.shape[a+o]+") != shape["+(a+o)+"] ("+e[a+o]+")")}function $r(e,t,n){if(t.rank<1)throw new Error("tf.scatterND() expects the indices to be rank 1 or higher, but the rank was "+t.rank+".");if(e.rank<1)throw new Error("tf.scatterND() expects the updates to be rank 1 or higher, but the rank was "+e.rank+".");if("int32"!==t.dtype)throw new Error("The dtype of 'indices' should be int32, but got dtype: "+t.dtype);if(n.length<1)throw new Error("Output rank must be greater or equal to 1, but got shape: "+n);if(0===n.length){if(0===t.size)throw new Error("Indices specified for empty output. indices shape: "+t.shape);if(0===e.size)throw new Error("Updates specified for empty output. updates shape: "+e.shape)}Yr(n,t,e)}function Jr(e,t,n){for(var r=t.shape.length,o=r>1?t.shape[r-1]:1,i=n.length,a=1,s=o;s<i;++s)a*=n[s];var u=o<1?1:o;return{sliceRank:o,numUpdates:oe(t.shape)/u,sliceSize:a,strides:Re(n.slice(0,o)).concat([1]),outputSize:oe(n)}}Object.freeze({validateUpdateShape:Yr,validateInput:$r,calculateShapes:Jr});function Zr(e,t,n){ee(e.rank===t.length,(function(){return"Error in slice"+e.rank+"D: Length of begin "+t+" must match the rank of the array ("+e.rank+")."})),ee(e.rank===n.length,(function(){return"Error in slice"+e.rank+"D: Length of size "+n+" must match the rank of the array ("+e.rank+")."}));for(var r=function(r){ee(t[r]+n[r]<=e.shape[r],(function(){return"Error in slice"+e.rank+"D: begin["+r+"] + size["+r+"] ("+(t[r]+n[r])+") would overflow input.shape["+r+"] ("+e.shape[r]+")"}))},o=0;o<e.rank;++o)r(o)}function eo(e){for(var t=[],n=0;e>0;)1&e&&t.push(n),e/=2,n++;return t}function to(e,t,n){for(var r=[],o=0;o<e.length;o++)r[o]=Math.ceil((t[o]-e[o])/n[o]);return r}function no(e,t,n,r,o){var i=t[o],a=n[o]||1;(e&1<<o||null==i)&&(i=a>0?Number.MIN_SAFE_INTEGER:Number.MAX_SAFE_INTEGER);var s=r[o];return i<0&&(i+=s),$(0,i,s-1)}function ro(e,t,n,r,o){var i=t[o],a=n[o]||1;(e&1<<o||null==i)&&(i=a>0?Number.MAX_SAFE_INTEGER:Number.MIN_SAFE_INTEGER);var s=r[o];return i<0&&(i+=s),a>0?$(0,i,s):$(-1,i,s-1)}function oo(e,t,n){for(var r=n.length,o=0;o<n.length;o++)if(n[o]>1){r=o;break}for(o=r+1;o<n.length;o++)if(t[o]>0||n[o]!==e[o])return!1;return!0}function io(e,t){for(var n=e.length>0?e[e.length-1]:1,r=0;r<e.length-1;r++)n+=e[r]*t[r];return n}Object.freeze({assertParamsValid:Zr,maskToAxes:eo,computeOutShape:to,startForAxis:no,stopForAxis:ro,isSliceContinous:oo,computeFlatOffset:io});function ao(e){return dt.customGrad(e)}var so=On({softmax_:function(e,t){void 0===t&&(t=-1);var n=wn(e,"logits","softmax","float32");if(-1===t&&(t=n.rank-1),t!==n.rank-1)throw Error("Softmax along a non-last dimension is not yet supported. Logits was rank "+n.rank+" and dim was "+t);return dt.runKernelFunc((function(e,r){var o=e.softmax(n,t);return r([o]),o}),{logits:n},(function(e,n){var r=n[0],o=e.mul(r);return{logits:function(){return o.sub(o.sum([t],!0).mul(r))}}}),"Softmax",{dim:t},[],[!0])}}),uo=On({logSoftmax_:function(e,t){void 0===t&&(t=-1);var n=wn(e,"logits","logSoftmax");if(-1===t&&(t=n.rank-1),t!==n.rank-1)throw Error("Log Softmax along a non-last dimension is not yet supported. Logits was rank "+n.rank+" and axis was "+t);return ao((function(e,n){var r=e.max(t,!0),o=e.sub(r),i=o.toFloat().sub(o.exp().sum(t,!0).log());return n([i]),{value:i,gradFunc:function(e,n){var r=n[0].exp();return e.sub(e.sum(t,!0).mul(r))}}}))(n)}}),co=function(){function e(e,t){this.backend=e,this.dataMover=t,this.data=new WeakMap,this.dataIdsCount=0}return e.prototype.get=function(e){return this.data.has(e)||this.dataMover.moveData(this.backend,e),this.data.get(e)},e.prototype.set=function(e,t){this.dataIdsCount++,this.data.set(e,t)},e.prototype.has=function(e){return this.data.has(e)},e.prototype.delete=function(e){return this.dataIdsCount--,this.data.delete(e)},e.prototype.numDataIds=function(){return this.dataIdsCount},e}(),lo=function(){function e(){}return e.prototype.time=function(e){return ho("time")},e.prototype.read=function(e){return ho("read")},e.prototype.readSync=function(e){return ho("readSync")},e.prototype.numDataIds=function(){return ho("numDataIds")},e.prototype.disposeData=function(e){return ho("disposeData")},e.prototype.write=function(e,t,n){return ho("write")},e.prototype.move=function(e,t,n,r){return ho("move")},e.prototype.memory=function(){return ho("memory")},e.prototype.floatPrecision=function(){return ho("floatPrecision")},e.prototype.epsilon=function(){return 32===this.floatPrecision()?1e-7:1e-4},e.prototype.batchMatMul=function(e,t,n,r){return ho("batchMatMul")},e.prototype.fusedBatchMatMul=function(e){return e.a,e.b,e.transposeA,e.transposeB,e.bias,e.activation,e.preluActivationWeights,ho("fusedBatchMatMul")},e.prototype.slice=function(e,t,n){return ho("slice")},e.prototype.stridedSlice=function(e,t,n,r){return ho("stridedSlice")},e.prototype.unstack=function(e,t){return ho("unstack")},e.prototype.reverse=function(e,t){return ho("reverse")},e.prototype.concat=function(e,t){return ho("concat")},e.prototype.neg=function(e){return ho("neg")},e.prototype.add=function(e,t){return ho("add")},e.prototype.addN=function(e){return ho("addN")},e.prototype.subtract=function(e,t){return ho("subtract")},e.prototype.multiply=function(e,t){return ho("multiply")},e.prototype.realDivide=function(e,t){return ho("realDivide")},e.prototype.floorDiv=function(e,t){return ho("floorDiv")},e.prototype.sum=function(e,t){return ho("sum")},e.prototype.prod=function(e,t){return ho("prod")},e.prototype.unsortedSegmentSum=function(e,t,n){return ho("unsortedSegmentSum")},e.prototype.argMin=function(e,t){return ho("argMin")},e.prototype.argMax=function(e,t){return ho("argMax")},e.prototype.equal=function(e,t){return ho("equal")},e.prototype.notEqual=function(e,t){return ho("notEqual")},e.prototype.less=function(e,t){return ho("less")},e.prototype.lessEqual=function(e,t){return ho("lessEqual")},e.prototype.greater=function(e,t){return ho("greater")},e.prototype.greaterEqual=function(e,t){return ho("greaterEqual")},e.prototype.logicalNot=function(e){return ho("logicalNot")},e.prototype.logicalAnd=function(e,t){return ho("logicalAnd")},e.prototype.logicalOr=function(e,t){return ho("logicalOr")},e.prototype.where=function(e){return ho("where")},e.prototype.select=function(e,t,n){return ho("select")},e.prototype.topk=function(e,t,n){return ho("topk")},e.prototype.min=function(e,t){return ho("min")},e.prototype.minimum=function(e,t){return ho("minimum")},e.prototype.mod=function(e,t){return ho("mod")},e.prototype.max=function(e,t){return ho("max")},e.prototype.maximum=function(e,t){return ho("maximum")},e.prototype.all=function(e,t){return ho("all")},e.prototype.any=function(e,t){return ho("any")},e.prototype.squaredDifference=function(e,t){return ho("squaredDifference")},e.prototype.ceil=function(e){return ho("ceil")},e.prototype.floor=function(e){return ho("floor")},e.prototype.round=function(e){return ho("round")},e.prototype.sign=function(e){return ho("sign")},e.prototype.isNaN=function(e){return ho("isNaN")},e.prototype.isInf=function(e){return ho("isInf")},e.prototype.isFinite=function(e){return ho("isFinite")},e.prototype.pow=function(e,t){return ho("pow")},e.prototype.exp=function(e){return ho("exp")},e.prototype.expm1=function(e){return ho("expm1")},e.prototype.softmax=function(e,t){return ho("softmax")},e.prototype.log=function(e){return ho("log")},e.prototype.log1p=function(e){return ho("log1p")},e.prototype.sqrt=function(e){return ho("sqrt")},e.prototype.rsqrt=function(e){return ho("rsqrt")},e.prototype.square=function(e){return ho("square")},e.prototype.reciprocal=function(e){return ho("reciprocal")},e.prototype.relu=function(e){return ho("relu")},e.prototype.relu6=function(e){return ho("relu6")},e.prototype.prelu=function(e,t){return ho("prelu")},e.prototype.elu=function(e){return ho("elu")},e.prototype.eluDer=function(e,t){return ho("eluDer")},e.prototype.selu=function(e){return ho("selu")},e.prototype.int=function(e){return ho("int")},e.prototype.clip=function(e,t,n){return ho("clip")},e.prototype.abs=function(e){return ho("abs")},e.prototype.complexAbs=function(e){return ho("complexAbs")},e.prototype.sigmoid=function(e){return ho("sigmoid")},e.prototype.softplus=function(e){return ho("softplus")},e.prototype.sin=function(e){return ho("sin")},e.prototype.cos=function(e){return ho("cos")},e.prototype.tan=function(e){return ho("tan")},e.prototype.asin=function(e){return ho("asin")},e.prototype.acos=function(e){return ho("acos")},e.prototype.atan=function(e){return ho("atan")},e.prototype.atan2=function(e,t){return ho("atan2")},e.prototype.sinh=function(e){return ho("sinh")},e.prototype.cosh=function(e){return ho("cosh")},e.prototype.tanh=function(e){return ho("tanh")},e.prototype.asinh=function(e){return ho("asinh")},e.prototype.acosh=function(e){return ho("acosh")},e.prototype.atanh=function(e){return ho("atanh")},e.prototype.erf=function(e){return ho("erf")},e.prototype.step=function(e,t){return ho("step")},e.prototype.fusedConv2d=function(e){return e.input,e.filter,e.convInfo,e.bias,e.activation,e.preluActivationWeights,ho("fusedConv2d")},e.prototype.conv2d=function(e,t,n){return ho("conv2d")},e.prototype.conv2dDerInput=function(e,t,n){return ho("conv2dDerInput")},e.prototype.conv2dDerFilter=function(e,t,n){return ho("conv2dDerFilter")},e.prototype.fusedDepthwiseConv2D=function(e){return e.input,e.filter,e.convInfo,e.bias,e.activation,e.preluActivationWeights,ho("fusedDepthwiseConv2D")},e.prototype.depthwiseConv2D=function(e,t,n){return ho("depthwiseConv2D")},e.prototype.depthwiseConv2DDerInput=function(e,t,n){return ho("depthwiseConv2DDerInput")},e.prototype.depthwiseConv2DDerFilter=function(e,t,n){return ho("depthwiseConv2DDerFilter")},e.prototype.conv3d=function(e,t,n){return ho("conv3d")},e.prototype.conv3dDerInput=function(e,t,n){return ho("conv3dDerInput")},e.prototype.conv3dDerFilter=function(e,t,n){return ho("conv3dDerFilter")},e.prototype.maxPool=function(e,t){return ho("maxPool")},e.prototype.maxPoolBackprop=function(e,t,n,r){return ho("maxPoolBackprop")},e.prototype.avgPool=function(e,t){return ho("avgPool")},e.prototype.avgPoolBackprop=function(e,t,n){return ho("avgPoolBackprop")},e.prototype.avgPool3d=function(e,t){return ho("avgPool3d")},e.prototype.avgPool3dBackprop=function(e,t,n){return ho("avgPool3dBackprop")},e.prototype.maxPool3d=function(e,t){return ho("maxPool3d")},e.prototype.maxPool3dBackprop=function(e,t,n,r){return ho("maxPool3dBackprop")},e.prototype.reshape=function(e,t){return ho("reshape")},e.prototype.cast=function(e,t){return ho("cast")},e.prototype.tile=function(e,t){return ho("tile")},e.prototype.pad=function(e,t,n){return ho("pad")},e.prototype.transpose=function(e,t){return ho("transpose")},e.prototype.gather=function(e,t,n){return ho("gather")},e.prototype.gatherND=function(e,t){return ho("gatherND")},e.prototype.scatterND=function(e,t,n){return ho("scatterND")},e.prototype.batchToSpaceND=function(e,t,n){return ho("batchToSpaceND")},e.prototype.spaceToBatchND=function(e,t,n){return ho("spaceToBatchND")},e.prototype.resizeBilinear=function(e,t,n,r){return ho("resizeBilinear")},e.prototype.resizeBilinearBackprop=function(e,t,n){return ho("resizeBilinearBackprop")},e.prototype.resizeNearestNeighbor=function(e,t,n,r){return ho("resizeNearestNeighbor")},e.prototype.resizeNearestNeighborBackprop=function(e,t,n){return ho("resizeNearestNeighborBackprop")},e.prototype.batchNormalization=function(e,t,n,r,o,i){return ho("batchNormalization")},e.prototype.localResponseNormalization4D=function(e,t,n,r,o){return ho("localResponseNormalization4D")},e.prototype.LRNGrad=function(e,t,n,r,o,i,a){return ho("LRNGrad")},e.prototype.multinomial=function(e,t,n,r){return ho("multinomial")},e.prototype.oneHot=function(e,t,n,r){return ho("oneHot")},e.prototype.cumsum=function(e,t,n,r){return ho("cumsum")},e.prototype.nonMaxSuppression=function(e,t,n,r,o){return ho("nonMaxSuppression")},e.prototype.fft=function(e){return ho("fft")},e.prototype.ifft=function(e){return ho("ifft")},e.prototype.complex=function(e,t){return ho("complex")},e.prototype.real=function(e){return ho("real")},e.prototype.imag=function(e){return ho("imag")},e.prototype.cropAndResize=function(e,t,n,r,o,i){return ho("cropAndResize")},e.prototype.depthToSpace=function(e,t,n){return ho("depthToSpace")},e.prototype.split=function(e,t,n){return ho("split")},e.prototype.sparseToDense=function(e,t,n,r){return ho("sparseToDense")},e.prototype.diag=function(e){return ho("diag")},e.prototype.fill=function(e,t,n){return ho("fill")},e.prototype.onesLike=function(e){return ho("onesLike")},e.prototype.zerosLike=function(e){return ho("zerosLike")},e.prototype.linspace=function(e,t,n){return ho("linspace")},e.prototype.dispose=function(){return ho("dispose")},e}();function ho(e){throw new Error("'"+e+"' not yet implemented or not found in the registry. Did you forget to import the kernel?")}function po(e,t){for(var n=e.length,r=[],o=0;o<n;o++){var i=n-1-o,a=e[i]||1;(t[t.length-1-o]||1)>1&&1===a&&r.unshift(i)}return r}function fo(e,t){for(var n=[],r=0;r<t.length;r++){var o=e[e.length-r-1],i=t.length-r-1,a=t[i];(null==o||1===o&&a>1)&&n.unshift(i)}return n}function mo(e,t){for(var n=[],r=Math.max(e.length,t.length),o=0;o<r;o++){var i=e[e.length-o-1];null==i&&(i=1);var a=t[t.length-o-1];if(null==a&&(a=1),1===i)n.unshift(a);else if(1===a)n.unshift(i);else{if(i!==a)throw Error("Operands could not be broadcast together with shapes "+e+" and "+t+".");n.unshift(i)}}return n}function vo(e,t,n,r,o,i,a){void 0===a&&(a="channelsLast");var s,u=xo(t),c=u[0],l=u[1];if("channelsLast"===a)s=[c,l,e[3],e[3]];else{if("channelsFirst"!==a)throw new Error("Unknown dataFormat "+a);s=[c,l,e[1],e[1]]}return bo(e,s,n,r,o,i,!1,a)}function go(e,t,n,r,o,i,a){void 0===a&&(a="NDHWC");var s,u,c=Co(t),l=c[0],d=c[1],h=c[2];if("NDHWC"===a)u="channelsLast",s=[l,d,h,e[4],e[4]];else{if("NCDHW"!==a)throw new Error("Unknown dataFormat "+a);u="channelsFirst",s=[l,d,h,e[1],e[1]]}return Ao(e,s,n,r,o,!1,u,i)}function bo(e,t,n,r,o,i,a,s){void 0===a&&(a=!1),void 0===s&&(s="channelsLast");var u=[-1,-1,-1,-1],c=u[0],l=u[1],d=u[2],h=u[3];if("channelsLast"===s)c=e[0],l=e[1],d=e[2],h=e[3];else{if("channelsFirst"!==s)throw new Error("Unknown dataFormat "+s);c=e[0],h=e[1],l=e[2],d=e[3]}var p,f=t[0],m=t[1],v=t[3],g=xo(n),b=g[0],A=g[1],y=xo(r),x=y[0],C=y[1],w=wo(f,x),k=wo(m,C),_=function(e,t,n,r,o,i,a,s){var u,c,l;if("number"==typeof e){u={top:e,bottom:e,left:e,right:e,type:0===e?"VALID":"NUMBER"};var d=function(e,t,n,r,o){null==r&&(r=yo(e,t,n));var i=e[1],a=ko((e[0]-t+2*r)/n+1,o);ee(ae(a),(function(){return"The output # of rows ("+a+") must be an integer. Change the stride and/or zero pad parameters"}));var s=ko((i-t+2*r)/n+1,o);return ee(ae(s),(function(){return"The output # of columns ("+s+") must be an integer. Change the stride and/or zero pad parameters"})),[a,s]}([t,n],i,r,e,s);c=d[0],l=d[1]}else if("same"===e){c=Math.ceil(t/r),l=Math.ceil(n/o);var h=Math.max(0,(c-1)*r+i-t),p=Math.max(0,(l-1)*o+a-n),f=Math.floor(h/2),m=h-f,v=Math.floor(p/2);u={top:f,bottom:m,left:v,right:p-v,type:"SAME"}}else{if("valid"!==e)throw Error("Unknown padding parameter: "+e);u={top:0,bottom:0,left:0,right:0,type:"VALID"},c=Math.ceil((t-i+1)/r),l=Math.ceil((n-a+1)/o)}return{padInfo:u,outHeight:c,outWidth:l}}(o,l,d,b,A,w,k,i),E=_.padInfo,I=_.outHeight,R=_.outWidth,S=a?v*h:v;return"channelsFirst"===s?p=[c,S,I,R]:"channelsLast"===s&&(p=[c,I,R,S]),{batchSize:c,dataFormat:s,inHeight:l,inWidth:d,inChannels:h,outHeight:I,outWidth:R,outChannels:S,padInfo:E,strideHeight:b,strideWidth:A,filterHeight:f,filterWidth:m,effectiveFilterHeight:w,effectiveFilterWidth:k,dilationHeight:x,dilationWidth:C,inShape:e,outShape:p,filterShape:t}}function Ao(e,t,n,r,o,i,a,s){void 0===i&&(i=!1),void 0===a&&(a="channelsLast");var u=[-1,-1,-1,-1,-1],c=u[0],l=u[1],d=u[2],h=u[3],p=u[4];if("channelsLast"===a)c=e[0],l=e[1],d=e[2],h=e[3],p=e[4];else{if("channelsFirst"!==a)throw new Error("Unknown dataFormat "+a);c=e[0],p=e[1],l=e[2],d=e[3],h=e[4]}var f,m=t[0],v=t[1],g=t[2],b=t[4],A=Co(n),y=A[0],x=A[1],C=A[2],w=Co(r),k=w[0],_=w[1],E=w[2],I=wo(m,k),R=wo(v,_),S=wo(g,E),T=function(e,t,n,r,o,i,a,s,u,c,l){var d,h,p,f;if("number"==typeof e){d={top:e,bottom:e,left:e,right:e,front:e,back:e,type:0===e?"VALID":"NUMBER"};var m=function(e,t,n,r,o,i){null==o&&(o=yo(e,t,r));var a=e[1],s=e[2],u=ko((e[0]-t+2*o)/r+1,i);ee(ae(u),(function(){return"The output # of depths ("+u+") must be an integer. Change the stride and/or zero pad parameters"}));var c=ko((a-t+2*o)/r+1,i);ee(ae(c),(function(){return"The output # of rows ("+c+") must be an integer. Change the stride and/or zero pad parameters"}));var l=ko((s-t+2*o)/r+1,i);return ee(ae(l),(function(){return"The output # of columns ("+l+") must be an integer. Change the stride and/or zero pad parameters"})),[u,c,l,1]}([t,n,r,1],s,0,o,e,l);h=m[0],p=m[1],f=m[2]}else if("same"===e){var v=((h=Math.ceil(t/o))-1)*o+s-t,g=((p=Math.ceil(n/i))-1)*i+u-n,b=((f=Math.ceil(r/a))-1)*a+c-r,A=Math.floor(v/2),y=v-A,x=Math.floor(g/2),C=g-x,w=Math.floor(b/2);d={top:x,bottom:C,left:w,right:b-w,front:A,back:y,type:"SAME"}}else{if("valid"!==e)throw Error("Unknown padding parameter: "+e);d={top:0,bottom:0,left:0,right:0,front:0,back:0,type:"VALID"},h=Math.ceil((t-s+1)/o),p=Math.ceil((n-u+1)/i),f=Math.ceil((r-c+1)/a)}return{padInfo:d,outDepth:h,outHeight:p,outWidth:f}}(o,l,d,h,y,x,C,I,R,S,s),D=T.padInfo,F=T.outDepth,N=T.outHeight,B=T.outWidth,O=i?b*p:b;return"channelsFirst"===a?f=[c,O,F,N,B]:"channelsLast"===a&&(f=[c,F,N,B,O]),{batchSize:c,dataFormat:a,inDepth:l,inHeight:d,inWidth:h,inChannels:p,outDepth:F,outHeight:N,outWidth:B,outChannels:O,padInfo:D,strideDepth:y,strideHeight:x,strideWidth:C,filterDepth:m,filterHeight:v,filterWidth:g,effectiveFilterDepth:I,effectiveFilterHeight:R,effectiveFilterWidth:S,dilationDepth:k,dilationHeight:_,dilationWidth:E,inShape:e,outShape:f,filterShape:t}}function yo(e,t,n,r){void 0===r&&(r=1);var o=wo(t,r);return Math.floor((e[0]*(n-1)-n+o)/2)}function xo(e){return"number"==typeof e?[e,e,e]:2===e.length?[e[0],e[1],1]:e}function Co(e){return"number"==typeof e?[e,e,e]:e}function wo(e,t){return t<=1?e:e+(e-1)*(t-1)}function ko(e,t){if(!t)return e;switch(t){case"round":return Math.round(e);case"ceil":return Math.ceil(e);case"floor":return Math.floor(e);default:throw new Error("Unknown roundingMode "+t)}}function _o(e){var t=xo(e),n=t[0],r=t[1],o=t[2];return 1===n&&1===r&&1===o}function Eo(e,t){return _o(e)||_o(t)}function Io(e){if("NHWC"===e)return"channelsLast";if("NCHW"===e)return"channelsFirst";throw new Error("Unknown dataFormat "+e)}function Ro(e,t,n){if("complex64"===t){if("complex64"===e.dtype)return e.clone();var r=Kn(e.shape),o=e.toFloat(),i=n.complex(o,r);return r.dispose(),o.dispose(),i}if(!be(e.dtype,t))return dt.makeTensorFromDataId(e.dataId,e.shape,t);if("complex64"===e.dtype){var a=n.real(e);return i=a.cast(t),a.dispose(),i}if("int32"===t)return n.int(e);if("bool"===t){var s=Un(0,e.dtype);return i=n.notEqual(e,s),s.dispose(),i}throw new Error("Error in Cast: failed to cast "+e.dtype+" to "+t)}function So(e,t){return dt.makeTensorFromDataId(e.dataId,t,e.dtype)}function To(e,t,n){var r=(t-e)/(n-1),o=Fe(n,"float32");o[0]=e;for(var i=1;i<o.length;i++)o[i]=o[i-1]+r;return Vn(o,"float32")}Object.freeze({castTensor:Ro,reshapeTensor:So,linspaceImpl:To,upcastType:rt,axesAreInnerMostDims:_n,combineLocations:En,computeOutAndReduceShapes:In,expandShapeToKeepDim:Rn,assertAxesAreInnerMostDims:Sn,getAxesPermutation:Tn,getUndoAxesPermutation:Dn,getInnerMostAxes:Fn,getBroadcastDims:po,getReductionAxes:fo,assertAndGetBroadcastShape:mo,assertParamsConsistent:Nn,computeOutShape:Bn,computePool2DInfo:vo,computePool3DInfo:go,computeConv2DInfo:bo,computeConv3DInfo:Ao,computeDefaultPad:yo,tupleValuesAreOne:_o,eitherStridesOrDilationsAreOne:Eo,convertConv2DDataFormat:Io,PARALLELIZE_THRESHOLD:30,computeOptimalWindowSize:Qr});function Do(e,t){if(e.length!==t.length)throw new Error("Cannot merge real and imag arrays of different lengths. real:"+e.length+", imag: "+t.length+".");for(var n=new Float32Array(2*e.length),r=0;r<n.length;r+=2)n[r]=e[r/2],n[r+1]=t[r/2];return n}function Fo(e,t){return{real:e[2*t],imag:e[2*t+1]}}function No(e,t,n,r){e[2*r]=t,e[2*r+1]=n}function Bo(e,t,n){var r=(n?2:-2)*Math.PI*(e/t);return{real:Math.cos(r),imag:Math.sin(r)}}function Oo(e,t,n){var r=function(e,t,n){return function(e,t,n){for(var r=0,o=e.length,i=0,a=!1;r<o;){var s=n(t,e[i=r+(o-r>>>1)]);s>0?r=i+1:(o=i,a=!s)}return a?r:-r-1}(e,t,n||Mo)}(e,t,n),o=r<0?-(r+1):r;e.splice(o,0,t)}function Mo(e,t){return e>t?1:e<t?-1:0}function Po(e,t,n,r,o){return zo(e,t,n,r,o,0).selectedIndices}function Lo(e,t,n,r,o,i){var a=zo(e,t,n,r,o,i,!0);return a.numValidOutputs.dispose(),{selectedIndices:a.selectedIndices,selectedScores:a.selectedScores}}function zo(e,t,n,r,o,i,a,s){void 0===a&&(a=!1),void 0===s&&(s=!1);for(var u=Array.from(t).map((function(e,t){return{score:e,boxIndex:t,suppressBeginIndex:0}})).filter((function(e){return e.score>o})).sort(Vo),c=i>0?-.5/i:0,l=[],d=[];l.length<n&&u.length>0;){var h=u.pop(),p=h.score,f=h.boxIndex,m=h.suppressBeginIndex;if(p<o)break;for(var v=!1,g=l.length-1;g>=m;--g){var b=Wo(e,f,l[g]);if(b>=r){v=!0;break}if(h.score=h.score*Uo(r,c,b),h.score<=o)break}h.suppressBeginIndex=l.length,v||(h.score===p?(l.push(f),d.push(h.score)):h.score>o&&Oo(u,h,Vo))}var A=l.length;return s&&(l.fill(0,A),d.fill(0,A)),{selectedIndices:Vn(l,"int32"),selectedScores:Vn(d,"float32"),numValidOutputs:Un(A,"int32")}}function Wo(e,t,n){var r=e.subarray(4*t,4*t+4),o=e.subarray(4*n,4*n+4),i=Math.min(r[0],r[2]),a=Math.min(r[1],r[3]),s=Math.max(r[0],r[2]),u=Math.max(r[1],r[3]),c=Math.min(o[0],o[2]),l=Math.min(o[1],o[3]),d=Math.max(o[0],o[2]),h=Math.max(o[1],o[3]),p=(s-i)*(u-a),f=(d-c)*(h-l);if(p<=0||f<=0)return 0;var m=Math.max(i,c),v=Math.max(a,l),g=Math.min(s,d),b=Math.min(u,h),A=Math.max(g-m,0)*Math.max(b-v,0);return A/(p+f-A)}function Uo(e,t,n){var r=Math.exp(t*n*n);return n<=e?r:0}function Vo(e,t){return e.score-t.score||e.score===t.score&&t.boxIndex-e.boxIndex}function Go(e,t,n){var r=new Array(e.rank).fill(0),o=e.shape.slice();return t.map((function(t){o[n]=t;var i=e.slice(r,o);return r[n]+=t,i}))}function Ho(e,t){for(var n=new Array(e.rank),r=0;r<n.length;r++)n[r]=e.shape[r]*t[r];var o=vr(n,e.dtype);for(r=0;r<o.values.length;++r){for(var i=o.indexToLoc(r),a=new Array(e.rank),s=0;s<a.length;s++)a[s]=i[s]%e.shape[s];var u=e.locToIndex(a);o.values[r]=e.values[u]}return o.toTensor()}function jo(e,t,n,r,o){for(var i=t[t.length-1],a=[e.length/i,i],s=a[0],u=a[1],c=fe(n,s*r),l=fe("int32",s*r),d=0;d<s;d++){for(var h=d*u,p=e.subarray(h,h+u),f=[],m=0;m<p.length;m++)f.push({value:p[m],index:m});f.sort((function(e,t){return t.value-e.value}));var v=d*r,g=c.subarray(v,v+r),b=l.subarray(v,v+r);for(m=0;m<r;m++)g[m]=f[m].value,b[m]=f[m].index}var A=t.slice();return A[A.length-1]=r,[zn(c,A,n),zn(l,A,"int32")]}function qo(e,t){for(var n=[],r=0;r<t.length;r++)t[r]&&n.push(r);var o=vr(e,"int32"),i=vr([n.length,e.length],"int32");for(r=0;r<n.length;r++){var a=o.indexToLoc(n[r]),s=r*e.length;i.values.set(a,s)}return i.toTensor()}var Ko=function(e,t){this.outputShape=[],this.outputShape=e,this.variableNames=t.map((function(e,t){return"T"+t}));var n=[];this.variableNames.forEach((function(e){n.push("float v"+e+" = get"+e+"AtOutCoords();")}));var r=this.variableNames.map((function(e){return"v"+e})).join(" + ");this.userCode="\n      void main() {\n        "+n.join("\n        ")+"\n\n        float result = "+r+";\n        setOutput(result);\n      }\n    "},Xo=function(e,t){this.outputShape=[],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=e,this.variableNames=t.map((function(e,t){return"T"+t}));var n=[];this.variableNames.forEach((function(e){n.push("vec4 v"+e+" = get"+e+"AtOutCoords();")}));var r=this.variableNames.map((function(e){return"v"+e})).join(" + ");this.userCode="\n      void main() {\n        "+n.join("\n        ")+"\n\n        vec4 result = "+r+";\n        setOutput(result);\n      }\n    "},Qo=function(e,t,n){this.variableNames=["A"];var r=e.windowSize,o=e.batchSize,i=e.inSize,a=Math.ceil(i/r);n||this.variableNames.push("bestIndicesA"),this.outputShape=[o,a];var s="max"===t?">":"<",u=n?"inOffset + i;":"round(getBestIndicesA(batch, inOffset + i));";this.userCode="\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n        int outIdx = coords[1];\n        int inOffset = outIdx * "+r+";\n\n        int bestIndex = inOffset;\n        float bestValue = getA(batch, bestIndex);\n\n        for (int i = 0; i < "+r+"; i++) {\n          int inIdx = "+u+";\n          float candidate = getA(batch, inIdx);\n          if (candidate "+s+" bestValue) {\n            bestValue = candidate;\n            bestIndex = inIdx;\n          }\n        }\n        setOutput(float(bestIndex));\n      }\n    "};function Yo(e,t){return["x","y","z","w","u","v"].slice(0,t).map((function(t){return e+"."+t}))}function $o(e,t){return 1===t?[e]:Yo(e,t)}function Jo(){var e,t,n,r,o,i,a,s,u,c;return 2===U().getNumber("WEBGL_VERSION")?(e="#version 300 es",t="in",n="out",r="in",o="texture",i="outputColor",a="out vec4 outputColor;",s="\n      bool isnan_custom(float val) {\n        return (val > 0.0 || val < 0.0) ? false : val != 0.0;\n      }\n\n      bvec4 isnan_custom(vec4 val) {\n        return bvec4(isnan_custom(val.x),\n          isnan_custom(val.y), isnan_custom(val.z), isnan_custom(val.w));\n      }\n\n      #define isnan(value) isnan_custom(value)\n    ",u="",c="\n      #define round(value) newRound(value)\n      int newRound(float value) {\n        return int(floor(value + 0.5));\n      }\n\n      ivec4 newRound(vec4 value) {\n        return ivec4(floor(value + vec4(0.5)));\n      }\n    "):(e="",t="attribute",n="varying",r="varying",o="texture2D",i="gl_FragColor",a="",s="\n      #define isnan(value) isnan_custom(value)\n      bool isnan_custom(float val) {\n        return (val > 0. || val < 1. || val == 0.) ? false : true;\n      }\n      bvec4 isnan_custom(vec4 val) {\n        return bvec4(isnan(val.x), isnan(val.y), isnan(val.z), isnan(val.w));\n      }\n    ",u="\n      uniform float INFINITY;\n\n      bool isinf(float val) {\n        return abs(val) == INFINITY;\n      }\n      bvec4 isinf(vec4 val) {\n        return equal(abs(val), vec4(INFINITY));\n      }\n    ",c="\n      int round(float value) {\n        return int(floor(value + 0.5));\n      }\n\n      ivec4 round(vec4 value) {\n        return ivec4(floor(value + vec4(0.5)));\n      }\n    "),{version:e,attribute:t,varyingVs:n,varyingFs:r,texture2D:o,output:i,defineOutput:a,defineSpecialNaN:s,defineSpecialInf:u,defineRound:c}}function Zo(e,t,n){void 0===n&&(n="index");var r=Re(t);return r.map((function(t,o){return"int "+e[o]+" = "+n+" / "+t+"; "+(o===r.length-1?"int "+e[o+1]+" = "+n+" - "+e[o]+" * "+t:"index -= "+e[o]+" * "+t)+";"})).join("")}function ei(e){var t=Re(e).map((function(e){return e.toString()}));return"\n  int getFlatIndex(ivec3 coords) {\n    return coords.x * "+t[0]+" + coords.y * "+t[1]+" + coords.z;\n  }\n"}var ti="\n  const float FLOAT_MAX = 1.70141184e38;\n  const float FLOAT_MIN = 1.17549435e-38;\n\n  lowp vec4 encode_float(highp float v) {\n    if (isnan(v)) {\n      return vec4(255, 255, 255, 255);\n    }\n\n    highp float av = abs(v);\n\n    if(av < FLOAT_MIN) {\n      return vec4(0.0, 0.0, 0.0, 0.0);\n    } else if(v > FLOAT_MAX) {\n      return vec4(0.0, 0.0, 128.0, 127.0) / 255.0;\n    } else if(v < -FLOAT_MAX) {\n      return vec4(0.0, 0.0,  128.0, 255.0) / 255.0;\n    }\n\n    highp vec4 c = vec4(0,0,0,0);\n\n    highp float e = floor(log2(av));\n    highp float m = exp2(fract(log2(av))) - 1.0;\n\n    c[2] = floor(128.0 * m);\n    m -= c[2] / 128.0;\n    c[1] = floor(32768.0 * m);\n    m -= c[1] / 32768.0;\n    c[0] = floor(8388608.0 * m);\n\n    highp float ebias = e + 127.0;\n    c[3] = floor(ebias / 2.0);\n    ebias -= c[3] * 2.0;\n    c[2] += floor(ebias) * 128.0;\n\n    c[3] += 128.0 * step(0.0, -v);\n\n    return c / 255.0;\n  }\n";function ni(e,t,n,r){var o=[];e.forEach((function(e){var t=oe(e.shapeInfo.logicalShape);e.shapeInfo.isUniform?o.push("uniform float "+e.name+(t>1?"["+t+"]":"")+";"):(o.push("uniform sampler2D "+e.name+";"),o.push("uniform int offset"+e.name+";"))}));var i,a,s=o.join("\n"),u=e.map((function(e){return function(e,t,n){void 0===n&&(n=!1);var r="";r+=n?function e(t){var n,r,o;switch(t.shapeInfo.logicalShape.length){case 0:return n=t.name,r="get"+n.charAt(0).toUpperCase()+n.slice(1),o=Jo(),"\n    vec4 "+r+"() {\n      return "+o.texture2D+"("+n+", halfCR);\n    }\n  ";case 1:return function(e){var t=e.name,n="get"+t.charAt(0).toUpperCase()+t.slice(1),r=e.shapeInfo.texShape,o=[Math.ceil(r[0]/2),Math.ceil(r[1]/2)],i=Jo();return"\n    vec4 "+n+"(int index) {\n      vec2 uv = packedUVfrom1D(\n        "+o[0]+", "+o[1]+", index);\n      return "+i.texture2D+"("+t+", uv);\n    }\n  "}(t);case 2:return function(e){var t=e.shapeInfo.logicalShape,n=e.name,r="get"+n.charAt(0).toUpperCase()+n.slice(1),o=e.shapeInfo.texShape,i=o[0],a=o[1],s=Jo();if(null!=o&&ie(t,o))return"\n      vec4 "+r+"(int row, int col) {\n        vec2 uv = (vec2(col, row) + halfCR) / vec2("+a+".0, "+i+".0);\n\n        return "+s.texture2D+"("+n+", uv);\n      }\n    ";var u=[Math.ceil(o[0]/2),Math.ceil(o[1]/2)];return"\n    vec4 "+r+"(int row, int col) {\n      vec2 uv = packedUVfrom2D("+Math.ceil(t[1]/2)+", "+u[0]+", "+u[1]+", row, col);\n      return "+s.texture2D+"("+n+", uv);\n    }\n  "}(t);case 3:return function(t){var n=t.shapeInfo.logicalShape,r=t.name,o="get"+r.charAt(0).toUpperCase()+r.slice(1),i=t.shapeInfo.texShape,a=[Math.ceil(i[0]/2),Math.ceil(i[1]/2)];if(1===n[0]){var s=li(t,n.slice(1));return"\n        "+e(s)+"\n        vec4 "+o+"(int b, int row, int col) {\n          return "+o+"("+di(["b","row","col"],[1,2])+");\n        }\n      "}var u=a[0],c=a[1],l=Math.ceil(n[2]/2);return"\n    vec4 "+o+"(int b, int row, int col) {\n      vec2 uv = packedUVfrom3D(\n        "+u+", "+c+", "+l*Math.ceil(n[1]/2)+", "+l+", b, row, col);\n      return "+Jo().texture2D+"("+r+", uv);\n    }\n  "}(t);default:return function(e){for(var t=e.shapeInfo.logicalShape,n=t.length,r=e.name,o="get"+r.charAt(0).toUpperCase()+r.slice(1),i=e.shapeInfo.texShape,a=[Math.ceil(i[0]/2),Math.ceil(i[1]/2)],s=a[0],u=a[1],c=Math.ceil(t[n-1]/2),l=c*Math.ceil(t[n-2]/2),d="int b, int row, int col",h="b * "+l+" + (row / 2) * "+c+" + (col / 2)",p=2;p<n-1;p++)d="int b"+p+", "+d,h="b"+p+" * "+(l*=t[n-p-1])+" + "+h;return"\n    vec4 "+o+"("+d+") {\n      int index = "+h+";\n      int texR = index / "+u+";\n      int texC = index - texR * "+u+";\n      vec2 uv = (vec2(texC, texR) + halfCR) / vec2("+u+", "+s+");\n      return "+Jo().texture2D+"("+r+", uv);\n    }\n  "}(t)}}(e):function e(t){var n=t.shapeInfo.logicalShape;switch(n.length){case 0:return function(e){var t=e.name,n="get"+t.charAt(0).toUpperCase()+t.slice(1);if(e.shapeInfo.isUniform)return"float "+n+"() {return "+t+";}";var r=e.shapeInfo.texShape,o=r[0],i=r[1];if(1===o&&1===i)return"\n      float "+n+"() {\n        return sampleTexture("+t+", halfCR);\n      }\n    ";var a=e.shapeInfo.texShape;return"\n    float "+n+"() {\n      vec2 uv = uvFromFlat("+a[0]+", "+a[1]+", "+si(t)+");\n      return sampleTexture("+t+", uv);\n    }\n  "}(t);case 1:return function(e){var t=e.name,n="get"+t.charAt(0).toUpperCase()+t.slice(1);if(e.shapeInfo.isUniform)return"\n      float "+n+"(int index) {\n        "+ui(e)+"\n      }\n    ";var r=e.shapeInfo.texShape,o=r[0],i=r[1];if(1===i&&1===o)return"\n      float "+n+"(int index) {\n        return sampleTexture("+t+", halfCR);\n      }\n    ";var a=si(t);return 1===i?"\n      float "+n+"(int index) {\n        vec2 uv = vec2(0.5, (float(index + "+a+") + 0.5) / "+o+".0);\n        return sampleTexture("+t+", uv);\n      }\n    ":1===o?"\n      float "+n+"(int index) {\n        vec2 uv = vec2((float(index + "+a+") + 0.5) / "+i+".0, 0.5);\n        return sampleTexture("+t+", uv);\n      }\n    ":"\n    float "+n+"(int index) {\n      vec2 uv = uvFromFlat("+o+", "+i+", index + "+a+");\n      return sampleTexture("+t+", uv);\n    }\n  "}(t);case 2:return function(t){var n=t.shapeInfo.logicalShape,r=t.name,o="get"+r.charAt(0).toUpperCase()+r.slice(1),i=t.shapeInfo.texShape;if(null!=i&&ie(n,i)){var a=i[0];return"\n    float "+o+"(int row, int col) {\n      vec2 uv = (vec2(col, row) + halfCR) / vec2("+i[1]+".0, "+a+".0);\n      return sampleTexture("+r+", uv);\n    }\n  "}var s=pe(n),u=s.newShape,c=s.keptDims,l=u;if(l.length<n.length){var d=li(t,l);return"\n      "+e(d)+"\n      float "+o+"(int row, int col) {\n        return "+o+"("+di(["row","col"],c)+");\n      }\n    "}if(t.shapeInfo.isUniform)return"\n      float "+o+"(int row, int col) {\n        int index = round(dot(vec2(row, col), vec2("+n[1]+", 1)));\n        "+ui(t)+"\n      }\n    ";var h=i[0],p=i[1],f=si(r);return 1===p?"\n    float "+o+"(int row, int col) {\n      float index = dot(vec3(row, col, "+f+"), vec3("+n[1]+", 1, 1));\n      vec2 uv = vec2(0.5, (index + 0.5) / "+h+".0);\n      return sampleTexture("+r+", uv);\n    }\n  ":1===h?"\n    float "+o+"(int row, int col) {\n      float index = dot(vec3(row, col, "+f+"), vec3("+n[1]+", 1, 1));\n      vec2 uv = vec2((index + 0.5) / "+p+".0, 0.5);\n      return sampleTexture("+r+", uv);\n    }\n  ":"\n  float "+o+"(int row, int col) {\n    // Explicitly use integer operations as dot() only works on floats.\n    int index = row * "+n[1]+" + col + "+f+";\n    vec2 uv = uvFromFlat("+h+", "+p+", index);\n    return sampleTexture("+r+", uv);\n  }\n"}(t);case 3:return function(t){var n=t.shapeInfo.logicalShape,r=t.name,o="get"+r.charAt(0).toUpperCase()+r.slice(1),i=n[1]*n[2],a=n[2],s=pe(n),u=s.newShape,c=s.keptDims,l=u;if(l.length<n.length){var d=li(t,l);return"\n        "+e(d)+"\n        float "+o+"(int row, int col, int depth) {\n          return "+o+"("+di(["row","col","depth"],c)+");\n        }\n      "}if(t.shapeInfo.isUniform)return"\n      float "+o+"(int row, int col, int depth) {\n        int index = round(dot(vec3(row, col, depth),\n                          vec3("+i+", "+a+", 1)));\n        "+ui(t)+"\n      }\n    ";var h=t.shapeInfo.texShape,p=h[0],f=h[1],m=t.shapeInfo.flatOffset;return f===i&&null==m?"\n        float "+o+"(int row, int col, int depth) {\n          float texR = float(row);\n          float texC = dot(vec2(col, depth), vec2("+a+", 1));\n          vec2 uv = (vec2(texC, texR) + halfCR) /\n                     vec2("+f+".0, "+p+".0);\n          return sampleTexture("+r+", uv);\n        }\n      ":f===a&&null==m?"\n    float "+o+"(int row, int col, int depth) {\n      float texR = dot(vec2(row, col), vec2("+n[1]+", 1));\n      float texC = float(depth);\n      vec2 uv = (vec2(texC, texR) + halfCR) / vec2("+f+".0, "+p+".0);\n      return sampleTexture("+r+", uv);\n    }\n  ":"\n      float "+o+"(int row, int col, int depth) {\n        // Explicitly use integer operations as dot() only works on floats.\n        int index = row * "+i+" + col * "+a+" + depth + "+si(r)+";\n        vec2 uv = uvFromFlat("+p+", "+f+", index);\n        return sampleTexture("+r+", uv);\n      }\n  "}(t);case 4:return function(t){var n=t.shapeInfo.logicalShape,r=t.name,o="get"+r.charAt(0).toUpperCase()+r.slice(1),i=n[3],a=n[2]*i,s=n[1]*a,u=pe(n),c=u.newShape,l=u.keptDims;if(c.length<n.length){var d=li(t,c);return"\n      "+e(d)+"\n      float "+o+"(int row, int col, int depth, int depth2) {\n        return "+o+"("+di(["row","col","depth","depth2"],l)+");\n      }\n    "}if(t.shapeInfo.isUniform)return"\n      float "+o+"(int row, int col, int depth, int depth2) {\n        int index = round(dot(vec4(row, col, depth, depth2),\n                          vec4("+s+", "+a+", "+i+", 1)));\n        "+ui(t)+"\n      }\n    ";var h=t.shapeInfo.flatOffset,p=t.shapeInfo.texShape,f=p[0],m=p[1];return m===s&&null==h?"\n      float "+o+"(int row, int col, int depth, int depth2) {\n        float texR = float(row);\n        float texC =\n            dot(vec3(col, depth, depth2),\n                vec3("+a+", "+i+", 1));\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2("+m+".0, "+f+".0);\n        return sampleTexture("+r+", uv);\n      }\n    ":m===i&&null==h?"\n      float "+o+"(int row, int col, int depth, int depth2) {\n        float texR = dot(vec3(row, col, depth),\n                         vec3("+n[1]*n[2]+", "+n[2]+", 1));\n        float texC = float(depth2);\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                  vec2("+m+".0, "+f+".0);\n        return sampleTexture("+r+", uv);\n      }\n    ":"\n    float "+o+"(int row, int col, int depth, int depth2) {\n      // Explicitly use integer operations as dot() only works on floats.\n      int index = row * "+s+" + col * "+a+" +\n          depth * "+i+" + depth2;\n      vec2 uv = uvFromFlat("+f+", "+m+", index + "+si(r)+");\n      return sampleTexture("+r+", uv);\n    }\n  "}(t);case 5:return function(t){var n=t.shapeInfo.logicalShape,r=t.name,o="get"+r.charAt(0).toUpperCase()+r.slice(1),i=n[4],a=n[3]*i,s=n[2]*a,u=n[1]*s,c=pe(n),l=c.newShape,d=c.keptDims;if(l.length<n.length){var h=li(t,l);return"\n      "+e(h)+"\n      float "+o+"(int row, int col, int depth, int depth2, int depth3) {\n        return "+o+"("+di(["row","col","depth","depth2","depth3"],d)+");\n      }\n    "}if(t.shapeInfo.isUniform)return"\n      float "+o+"(int row, int col, int depth, int depth2, int depth3) {\n        float index = dot(\n          vec4(row, col, depth, depth2),\n          vec4("+u+", "+s+", "+a+", "+i+")) +\n          depth3;\n        "+ui(t)+"\n      }\n    ";var p=t.shapeInfo.flatOffset,f=t.shapeInfo.texShape,m=f[0],v=f[1];return v===u&&null==p?"\n      float "+o+"(int row, int col, int depth, int depth2, int depth3) {\n        int texR = row;\n        float texC = dot(vec4(col, depth, depth2, depth3),\n                         vec4("+s+", "+a+", "+i+", 1));\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2("+v+".0, "+m+".0);\n        return sampleTexture("+r+", uv);\n      }\n    ":v===i&&null==p?"\n      float "+o+"(int row, int col, int depth, int depth2, int depth3) {\n        float texR = dot(\n          vec4(row, col, depth, depth2),\n          vec4("+n[1]*n[2]*n[3]+",\n               "+n[2]*n[3]+", "+n[3]+", 1));\n        int texC = depth3;\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                  vec2("+v+".0, "+m+".0);\n        return sampleTexture("+r+", uv);\n      }\n    ":"\n    float "+o+"(int row, int col, int depth, int depth2, int depth3) {\n      // Explicitly use integer operations as dot() only works on floats.\n      int index = row * "+u+" + col * "+s+" + depth * "+a+" +\n          depth2 * "+i+" + depth3 + "+si(r)+";\n      vec2 uv = uvFromFlat("+m+", "+v+", index);\n      return sampleTexture("+r+", uv);\n    }\n  "}(t);case 6:return function(t){var n=t.shapeInfo.logicalShape,r=t.name,o="get"+r.charAt(0).toUpperCase()+r.slice(1),i=pe(n),a=i.newShape,s=i.keptDims;if(a.length<n.length){var u=li(t,a);return"\n      "+e(u)+"\n      float "+o+"(int row, int col, int depth,\n                    int depth2, int depth3, int depth4) {\n        return "+o+"("+di(["row","col","depth","depth2","depth3","depth4"],s)+");\n      }\n    "}var c=n[5],l=n[4]*c,d=n[3]*l,h=n[2]*d,p=n[1]*h;if(t.shapeInfo.isUniform)return"\n      float "+o+"(int row, int col, int depth,\n                  int depth2, int depth3, int depth4) {\n        int index = round(dot(\n          vec4(row, col, depth, depth2),\n          vec4("+p+", "+h+", "+d+", "+l+")) +\n          dot(\n            vec2(depth3, depth4),\n            vec2("+c+", 1)));\n        "+ui(t)+"\n      }\n    ";var f=t.shapeInfo.flatOffset,m=t.shapeInfo.texShape,v=m[0],g=m[1];return g===p&&null==f?"\n      float "+o+"(int row, int col, int depth,\n                    int depth2, int depth3, int depth4) {\n        int texR = row;\n        float texC = dot(vec4(col, depth, depth2, depth3),\n          vec4("+h+", "+d+", "+l+", "+c+")) +\n               float(depth4);\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2("+g+".0, "+v+".0);\n        return sampleTexture("+r+", uv);\n      }\n    ":g===c&&null==f?"\n      float "+o+"(int row, int col, int depth,\n                    int depth2, int depth3, int depth4) {\n        float texR = dot(vec4(row, col, depth, depth2),\n          vec4("+n[1]*n[2]*n[3]*n[4]+",\n               "+n[2]*n[3]*n[4]+",\n               "+n[3]*n[4]+",\n               "+n[4]+")) + float(depth3);\n        int texC = depth4;\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                  vec2("+g+".0, "+v+".0);\n        return sampleTexture("+r+", uv);\n      }\n    ":"\n    float "+o+"(int row, int col, int depth,\n                  int depth2, int depth3, int depth4) {\n      // Explicitly use integer operations as dot() only works on floats.\n      int index = row * "+p+" + col * "+h+" + depth * "+d+" +\n          depth2 * "+l+" + depth3 * "+c+" + depth4 + "+si(r)+";\n      vec2 uv = uvFromFlat("+v+", "+g+", index);\n      return sampleTexture("+r+", uv);\n    }\n  "}(t);default:throw new Error(n.length+"-D input sampling is not yet supported")}}(e);var o=e.shapeInfo.logicalShape,i=t.logicalShape;return o.length<=i.length&&(r+=n?function(e,t){var n,r=e.name,o=r.charAt(0).toUpperCase()+r.slice(1),i="get"+o+"AtOutCoords",a=e.shapeInfo.logicalShape.length,s=t.logicalShape.length,u=po(e.shapeInfo.logicalShape,t.logicalShape),c=ci(s),l=s-a,d=["x","y","z","w","u","v"];n=0===a?"":s<2&&u.length>=1?"coords = 0;":u.map((function(e){return"coords."+d[e+l]+" = 0;"})).join("\n");var h;h=s<2&&a>0?"coords":e.shapeInfo.logicalShape.map((function(e,t){return"coords."+d[t+l]})).join(", ");var p="return outputValue;",f=1===oe(e.shapeInfo.logicalShape),m=1===oe(t.logicalShape);if(1!==a||f||m){if(f&&!m)p=1===s?"\n        return vec4(outputValue.x, outputValue.x, 0., 0.);\n      ":"\n        return vec4(outputValue.x);\n      ";else if(u.length){var v=a-2,g=a-1;u.indexOf(v)>-1&&u.indexOf(g)>-1?p="return vec4(outputValue.x);":u.indexOf(v)>-1?p="return vec4(outputValue.x, outputValue.y, outputValue.x, outputValue.y);":u.indexOf(g)>-1&&(p="return vec4(outputValue.xx, outputValue.zz);")}}else p="\n      return vec4(outputValue.xy, outputValue.xy);\n    ";return"\n    vec4 "+i+"() {\n      "+c+" coords = getOutputCoords();\n      "+n+"\n      vec4 outputValue = get"+o+"("+h+");\n      "+p+"\n    }\n  "}(e,t):function(e,t){var n=e.name,r=n.charAt(0).toUpperCase()+n.slice(1),o="get"+r+"AtOutCoords",i=t.texShape,a=e.shapeInfo.texShape,s=e.shapeInfo.logicalShape.length,u=t.logicalShape.length;if(!e.shapeInfo.isUniform&&s===u&&null==e.shapeInfo.flatOffset&&ie(a,i))return"\n      float "+o+"() {\n        return sampleTexture("+n+", resultUV);\n      }\n    ";var c=ci(u),l=po(e.shapeInfo.logicalShape,t.logicalShape),d=u-s,h=["x","y","z","w","u","v"];return"\n    float "+o+"() {\n      "+c+" coords = getOutputCoords();\n      "+(0===s?"":u<2&&l.length>=1?"coords = 0;":l.map((function(e){return"coords."+h[e+d]+" = 0;"})).join("\n"))+"\n      return get"+r+"("+(u<2&&s>0?"coords":e.shapeInfo.logicalShape.map((function(e,t){return"coords."+h[t+d]})).join(", "))+");\n    }\n  "}(e,t)),r}(e,t,r)})).join("\n"),c=t.texShape,l=Jo(),d=function(e){return"\n    float sampleTexture(sampler2D textureSampler, vec2 uv) {\n      return "+e.texture2D+"(textureSampler, uv).r;\n    }\n  "}(l),h=function(e){return e.version+"\n    precision highp float;\n    precision highp int;\n    precision highp sampler2D;\n    "+e.varyingFs+" vec2 resultUV;\n    "+e.defineOutput+"\n    const vec2 halfCR = vec2(0.5, 0.5);\n\n    struct ivec5\n    {\n      int x;\n      int y;\n      int z;\n      int w;\n      int u;\n    };\n\n    struct ivec6\n    {\n      int x;\n      int y;\n      int z;\n      int w;\n      int u;\n      int v;\n    };\n\n    uniform float NAN;\n    "+e.defineSpecialNaN+"\n    "+e.defineSpecialInf+"\n    "+e.defineRound+"\n\n    int imod(int x, int y) {\n      return x - y * (x / y);\n    }\n\n    int idiv(int a, int b, float sign) {\n      int res = a / b;\n      int mod = imod(a, b);\n      if (sign < 0. && mod != 0) {\n        res -= 1;\n      }\n      return res;\n    }\n\n    //Based on the work of Dave Hoskins\n    //https://www.shadertoy.com/view/4djSRW\n    #define HASHSCALE1 443.8975\n    float random(float seed){\n      vec2 p = resultUV * seed;\n      vec3 p3  = fract(vec3(p.xyx) * HASHSCALE1);\n      p3 += dot(p3, p3.yzx + 19.19);\n      return fract((p3.x + p3.y) * p3.z);\n    }\n\n    "+ri+"\n    "+oi+"\n    "+ii+"\n  "}(l);return t.isPacked?(i=function(e,t){switch(e.length){case 0:return"\n    int getOutputCoords() {\n      return 0;\n    }\n  ";case 1:return function(e,t){var n=[Math.ceil(t[0]/2),Math.ceil(t[1]/2)];return 1===n[0]?"\n      int getOutputCoords() {\n        return 2 * int(resultUV.x * "+n[1]+".0);\n      }\n    ":1===n[1]?"\n      int getOutputCoords() {\n        return 2 * int(resultUV.y * "+n[0]+".0);\n      }\n    ":"\n    int getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2("+n[0]+", "+n[1]+"));\n      return 2 * (resTexRC.x * "+n[1]+" + resTexRC.y);\n    }\n  "}(0,t);case 2:return function(e,t){var n=[Math.ceil(t[0]/2),Math.ceil(t[1]/2)];if(ie(e,t))return"\n      ivec2 getOutputCoords() {\n        return 2 * ivec2(resultUV.yx * vec2("+n[0]+", "+n[1]+"));\n      }\n    ";var r=Math.ceil(e[1]/2);return"\n    ivec2 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2("+n[0]+", "+n[1]+"));\n\n      int index = resTexRC.x * "+n[1]+" + resTexRC.y;\n      int r = 2 * (index / "+r+");\n      int c = imod(index, "+r+") * 2;\n\n      return ivec2(r, c);\n    }\n  "}(e,t);case 3:return n=e,r=t,o=[Math.ceil(r[0]/2),Math.ceil(r[1]/2)],a=(i=Math.ceil(n[2]/2))*Math.ceil(n[1]/2),"\n    ivec3 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2("+o[0]+", "+o[1]+"));\n      int index = resTexRC.x * "+o[1]+" + resTexRC.y;\n\n      int b = index / "+a+";\n      index -= b * "+a+";\n\n      int r = 2 * (index / "+i+");\n      int c = imod(index, "+i+") * 2;\n\n      return ivec3(b, r, c);\n    }\n  ";default:return function(e,t){for(var n=[Math.ceil(t[0]/2),Math.ceil(t[1]/2)],r=Math.ceil(e[e.length-1]/2),o=r*Math.ceil(e[e.length-2]/2),i=o,a="",s="b, r, c",u=2;u<e.length-1;u++)a="\n      int b"+u+" = index / "+(i*=e[e.length-u-1])+";\n      index -= b"+u+" * "+i+";\n    "+a,s="b"+u+", "+s;return"\n    ivec"+e.length+" getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2("+n[0]+", "+n[1]+"));\n      int index = resTexRC.x * "+n[1]+" + resTexRC.y;\n\n      "+a+"\n\n      int b = index / "+o+";\n      index -= b * "+o+";\n\n      int r = 2 * (index / "+r+");\n      int c = imod(index, "+r+") * 2;\n\n      return ivec"+e.length+"("+s+");\n    }\n  "}(e,t)}var n,r,o,i,a}(t.logicalShape,c),a=function(e){return"\n    void setOutput(vec4 val) {\n      "+e.output+" = val;\n    }\n  "}(l)):(i=function(e,t){switch(e.length){case 0:return"\n    int getOutputCoords() {\n      return 0;\n    }\n  ";case 1:return function(e,t){return 1===t[0]?"\n      int getOutputCoords() {\n        return int(resultUV.x * "+t[1]+".0);\n      }\n    ":1===t[1]?"\n      int getOutputCoords() {\n        return int(resultUV.y * "+t[0]+".0);\n      }\n    ":"\n    int getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2("+t[0]+", "+t[1]+"));\n      return resTexRC.x * "+t[1]+" + resTexRC.y;\n    }\n  "}(0,t);case 2:return function(e,t){return ie(e,t)?"\n      ivec2 getOutputCoords() {\n        return ivec2(resultUV.yx * vec2("+t[0]+", "+t[1]+"));\n      }\n    ":1===e[1]?"\n      ivec2 getOutputCoords() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n                               vec2("+t[0]+", "+t[1]+"));\n        int index = resTexRC.x * "+t[1]+" + resTexRC.y;\n        return ivec2(index, 0);\n      }\n    ":1===e[0]?"\n      ivec2 getOutputCoords() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n                               vec2("+t[0]+", "+t[1]+"));\n        int index = resTexRC.x * "+t[1]+" + resTexRC.y;\n        return ivec2(0, index);\n      }\n    ":"\n    ivec2 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2("+t[0]+", "+t[1]+"));\n      int index = resTexRC.x * "+t[1]+" + resTexRC.y;\n      int r = index / "+e[1]+";\n      int c = index - r * "+e[1]+";\n      return ivec2(r, c);\n    }\n  "}(e,t);case 3:return n=t,r=Zo(["r","c","d"],e),"\n    ivec3 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2("+n[0]+", "+n[1]+"));\n      int index = resTexRC.x * "+n[1]+" + resTexRC.y;\n      "+r+"\n      return ivec3(r, c, d);\n    }\n  ";case 4:return function(e,t){var n=Zo(["r","c","d","d2"],e);return"\n    ivec4 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n        vec2("+t[0]+", "+t[1]+"));\n      int index = resTexRC.x * "+t[1]+" + resTexRC.y;\n      "+n+"\n      return ivec4(r, c, d, d2);\n    }\n  "}(e,t);case 5:return function(e,t){var n=Zo(["r","c","d","d2","d3"],e);return"\n    ivec5 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx * vec2("+t[0]+",\n                             "+t[1]+"));\n\n      int index = resTexRC.x * "+t[1]+" + resTexRC.y;\n\n      "+n+"\n\n      ivec5 outShape = ivec5(r, c, d, d2, d3);\n      return outShape;\n    }\n  "}(e,t);case 6:return function(e,t){var n=Zo(["r","c","d","d2","d3","d4"],e);return"\n    ivec6 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n        vec2("+t[0]+", "+t[1]+"));\n      int index = resTexRC.x * "+t[1]+" + resTexRC.y;\n\n      "+n+"\n\n      ivec6 result = ivec6(r, c, d, d2, d3, d4);\n      return result;\n    }\n  "}(e,t);default:throw new Error(e.length+"-D output sampling is not yet supported")}var n,r}(t.logicalShape,c),a=function(e){return"\n    void setOutput(float val) {\n      "+e.output+" = vec4(val, 0, 0, 0);\n    }\n  "}(l)),r&&(h+=ai),[h,d,a,s,i,u,n].join("\n")}var ri="\nvec2 uvFromFlat(int texNumR, int texNumC, int index) {\n  int texR = index / texNumC;\n  int texC = index - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\nvec2 packedUVfrom1D(int texNumR, int texNumC, int index) {\n  int texelIndex = index / 2;\n  int texR = texelIndex / texNumC;\n  int texC = texelIndex - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\n",oi="\nvec2 packedUVfrom2D(int texelsInLogicalRow, int texNumR,\n  int texNumC, int row, int col) {\n  int texelIndex = (row / 2) * texelsInLogicalRow + (col / 2);\n  int texR = texelIndex / texNumC;\n  int texC = texelIndex - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\n",ii="\nvec2 packedUVfrom3D(int texNumR, int texNumC,\n    int texelsInBatch, int texelsInLogicalRow, int b,\n    int row, int col) {\n  int index = b * texelsInBatch + (row / 2) * texelsInLogicalRow + (col / 2);\n  int texR = index / texNumC;\n  int texC = index - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\n",ai="\n  float getChannel(vec4 frag, vec2 innerDims) {\n    vec2 modCoord = mod(innerDims, 2.);\n    return modCoord.x == 0. ?\n      (modCoord.y == 0. ? frag.r : frag.g) :\n      (modCoord.y == 0. ? frag.b : frag.a);\n  }\n  float getChannel(vec4 frag, int dim) {\n    float modCoord = mod(float(dim), 2.);\n    return modCoord == 0. ? frag.r : frag.g;\n  }\n";function si(e){return"offset"+e}function ui(e){var t=e.name,n=oe(e.shapeInfo.logicalShape);return n<2?"return "+t+";":"\n    for (int i = 0; i < "+n+"; i++) {\n      if (i == index) {\n        return "+t+"[i];\n      }\n    }\n  "}function ci(e){if(e<=1)return"int";if(2===e)return"ivec2";if(3===e)return"ivec3";if(4===e)return"ivec4";if(5===e)return"ivec5";if(6===e)return"ivec6";throw Error("GPU for rank "+e+" is not yet supported")}function li(e,t){var n=JSON.parse(JSON.stringify(e));return n.shapeInfo.logicalShape=t,n}function di(e,t){return t.map((function(t){return e[t]})).join(", ")}var hi=function(e,t,n,r){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,ee(e.length>2,(function(){return"Packed arg"+(n.charAt(0).toUpperCase()+n.slice(1))+" supports only inputs with rank above 2."}));var o=e[e.length-1],i=Math.ceil(o/t);this.outputShape=e.slice(0,-1),i>1&&this.outputShape.push(i),r||this.variableNames.push("bestIndicesA");var a,s,u=this.outputShape,c=u.length,l=ci(c),d=$o("coords",c);if(1===i){var h=ci(s=c+1);a="\n        "+h+" sourceLocR = "+h+"("+d.join()+", 0);\n        ++"+d[c-1]+";\n        "+h+" sourceLocG = "+h+"("+d.join()+", 0);\n        ++"+d[c-2]+";\n        "+h+" sourceLocA = "+h+"("+d.join()+", 0);\n        --"+d[c-1]+";\n        "+h+" sourceLocB = "+h+"("+d.join()+", 0);\n        --"+d[c-2]+";"}else s=c,a="\n        "+l+" sourceLocR = coords;\n        ++"+d[c-1]+";\n        "+l+" sourceLocG = coords;\n        ++"+d[c-2]+";\n        "+l+" sourceLocA = coords;\n        --"+d[c-1]+";\n        "+l+" sourceLocB = coords;\n        --"+d[c-2]+";";var p=["x","y","z","w","u","v"].slice(0,s),f="."+p[s-1],m=p.map((function(e){return"int "+e})),v=$o("sourceLocR",s-1).concat("inIdx.r"),g=$o("sourceLocG",s-1).concat("inIdx.g"),b=$o("sourceLocB",s-1).concat("inIdx.b"),A=$o("sourceLocA",s-1).concat("inIdx.a"),y="max"===n?"greaterThan":"lessThan",x=r?"":"\n          inIdx = round(vec4(getBestIndicesAChannel("+v.join()+"),\n                             getBestIndicesAChannel("+g.join()+"),\n                             getBestIndicesAChannel("+b.join()+"),\n                             getBestIndicesAChannel("+A.join()+")));",C="vec4(\n            getAChannel("+v.join()+"),\n            hasNextCol ? getAChannel("+g.join()+") : 0.,\n            hasNextRow ? getAChannel("+b.join()+") : 0.,\n            hasNextRow && hasNextCol ? getAChannel("+A.join()+") : 0.)",w=r?"":"\n      float getBestIndicesAChannel("+m.join()+") {\n        return getChannel(getBestIndicesA("+p.join()+"),\n                                          vec2("+p.slice(-2).join()+"));\n      }";this.userCode="\n      float getAChannel("+m.join()+") {\n        return getChannel(getA("+p.join()+"),\n                               vec2("+p.slice(-2).join()+"));\n      }\n      "+w+"\n      void main() {\n        "+l+" coords = getOutputCoords();\n        bool hasNextCol = "+d[c-1]+" < "+(u[c-1]-1)+";\n        bool hasNextRow = "+d[c-2]+" < "+(u[c-2]-1)+";\n        "+a+"\n        ivec4 srcIdx = ivec4(sourceLocR"+f+", sourceLocG"+f+",\n          sourceLocB"+f+", sourceLocA"+f+") * "+t+";\n        ivec4 inIdx = srcIdx;\n        vec4 bestIndex = vec4(inIdx);\n        vec4 bestValue = "+C+";\n\n        for (int i = 0; i < "+t+"; i++) {\n          inIdx = srcIdx;\n          "+x+"\n          vec4 candidate = "+C+";\n          bvec4 nan = isnan(candidate);\n          bvec4 replace = bvec4(\n            vec4("+y+"(candidate, bestValue)) * (vec4(1.0) - vec4(nan)));\n\n          bestValue = vec4(replace.x  ? candidate.x : bestValue.x,\n                           replace.y  ? candidate.y : bestValue.y,\n                           replace.z  ? candidate.z : bestValue.z,\n                           replace.w  ? candidate.w : bestValue.w);\n          bestIndex = mix(bestIndex, vec4(inIdx), vec4(replace));\n          srcIdx++;\n        }\n        setOutput(bestIndex);\n      }\n    "},pi=function(e){this.variableNames=["dy"],this.outputShape=e.inShape;var t=e.filterHeight,n=e.filterWidth,r=e.strideHeight,o=e.strideWidth,i=e.dilationHeight,a=e.dilationWidth,s=e.effectiveFilterHeight,u=e.effectiveFilterWidth,c=s-1-e.padInfo.top,l=u-1-e.padInfo.left,d=1/(t*n);this.userCode="\n      const ivec2 pads = ivec2("+c+", "+l+");\n      const float avgMultiplier = float("+d+");\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n\n        ivec2 dyRCCorner = coords.yz - pads;\n        int dyRCorner = dyRCCorner.x;\n        int dyCCorner = dyRCCorner.y;\n\n        // Convolve dy(?, ?, d) with pos mask(:, :, d) to get dx(xR, xC, d).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < "+s+";\n            wR += "+i+") {\n          float dyR = float(dyRCorner + wR) / "+r+".0;\n\n          if (dyR < 0.0 || dyR >= "+e.outHeight+".0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          for (int wC = 0; wC < "+u+";\n            wC+= "+a+") {\n            float dyC = float(dyCCorner + wC) / "+o+".0;\n\n            if (dyC < 0.0 || dyC >= "+e.outWidth+".0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            float dyValue = getDy(b, idyR, idyC, d);\n\n            dotProd += dyValue * avgMultiplier;\n          }\n        }\n        setOutput(dotProd);\n      }\n    "},fi=function(e){this.variableNames=["dy"],this.outputShape=e.inShape;var t=e.filterDepth,n=e.filterHeight,r=e.filterWidth,o=e.strideDepth,i=e.strideHeight,a=e.strideWidth,s=e.dilationDepth,u=e.dilationHeight,c=e.dilationWidth,l=e.effectiveFilterDepth,d=e.effectiveFilterHeight,h=e.effectiveFilterWidth,p=l-1-e.padInfo.front,f=d-1-e.padInfo.top,m=h-1-e.padInfo.left,v=1/(t*n*r);this.userCode="\n      const ivec3 pads = ivec3("+p+", "+f+", "+m+");\n      const float avgMultiplier = float("+v+");\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int ch = coords.u;\n\n        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;\n        int dyDCorner = dyCorner.x;\n        int dyRCorner = dyCorner.y;\n        int dyCCorner = dyCorner.z;\n\n        // Convolve dy(?, ?, ?, d) with pos mask(:, :, :, ch) to get\n        // dx(xD, xR, xC, ch).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n\n        for (int wD = 0; wD < "+l+";\n            wD += "+s+") {\n          float dyD = float(dyDCorner + wD) / "+o+".0;\n\n          if (dyD < 0.0 || dyD >= "+e.outDepth+".0 || fract(dyD) > 0.0) {\n            continue;\n          }\n          int idyD = int(dyD);\n\n          for (int wR = 0; wR < "+d+";\n              wR += "+u+") {\n            float dyR = float(dyRCorner + wR) / "+i+".0;\n\n            if (dyR < 0.0 || dyR >= "+e.outHeight+".0 ||\n                fract(dyR) > 0.0) {\n              continue;\n            }\n            int idyR = int(dyR);\n\n            for (int wC = 0; wC < "+h+";\n                wC += "+c+") {\n              float dyC = float(dyCCorner + wC) / "+a+".0;\n\n              if (dyC < 0.0 || dyC >= "+e.outWidth+".0 ||\n                  fract(dyC) > 0.0) {\n                continue;\n              }\n              int idyC = int(dyC);\n\n              float dyValue = getDy(batch, idyD, idyR, idyC, ch);\n\n              dotProd += dyValue * avgMultiplier;\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    "},mi=function(e,t,n,r,o,i){this.outputShape=[],this.variableNames=["x","mean","variance"],mo(e,t),mo(e,n);var a="0.0";null!=r&&(mo(e,r),this.variableNames.push("offset"),a="getOffsetAtOutCoords()");var s="1.0";null!=o&&(mo(e,o),this.variableNames.push("scale"),s="getScaleAtOutCoords()"),this.outputShape=e,this.userCode="\n      void main() {\n        float x = getXAtOutCoords();\n        float mean = getMeanAtOutCoords();\n        float variance = getVarianceAtOutCoords();\n        float offset = "+a+";\n        float scale = "+s+";\n        float inv = scale * inversesqrt(variance + float("+i+"));\n        setOutput(dot(vec3(x, -mean, offset), vec3(inv, inv, 1)));\n      }\n    "},vi=function(e,t,n,r,o,i){this.packedInputs=!0,this.packedOutput=!0,this.variableNames=["x","mean","variance"],mo(e,t),mo(e,n);var a="vec4(0.0)";null!=r&&(mo(e,r),this.variableNames.push("offset"),a="getOffsetAtOutCoords()");var s="vec4(1.0)";null!=o&&(mo(e,o),this.variableNames.push("scale"),s="getScaleAtOutCoords()"),this.outputShape=e,this.userCode="\n      void main() {\n        vec4 offset = "+a+";\n        vec4 scale = "+s+";\n\n        vec4 x = getXAtOutCoords();\n        vec4 mean = getMeanAtOutCoords();\n        vec4 variance = getVarianceAtOutCoords();\n\n        vec4 inv = scale * inversesqrt(variance + vec4("+i+"));\n\n        setOutput((x - mean) * inv + offset);\n      }\n    "},gi=function(e,t,n){this.variableNames=["AReal","AImag","BReal","BImag"],this.outputShape=mo(t,n),this.userCode="\n      float binaryOpComplex(\n          float areal, float aimag, float breal, float bimag) {\n        "+e+"\n      }\n\n      void main() {\n        float areal = getARealAtOutCoords();\n        float aimag = getAImagAtOutCoords();\n        float breal = getBRealAtOutCoords();\n        float bimag = getBImagAtOutCoords();\n        setOutput(binaryOpComplex(areal, aimag, breal, bimag));\n      }\n    "},bi="return a + b;",Ai="return a * b;",yi="return (a < 0.) ? b * a : a;",xi=function(e,t,n){this.variableNames=["A","B"],this.outputShape=mo(t,n),this.userCode="\n      float binaryOperation(float a, float b) {\n        "+e+"\n      }\n\n      void main() {\n        float a = getAAtOutCoords();\n        float b = getBAtOutCoords();\n        setOutput(binaryOperation(a, b));\n      }\n    "},Ci="\n  vec4 aLessThanZero = vec4(lessThan(a, vec4(0.)));\n  return (aLessThanZero * (b * a)) + ((vec4(1.0) - aLessThanZero) * a);\n",wi=function(e,t,n,r){void 0===r&&(r=!1),this.variableNames=["A","B"],this.supportsBroadcasting=!0,this.packedInputs=!0,this.packedOutput=!0,this.outputShape=mo(t,n);var o=this.outputShape.length,i="";if(r)if(0===o||1===oe(this.outputShape))i="\n          result.y = 0.;\n          result.z = 0.;\n          result.w = 0.;\n        ";else if(i="\n          "+ci(o)+" coords = getOutputCoords();\n        ",1===o)i+="\n            result.y = (coords + 1) >= "+this.outputShape[0]+" ? 0. : result.y;\n            result.z = 0.;\n            result.w = 0.;\n          ";else{var a=$o("coords",o);i+="\n            bool nextRowOutOfBounds =\n              ("+a[o-2]+" + 1) >= "+this.outputShape[o-2]+";\n            bool nextColOutOfBounds =\n              ("+a[o-1]+" + 1) >= "+this.outputShape[o-1]+";\n            result.y = nextColOutOfBounds ? 0. : result.y;\n            result.z = nextRowOutOfBounds ? 0. : result.z;\n            result.w = nextColOutOfBounds || nextRowOutOfBounds ? 0. : result.w;\n          "}this.userCode="\n      vec4 binaryOperation(vec4 a, vec4 b) {\n        "+e+"\n      }\n\n      void main() {\n        vec4 a = getAAtOutCoords();\n        vec4 b = getBAtOutCoords();\n\n        vec4 result = binaryOperation(a, b);\n        "+i+"\n\n        setOutput(result);\n      }\n    "},ki=function(){function e(e){this.variableNames=["A"],this.outputShape=e,this.userCode="\n      uniform float minVal;\n      uniform float maxVal;\n\n      void main() {\n        float value = getAAtOutCoords();\n        if (isnan(value)) {\n          setOutput(value);\n          return;\n        }\n\n        setOutput(clamp(value, minVal, maxVal));\n      }\n    "}return e.prototype.getCustomSetupFunc=function(e,t){var n=this;return function(r,o){null==n.minLoc&&(n.minLoc=r.getUniformLocationNoThrow(o,"minVal"),n.maxLoc=r.getUniformLocationNoThrow(o,"maxVal")),r.gl.uniform1f(n.minLoc,e),r.gl.uniform1f(n.maxLoc,t)}},e}(),_i=function(){function e(e){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=e,this.userCode="\n      uniform float minVal;\n      uniform float maxVal;\n\n      void main() {\n        vec4 value = getAAtOutCoords();\n\n        if (any(isnan(value))) {\n          setOutput(value);\n          return;\n        }\n\n        setOutput(clamp(value, vec4(minVal), vec4(maxVal)));\n      }\n    "}return e.prototype.getCustomSetupFunc=function(e,t){var n=this;return function(r,o){null==n.minLoc&&(n.minLoc=r.getUniformLocationNoThrow(o,"minVal"),n.maxLoc=r.getUniformLocationNoThrow(o,"maxVal")),r.gl.uniform1f(n.minLoc,e),r.gl.uniform1f(n.maxLoc,t)}},e}(),Ei=function(e){this.variableNames=["real","imag"],this.outputShape=e,this.userCode="\n      void main() {\n        float re = abs(getRealAtOutCoords());\n        float im = abs(getImagAtOutCoords());\n        float mx = max(re, im);\n\n        // sadly the length function in glsl is not underflow-safe\n        // (at least not on Intel GPUs). So the safe solution is\n        // to ensure underflow-safety in all cases.\n        setOutput(\n          mx == 0.0 ? 0.0 : mx * length(vec2(1, min(re, im)/mx))\n        );\n      }\n    "},Ii=function(e){this.outputShape=[],this.outputShape=Bn(e,1),this.variableNames=e.map((function(e,t){return"T"+t}));var t=new Array(e.length-1);t[0]=e[0][1];for(var n=1;n<t.length;n++)t[n]=t[n-1]+e[n][1];var r=["if (yC < "+t[0]+") setOutput(getT0(yR, yC));"];for(n=1;n<t.length;n++){var o=t[n-1];r.push("else if (yC < "+t[n]+") setOutput(getT"+n+"(yR, yC-"+o+"));")}var i=t.length,a=t[t.length-1];r.push("else setOutput(getT"+i+"(yR, yC-"+a+"));"),this.userCode="\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int yR = coords.x;\n        int yC = coords.y;\n\n        "+r.join("\n        ")+"\n      }\n    "},Ri=function(e,t){this.packedInputs=!0,this.packedOutput=!0,this.outputShape=[],this.outputShape=Bn(e,t);var n=this.outputShape,r=n.length,o=ci(r),i=$o("coords",r),a=["x","y","z","w","u","v"].slice(0,r);this.variableNames=e.map((function(e,t){return"T"+t}));var s=new Array(e.length-1);s[0]=e[0][t];for(var u=1;u<s.length;u++)s[u]=s[u-1]+e[u][t];var c=a[t],l=a.slice(-2),d=a.join(),h="if ("+c+" < "+s[0]+") {\n        return getChannel(\n            getT0("+d+"), vec2("+l.join()+"));\n        }";for(u=1;u<s.length;u++){var p=s[u-1];h+="\n        if ("+c+" < "+s[u]+"  && "+c+" >= "+s[u-1]+") {\n          return getChannel(\n            getT"+u+"("+Si(a,c,p)+"),\n            vec2("+Si(l,c,p)+"));\n        }"}var f=s.length,m=s[s.length-1];h+="\n        return getChannel(\n          getT"+f+"("+Si(a,c,m)+"),\n          vec2("+Si(l,c,m)+"));",this.userCode="\n      float getValue("+a.map((function(e){return"int "+e}))+") {\n        "+h+"\n      }\n\n      void main() {\n        "+o+" coords = getOutputCoords();\n        vec4 result = vec4(getValue("+i+"), 0., 0., 0.);\n\n        "+i[r-1]+" = "+i[r-1]+" + 1;\n        if ("+i[r-1]+" < "+n[r-1]+") {\n          result.g = getValue("+i+");\n        }\n\n        "+i[r-2]+" = "+i[r-2]+" + 1;\n        if ("+i[r-2]+" < "+n[r-2]+") {\n          result.a = getValue("+i+");\n        }\n\n        "+i[r-1]+" = "+i[r-1]+" - 1;\n        if ("+i[r-2]+" < "+n[r-2]+" &&\n            "+i[r-1]+" < "+n[r-1]+") {\n          result.b = getValue("+i+");\n        }\n        setOutput(result);\n      }\n    "};function Si(e,t,n){var r=e.indexOf(t);return e.map((function(e,t){return t===r?e+" - "+n:e})).join()}var Ti=function(e){this.variableNames=["x","dy"],this.outputShape=e.filterShape;var t=e.strideHeight,n=e.strideWidth,r=e.padInfo.top,o=e.padInfo.left,i="channelsLast"===e.dataFormat;this.userCode="\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int wR = coords.x;\n        int wC = coords.y;\n        int d1 = coords.z;\n        int d2 = coords.w;\n\n        // Convolve x(?, ?, d1) with dy(:, :, d2) to get dw(wR, wC, d1, d2).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n\n        for (int b = 0; b < "+e.batchSize+"; b++) {\n          for (int yR = 0; yR < "+e.outHeight+"; yR++) {\n            int xR = wR + yR * "+t+" - "+r+";\n\n            if (xR < 0 || xR >= "+e.inHeight+") {\n              continue;\n            }\n\n            for (int yC = 0; yC < "+e.outWidth+"; yC++) {\n              int xC = wC + yC * "+n+" - "+o+";\n\n              if (xC < 0 || xC >= "+e.inWidth+") {\n                continue;\n              }\n\n              if ("+i+") {\n                float dyValue = getDy(b, yR, yC, d2);\n                float xValue = getX(b, xR, xC, d1);\n                dotProd += (xValue * dyValue);\n              } else {\n                float dyValue = getDy(b, d2, yR, yC);\n                float xValue = getX(b, d1, xR, xC);\n                dotProd += (xValue * dyValue);\n              }\n\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    "},Di=function(e){this.variableNames=["dy","W"],this.outputShape=e.inShape;var t=e.filterHeight,n=e.filterWidth,r=e.strideHeight,o=e.strideWidth,i="channelsLast"===e.dataFormat,a=t-1-e.padInfo.top,s=n-1-e.padInfo.left,u=i?1:2,c=i?2:3,l=i?3:1;this.userCode="\n      const ivec2 pads = ivec2("+a+", "+s+");\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d1 = coords["+l+"];\n\n        ivec2 dyCorner = ivec2(coords["+u+"], coords["+c+"]) - pads;\n        int dyRCorner = dyCorner.x;\n        int dyCCorner = dyCorner.y;\n\n        // Convolve dy(?, ?, d2) with w(:, :, d1, d2) to compute dx(xR, xC, d1).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < "+t+"; wR++) {\n          float dyR = float(dyRCorner + wR) / "+r+".0;\n\n          if (dyR < 0.0 || dyR >= "+e.outHeight+".0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          int wRPerm = "+t+" - 1 - wR;\n\n          for (int wC = 0; wC < "+n+"; wC++) {\n            float dyC = float(dyCCorner + wC) / "+o+".0;\n\n            if (dyC < 0.0 || dyC >= "+e.outWidth+".0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            int wCPerm = "+n+" - 1 - wC;\n\n            for (int d2 = 0; d2 < "+e.outChannels+"; d2++) {\n\n              if ("+i+") {\n                float xValue = getDy(batch, idyR, idyC, d2);\n                float wValue = getW(wRPerm, wCPerm, d1, d2);\n                dotProd += xValue * wValue;\n              } else {\n                float xValue = getDy(batch, d2, idyR, idyC);\n                float wValue = getW(wRPerm, wCPerm, d1, d2);\n                dotProd += xValue * wValue;\n              }\n\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    "},Fi=function(e){this.variableNames=["x","dy"],this.outputShape=e.filterShape;var t=e.strideDepth,n=e.strideHeight,r=e.strideWidth,o=e.padInfo.front,i=e.padInfo.top,a=e.padInfo.left;this.userCode="\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int wF = coords.x;\n        int wR = coords.y;\n        int wC = coords.z;\n        int d1 = coords.w;\n        int d2 = coords.u;\n\n        float dotProd = 0.0;\n\n        for (int b = 0; b < "+e.batchSize+"; b++) {\n          for (int yF = 0; yF < "+e.outDepth+"; yF++) {\n            int xF = wF + yF * "+t+" - "+o+";\n\n            if (xF < 0 || xF >= "+e.inDepth+") {\n              continue;\n            }\n\n            for (int yR = 0; yR < "+e.outHeight+"; yR++) {\n              int xR = wR + yR * "+n+" - "+i+";\n\n              if (xR < 0 || xR >= "+e.inHeight+") {\n                continue;\n              }\n\n              for (int yC = 0; yC < "+e.outWidth+"; yC++) {\n                int xC = wC + yC * "+r+" - "+a+";\n\n                if (xC < 0 || xC >= "+e.inWidth+") {\n                  continue;\n                }\n\n                float dyValue = getDy(b, yF, yR, yC, d2);\n                float xValue = getX(b, xF, xR, xC, d1);\n                dotProd += (xValue * dyValue);\n              }\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    "},Ni=function(e){this.variableNames=["dy","W"],this.outputShape=e.inShape;var t=e.filterDepth,n=e.filterHeight,r=e.filterWidth,o=e.strideDepth,i=e.strideHeight,a=e.strideWidth,s=t-1-e.padInfo.front,u=n-1-e.padInfo.top,c=r-1-e.padInfo.left;this.userCode="\n      const ivec3 pads = ivec3("+s+", "+u+", "+c+");\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int d1 = coords.u;\n\n\n        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;\n        int dyFCorner = dyCorner.x;\n        int dyRCorner = dyCorner.y;\n        int dyCCorner = dyCorner.z;\n\n        float dotProd = 0.0;\n        for (int wF = 0; wF < "+t+"; wF++) {\n          float dyF = float(dyFCorner + wF) / "+o+".0;\n\n          if (dyF < 0.0 || dyF >= "+e.outDepth+".0 || fract(dyF) > 0.0) {\n            continue;\n          }\n          int idyF = int(dyF);\n\n          int wFPerm = "+t+" - 1 - wF;\n\n          for (int wR = 0; wR < "+n+"; wR++) {\n            float dyR = float(dyRCorner + wR) / "+i+".0;\n\n            if (dyR < 0.0 || dyR >= "+e.outHeight+".0 ||\n              fract(dyR) > 0.0) {\n              continue;\n            }\n            int idyR = int(dyR);\n\n            int wRPerm = "+n+" - 1 - wR;\n\n            for (int wC = 0; wC < "+r+"; wC++) {\n              float dyC = float(dyCCorner + wC) / "+a+".0;\n\n              if (dyC < 0.0 || dyC >= "+e.outWidth+".0 ||\n                  fract(dyC) > 0.0) {\n                continue;\n              }\n              int idyC = int(dyC);\n\n              int wCPerm = "+r+" - 1 - wC;\n\n              for (int d2 = 0; d2 < "+e.outChannels+"; d2++) {\n                float xValue = getDy(batch, idyF, idyR, idyC, d2);\n                float wValue = getW(wFPerm, wRPerm, wCPerm, d1, d2);\n                dotProd += xValue * wValue;\n              }\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    "},Bi=function(e){this.variableNames=["x","dy"],this.outputShape=e.filterShape;var t=e.strideHeight,n=e.strideWidth,r=e.padInfo.top,o=e.padInfo.left,i=e.outChannels/e.inChannels;this.userCode="\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int wR = coords.x;\n        int wC = coords.y;\n        int d1 = coords.z;\n        int dm = coords.w;\n        int d2 = d1 * "+i+" + dm;\n\n        float dotProd = 0.0;\n\n        // TO DO: Vec4 over the batch size\n        for (int b = 0; b < "+e.batchSize+"; b++) {\n          for (int yR = 0; yR < "+e.outHeight+"; yR++) {\n            int xR = wR + yR * "+t+" - "+r+";\n\n            if (xR < 0 || xR >= "+e.inHeight+") {\n              continue;\n            }\n\n            for (int yC = 0; yC < "+e.outWidth+"; yC++) {\n              int xC = wC + yC * "+n+" - "+o+";\n\n              if (xC < 0 || xC >= "+e.inWidth+") {\n                continue;\n              }\n\n              float dyValue = getDy(b, yR, yC, d2);\n              float xValue = getX(b, xR, xC, d1);\n              dotProd += (xValue * dyValue);\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    "},Oi=function(e){this.variableNames=["dy","W"],this.outputShape=e.inShape;var t=e.filterHeight,n=e.filterWidth,r=e.strideHeight,o=e.strideWidth,i=t-1-e.padInfo.top,a=n-1-e.padInfo.left,s=e.outChannels/e.inChannels;this.userCode="\n      const ivec2 pads = ivec2("+i+", "+a+");\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d1 = coords[3];\n        ivec2 dyCorner = coords.yz - pads;\n        int dyRCorner = dyCorner.x;\n        int dyCCorner = dyCorner.y;\n\n        float dotProd = 0.0;\n\n        for (int wR = 0; wR < "+t+"; wR++) {\n          float dyR = float(dyRCorner + wR) / "+r+".0;\n\n          if (dyR < 0.0 || dyR >= "+e.outHeight+".0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          int wRPerm = "+t+" - 1 - wR;\n\n          for (int wC = 0; wC < "+n+"; wC++) {\n            float dyC = float(dyCCorner + wC) / "+o+".0;\n\n            if (dyC < 0.0 || dyC >= "+e.outWidth+".0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            int wCPerm = "+n+" - 1 - wC;\n\n            // TO DO: Vec4 over the channelMul\n            for (int dm = 0; dm < "+s+"; dm++) {\n              int d2 = d1 * "+s+" + dm;\n              float xValue = getDy(batch, idyR, idyC, d2);\n              float wValue = getW(wRPerm, wCPerm, d1, dm);\n              dotProd += xValue * wValue;\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    "},Mi=function(e,t,n,r){void 0===t&&(t=!1),void 0===n&&(n=null),void 0===r&&(r=!1),this.variableNames=["x","W"],this.outputShape=e.outShape;var o=e.padInfo.top,i=e.padInfo.left,a=e.strideHeight,s=e.strideWidth,u=e.dilationHeight,c=e.dilationWidth,l=e.filterHeight,d=e.filterWidth,h=4*Math.floor(e.inChannels/4),p=e.inChannels%4,f="channelsLast"===e.dataFormat,m=f?1:2,v=f?2:3,g=f?3:1,b="",A="";n&&(b=r?"float activation(float a) {\n          float b = getPreluActivationWeightsAtOutCoords();\n          "+n+"\n        }":"\n          float activation(float x) {\n            "+n+"\n          }\n        ",A="result = activation(result);");var y=t?"result += getBiasAtOutCoords();":"";t&&this.variableNames.push("bias"),r&&this.variableNames.push("preluActivationWeights"),this.userCode="\n      "+b+"\n\n      const ivec2 strides = ivec2("+a+", "+s+");\n      const ivec2 pads = ivec2("+o+", "+i+");\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d2 = coords["+g+"];\n\n        ivec2 xRCCorner =\n            ivec2(coords["+m+"], coords["+v+"]) * strides - pads;\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        // Convolve x(?, ?, d1) with w(:, :, d1, d2) to get y(yR, yC, d2).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < "+l+"; wR++) {\n          int xR = xRCorner + wR * "+u+";\n\n          if (xR < 0 || xR >= "+e.inHeight+") {\n            continue;\n          }\n\n          for (int wC = 0; wC < "+d+"; wC++) {\n            int xC = xCCorner + wC * "+c+";\n\n            if (xC < 0 || xC >= "+e.inWidth+") {\n              continue;\n            }\n\n            for (int d1 = 0; d1 < "+h+"; d1 += 4) {\n              vec4 wValues = vec4(\n                getW(wR, wC, d1, d2),\n                getW(wR, wC, d1 + 1, d2),\n                getW(wR, wC, d1 + 2, d2),\n                getW(wR, wC, d1 + 3, d2)\n              );\n\n              if ("+f+") {\n                vec4 xValues = vec4(\n                  getX(batch, xR, xC, d1),\n                  getX(batch, xR, xC, d1 + 1),\n                  getX(batch, xR, xC, d1 + 2),\n                  getX(batch, xR, xC, d1 + 3)\n                );\n                dotProd += dot(xValues, wValues);\n              } else {\n                vec4 xValues = vec4(\n                  getX(batch, d1, xR, xC),\n                  getX(batch, d1 + 1, xR, xC),\n                  getX(batch, d1 + 2, xR, xC),\n                  getX(batch, d1 + 3, xR, xC)\n                );\n                dotProd += dot(xValues, wValues);\n              }\n            }\n\n            if ("+(1===p)+") {\n\n              if ("+f+") {\n                dotProd +=\n                    getX(batch, xR, xC, "+h+") *\n                    getW(wR, wC, "+h+", d2);\n              } else {\n                dotProd +=\n                    getX(batch, "+h+", xR, xC) *\n                    getW(wR, wC, "+h+", d2);\n              }\n\n            } else if ("+(2===p)+") {\n              vec2 wValues = vec2(\n                getW(wR, wC, "+h+", d2),\n                getW(wR, wC, "+h+" + 1, d2)\n              );\n\n              if ("+f+") {\n                vec2 xValues = vec2(\n                  getX(batch, xR, xC, "+h+"),\n                  getX(batch, xR, xC, "+h+" + 1)\n                );\n                dotProd += dot(xValues, wValues);\n              } else {\n                vec2 xValues = vec2(\n                  getX(batch, "+h+", xR, xC),\n                  getX(batch, "+h+" + 1, xR, xC)\n                );\n                dotProd += dot(xValues, wValues);\n              }\n\n            } else if ("+(3===p)+") {\n              vec3 wValues = vec3(\n                getW(wR, wC, "+h+", d2),\n                getW(wR, wC, "+h+" + 1, d2),\n                getW(wR, wC, "+h+" + 2, d2)\n              );\n\n              if ("+f+") {\n                vec3 xValues = vec3(\n                  getX(batch, xR, xC, "+h+"),\n                  getX(batch, xR, xC, "+h+" + 1),\n                  getX(batch, xR, xC, "+h+" + 2)\n                );\n                dotProd += dot(xValues, wValues);\n              } else {\n                vec3 xValues = vec3(\n                  getX(batch, "+h+", xR, xC),\n                  getX(batch, "+h+" + 1, xR, xC),\n                  getX(batch, "+h+" + 2, xR, xC)\n                );\n                dotProd += dot(xValues, wValues);\n              }\n\n            }\n          }\n        }\n\n        float result = dotProd;\n        "+y+"\n        "+A+"\n        setOutput(result);\n      }\n    "},Pi=function(e){this.variableNames=["x","W"],this.outputShape=e.outShape;var t=e.padInfo.front,n=e.padInfo.top,r=e.padInfo.left,o=e.strideDepth,i=e.strideHeight,a=e.strideWidth,s=e.dilationDepth,u=e.dilationHeight,c=e.dilationWidth,l=e.filterDepth,d=e.filterHeight,h=e.filterWidth,p=4*Math.floor(e.inChannels/4),f=e.inChannels%4;this.userCode="\n      const ivec3 strides = ivec3("+o+", "+i+", "+a+");\n      const ivec3 pads = ivec3("+t+", "+n+", "+r+");\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int d2 = coords.u;\n\n        ivec3 xFRCCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;\n        int xFCorner = xFRCCorner.x;\n        int xRCorner = xFRCCorner.y;\n        int xCCorner = xFRCCorner.z;\n\n        // Convolve x(?, ?, ?, d1) with w(:, :, :, d1, d2) to get\n        // y(yF, yR, yC, d2). ? = to be determined. : = across all\n        // values in that axis.\n        float dotProd = 0.0;\n        for (int wF = 0; wF < "+l+"; wF++) {\n          int xF = xFCorner + wF * "+s+";\n\n          if (xF < 0 || xF >= "+e.inDepth+") {\n            continue;\n          }\n\n          for (int wR = 0; wR < "+d+"; wR++) {\n            int xR = xRCorner + wR * "+u+";\n\n            if (xR < 0 || xR >= "+e.inHeight+") {\n              continue;\n            }\n\n            for (int wC = 0; wC < "+h+"; wC++) {\n              int xC = xCCorner + wC * "+c+";\n\n              if (xC < 0 || xC >= "+e.inWidth+") {\n                continue;\n              }\n\n              for (int d1 = 0; d1 < "+p+"; d1 += 4) {\n                vec4 xValues = vec4(\n                  getX(batch, xF, xR, xC, d1),\n                  getX(batch, xF, xR, xC, d1 + 1),\n                  getX(batch, xF, xR, xC, d1 + 2),\n                  getX(batch, xF, xR, xC, d1 + 3)\n                );\n                vec4 wValues = vec4(\n                  getW(wF, wR, wC, d1, d2),\n                  getW(wF, wR, wC, d1 + 1, d2),\n                  getW(wF, wR, wC, d1 + 2, d2),\n                  getW(wF, wR, wC, d1 + 3, d2)\n                );\n\n                dotProd += dot(xValues, wValues);\n              }\n\n              if ("+(1===f)+") {\n                dotProd +=\n                  getX(batch, xF, xR, xC, "+p+") *\n                  getW(wF, wR, wC, "+p+", d2);\n              } else if ("+(2===f)+") {\n                vec2 xValues = vec2(\n                  getX(batch, xF, xR, xC, "+p+"),\n                  getX(batch, xF, xR, xC, "+p+" + 1)\n                );\n                vec2 wValues = vec2(\n                  getW(wF, wR, wC, "+p+", d2),\n                  getW(wF, wR, wC, "+p+" + 1, d2)\n                );\n                dotProd += dot(xValues, wValues);\n              } else if ("+(3===f)+") {\n                vec3 xValues = vec3(\n                  getX(batch, xF, xR, xC, "+p+"),\n                  getX(batch, xF, xR, xC, "+p+" + 1),\n                  getX(batch, xF, xR, xC, "+p+" + 2)\n                );\n                vec3 wValues = vec3(\n                  getW(wF, wR, wC, "+p+", d2),\n                  getW(wF, wR, wC, "+p+" + 1, d2),\n                  getW(wF, wR, wC, "+p+" + 2, d2)\n                );\n                dotProd += dot(xValues, wValues);\n              }\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    "},Li=function(e,t,n,r){void 0===t&&(t=!1),void 0===n&&(n=null),void 0===r&&(r=!1),this.variableNames=["x","W"],this.outputShape=e.outShape;var o=e.inHeight,i=e.inWidth,a=e.padInfo.top,s=e.padInfo.left,u=e.strideHeight,c=e.strideWidth,l=e.dilationHeight,d=e.dilationWidth,h=e.filterHeight,p=e.filterWidth,f=e.outChannels/e.inChannels,m="",v="";n&&(m=r?"float activation(float a) {\n          float b = getPreluActivationWeightsAtOutCoords();\n          "+n+"\n        }":"\n          float activation(float x) {\n            "+n+"\n          }\n        ",v="result = activation(result);");var g=t?"result += getBiasAtOutCoords();":"";t&&this.variableNames.push("bias"),r&&this.variableNames.push("preluActivationWeights"),this.userCode="\n      "+m+"\n\n      const ivec2 strides = ivec2("+u+", "+c+");\n      const ivec2 pads = ivec2("+a+", "+s+");\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords.x;\n        ivec2 xRCCorner = coords.yz * strides - pads;\n        int d2 = coords.w;\n        int d1 = d2 / "+f+";\n        int q = d2 - d1 * "+f+";\n\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        // Convolve x(?, ?, d1) with w(:, :, d1, q) to get y(yR, yC, d2).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        // TO DO(dsmilkov): Flatten the two for loops and vec4 the operations.\n        for (int wR = 0; wR < "+h+"; wR++) {\n          int xR = xRCorner + wR * "+l+";\n\n          if (xR < 0 || xR >= "+o+") {\n            continue;\n          }\n\n          for (int wC = 0; wC < "+p+"; wC++) {\n            int xC = xCCorner + wC * "+d+";\n\n            if (xC < 0 || xC >= "+i+") {\n              continue;\n            }\n\n            float xVal = getX(batch, xR, xC, d1);\n            float wVal = getW(wR, wC, d1, q);\n            dotProd += xVal * wVal;\n          }\n        }\n\n        float result = dotProd;\n        "+g+"\n        "+v+"\n        setOutput(result);\n      }\n    "},zi=function(e,t,n,r){void 0===t&&(t=!1),void 0===n&&(n=null),void 0===r&&(r=!1),this.variableNames=["x","W"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=e.outShape;for(var o=e.inHeight,i=e.inWidth,a=e.padInfo.top,s=e.padInfo.left,u=e.strideHeight,c=e.strideWidth,l=e.dilationHeight,d=e.dilationWidth,h=e.filterHeight,p=e.filterWidth,f=p,m="int xR; int xC; int xCOffset;",v=0;v<h;v++)for(var g=0;g<p;g++)m+="\n          vec4 xTexelR"+v+"C"+2*g+" = vec4(0.);\n          vec4 wR"+v+"C"+g+" = vec4(0.);\n          vec4 xR"+v+"C"+g+" = vec4(0.);";for(v=0;v<h;v++)for(var b=0;b<f;b++){if(m+="\n          xR = xRCorner + "+v*l+";\n          xC = xCCorner + "+(g=2*b)*d+";\n        ",1===c){if(g<p&&(m+=s%2==1?"\n                xCOffset = xC + 1;\n                if(xR >= 0 && xR < "+o+" && xCOffset >= 0 && xCOffset < "+i+") {\n                  xTexelR"+v+"C"+g+" = getX(batch, xR, xCOffset, d1);\n\n                  // Need to manually clear unused channels in case\n                  // we're reading from recycled texture.\n                  if(xCOffset + 1 >= "+i+") {\n                    xTexelR"+v+"C"+g+".zw = vec2(0.);\n                  }\n                } else {\n                  xTexelR"+v+"C"+g+" = vec4(0.);\n                }\n\n                xCOffset = xC + 1 - 2;\n                if(xR >= 0 && xR < "+o+" && xCOffset >= 0 && xCOffset < "+i+") {\n                  vec4 previous = getX(batch, xR, xCOffset, d1);\n\n                  // Need to manually clear unused channels in case\n                  // we're reading from recycled texture.\n                  if(xCOffset + 1 >= "+i+") {\n                    previous.zw = vec2(0.);\n                  }\n\n                  xR"+v+"C"+g+" = vec4(previous.zw, xTexelR"+v+"C"+g+".xy);\n                } else {\n                  xR"+v+"C"+g+" = vec4(0, 0, xTexelR"+v+"C"+g+".xy);\n                }\n              ":"\n                if(xR >= 0 && xR < "+o+" && xC >= 0 && xC < "+i+") {\n                  xTexelR"+v+"C"+g+" = getX(batch, xR, xC, d1);\n                } else {\n                  xTexelR"+v+"C"+g+" = vec4(0.);\n                }\n\n                xR"+v+"C"+g+" = xTexelR"+v+"C"+g+";\n              ",g+1<p)){var A=s%2==0?J(d):d;d%2==0&&s%2==1||d%2!=0&&s%2!=1?(m+="\n                  xCOffset = xC + "+s%2+" + "+A+";\n\n                  if(xR >= 0 && xR < "+o+" &&\n                    xCOffset >= 0 && xCOffset < "+i+") {\n                    xTexelR"+v+"C"+(g+2)+" = getX(batch, xR, xCOffset, d1);\n                  }\n                ",d>1&&(m+="\n                    xCOffset -= 2;\n                    if(xR >= 0 && xR < "+o+" &&\n                      xCOffset >= 0 && xCOffset < "+i+") {\n                      xTexelR"+v+"C"+g+" = getX(batch, xR, xCOffset, d1);\n                    } else {\n                      xTexelR"+v+"C"+g+" = vec4(0.);\n                    }\n                  "),m+="\n                  xR"+v+"C"+(g+1)+" = vec4(\n                    xTexelR"+v+"C"+g+".zw, xTexelR"+v+"C"+(g+2)+".xy);\n                "):m+="\n                  xCOffset = xC + "+A+";\n\n                  if(xR >= 0 && xR < "+o+" &&\n                    xCOffset >= 0 && xCOffset < "+i+") {\n                    xTexelR"+v+"C"+(g+2)+" = getX(batch, xR, xCOffset, d1);\n                  }\n\n                  xR"+v+"C"+(g+1)+" = xTexelR"+v+"C"+(g+2)+";\n                "}}else g<p&&(m+="\n              if(xR >= 0 && xR < "+o+") {\n            ",s%2==1?(m+="\n                xCOffset = xC + 1 - "+c+";\n                if(xCOffset >= 0 && xCOffset < "+i+") {\n                  xTexelR"+v+"C"+g+" = getX(batch, xR, xCOffset, d1);\n                } else {\n                  xTexelR"+v+"C"+g+" = vec4(0.);\n                }\n\n                if(xC + 1 >= 0 && xC + 1 < "+i+") {\n                  xTexelR"+v+"C"+(g+2)+" = getX(batch, xR, xC + 1, d1);\n                } else {\n                  xTexelR"+v+"C"+(g+2)+" = vec4(0.);\n                }\n\n                xR"+v+"C"+g+" = vec4(\n                  xTexelR"+v+"C"+g+".zw, xTexelR"+v+"C"+(g+2)+".zw);\n              ",g+1<p&&(m+="\n                  vec4 final = vec4(0.);\n                  xCOffset = xC + 1 + "+c+";\n                  if(xCOffset >= 0 && xCOffset < "+i+") {\n                    final = getX(batch, xR, xCOffset, d1);\n                  }\n                  xR"+v+"C"+(g+1)+" = vec4(xTexelR"+v+"C"+(g+2)+".xy, final.xy);\n                ")):(m+="\n                if(xC >= 0 && xC < "+i+") {\n                  xTexelR"+v+"C"+g+" = getX(batch, xR, xC, d1);\n                } else {\n                  xTexelR"+v+"C"+g+" = vec4(0.);\n                }\n\n                xCOffset = xC + "+c+";\n                if(xCOffset >= 0 && xCOffset < "+i+") {\n                  xTexelR"+v+"C"+(g+2)+" = getX(batch, xR, xCOffset, d1);\n                } else {\n                  xTexelR"+v+"C"+(g+2)+" = vec4(0.);\n                }\n\n                xR"+v+"C"+g+" = vec4(\n                  xTexelR"+v+"C"+g+".xy, xTexelR"+v+"C"+(g+2)+".xy);\n              ",g+1<p&&(m+="\n                  xR"+v+"C"+(g+1)+" = vec4(\n                    xTexelR"+v+"C"+g+".zw, xTexelR"+v+"C"+(g+2)+".zw);\n                ")),m+="}");g<p&&(m+="\n            vec4 wTexelR"+v+"C"+g+" = getW("+v+", "+g+", d1, q);\n            wR"+v+"C"+g+" = vec4(wTexelR"+v+"C"+g+".xz, wTexelR"+v+"C"+g+".xz);\n          ",g+1<p&&(m+="\n              vec4 wTexelR"+v+"C"+(g+1)+" = getW("+v+", "+(g+1)+", d1, q);\n              wR"+v+"C"+(g+1)+" =\n                vec4(wTexelR"+v+"C"+(g+1)+".xz, wTexelR"+v+"C"+(g+1)+".xz);"))}for(v=0;v<h;v++)for(g=0;g<p;g++)m+="dotProd += xR"+v+"C"+g+" * wR"+v+"C"+g+";";var y="",x="";n&&(y=r?"vec4 activation(vec4 a) {\n          vec4 b = getPreluActivationWeightsAtOutCoords();\n          "+n+"\n        }":"vec4 activation(vec4 x) {\n          "+n+"\n        }",x="result = activation(result);");var C=t?"result += getBiasAtOutCoords();":"";t&&this.variableNames.push("bias"),r&&this.variableNames.push("preluActivationWeights"),this.userCode="\n      "+y+"\n\n      const ivec2 strides = ivec2("+u+", "+c+");\n      const ivec2 pads = ivec2("+a+", "+s+");\n\n      void main() {\n\n        ivec4 coords = getOutputCoords();\n        int batch = coords.x;\n        ivec2 xRCCorner = coords.yz * strides - pads;\n        int d2 = coords.w;\n        int d1 = d2;\n        int q = 0;\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        vec4 dotProd = vec4(0.);\n\n        "+m+"\n\n        vec4 result = dotProd;\n        "+C+"\n        "+x+"\n        setOutput(result);\n      }\n    "},Wi=function(e,t,n,r,o){this.variableNames=["Image","Boxes","BoxInd"],this.outputShape=[];var i=e[0],a=e[1],s=e[2],u=e[3],c=t[0],l=n[0],d=n[1];this.outputShape=[c,l,d,u];var h="bilinear"===r?1:0,p=[a-1+".0",s-1+".0"],f=p[0],m=p[1],v=l>1?[""+(a-1)/(l-1),"(y2-y1) * height_ratio","y1*"+f+" + float(y)*(height_scale)"]:["0.0","0.0","0.5 * (y1+y2) * "+f],g=v[0],b=v[1],A=v[2],y=d>1?[""+(s-1)/(d-1),"(x2-x1) * width_ratio","x1*"+m+" + float(x)*(width_scale)"]:["0.0","0.0","0.5 * (x1+x2) * "+m],x=y[0],C=y[1],w=y[2];this.userCode="\n      const float height_ratio = float("+g+");\n      const float width_ratio = float("+x+");\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int y = coords[1];\n        int x = coords[2];\n        int d = coords[3];\n\n        // get box vals\n        float y1 = getBoxes(b,0);\n        float x1 = getBoxes(b,1);\n        float y2 = getBoxes(b,2);\n        float x2 = getBoxes(b,3);\n\n        // get image in batch index\n        int bInd = round(getBoxInd(b));\n        if(bInd < 0 || bInd >= "+i+") {\n          return;\n        }\n\n        float height_scale = "+b+";\n        float width_scale = "+C+";\n\n        float in_y = "+A+";\n        if( in_y < 0.0 || in_y > "+f+" ) {\n          setOutput(float("+o+"));\n          return;\n        }\n        float in_x = "+w+";\n        if( in_x < 0.0 || in_x > "+m+" ) {\n          setOutput(float("+o+"));\n          return;\n        }\n\n        vec2 sourceFracIndexCR = vec2(in_x,in_y);\n        if("+h+" == 1) {\n          // Compute the four integer indices.\n          ivec2 sourceFloorCR = ivec2(sourceFracIndexCR);\n          ivec2 sourceCeilCR = ivec2(ceil(sourceFracIndexCR));\n\n          float topLeft = getImage(b, sourceFloorCR.y, sourceFloorCR.x, d);\n          float bottomLeft = getImage(b, sourceCeilCR.y, sourceFloorCR.x, d);\n          float topRight = getImage(b, sourceFloorCR.y, sourceCeilCR.x, d);\n          float bottomRight = getImage(b, sourceCeilCR.y, sourceCeilCR.x, d);\n\n          vec2 fracCR = sourceFracIndexCR - vec2(sourceFloorCR);\n\n          float top = topLeft + (topRight - topLeft) * fracCR.x;\n          float bottom = bottomLeft + (bottomRight - bottomLeft) * fracCR.x;\n          float newValue = top + (bottom - top) * fracCR.y;\n          setOutput(newValue);\n        } else {\n          // Compute the coordinators of nearest neighbor point.\n          ivec2 sourceNearestCR = ivec2(floor(\n            sourceFracIndexCR + vec2(0.5,0.5)));\n          float newValue = getImage(b, sourceNearestCR.y, sourceNearestCR.x, d);\n          setOutput(newValue);\n        }\n      }\n    "},Ui=function(e,t,n){this.variableNames=["x"],this.outputShape=e;var r=e.length,o=e[e.length-1],i=n?"<":">";this.userCode="\n      int getIndex(int i) {\n        "+(n?"return "+o+" -i - 1;":"return i;")+"\n      }\n\n      void main() {\n        "+ci(r)+" coords = getOutputCoords();\n        int end = "+Vi(r,"coords")+";\n        float val = 0.0;\n        for (int i = "+o+" - 1; i >= 0; i -= 1) {\n          int idx = getIndex(i);\n          if (idx "+i+" end) {\n            continue;\n          }\n          if (idx == end && "+t+") {\n            continue;\n          }\n          "+Vi(r,"coords")+" = idx;\n          val += getX("+function(e,t){if(1===e)return""+t;if(2===e)return t+".x, "+t+".y";if(3===e)return t+".x, "+t+".y, "+t+".z";if(4===e)return t+".x, "+t+".y, "+t+".z, "+t+".w";throw Error("Cumulative sum for rank "+e+" is not yet supported")}(r,"coords")+");\n        }\n        setOutput(val);\n      }\n    "};function Vi(e,t){if(1===e)return""+t;if(2===e)return t+".y";if(3===e)return t+".z";if(4===e)return t+".w";throw Error("Cumulative sum for rank "+e+" is not yet supported")}var Gi=function(e){this.variableNames=["A"],this.packedInputs=!1,this.packedOutput=!0,this.outPackingScheme=ft.DENSE;var t=Ct(e),n=Jo();this.outputShape=e,this.userCode="\n      ivec3 outCoordsFromFlatIndex(int index) {\n        "+Zo(["r","c","d"],e)+"\n        return ivec3(r, c, d);\n      }\n\n      void main() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n          vec2("+t[0]+", "+t[1]+"));\n        int index = 4 * (resTexRC.x * "+t[1]+" + resTexRC.y);\n\n        vec4 result = vec4(0.);\n\n        for (int i=0; i<4; i++) {\n          int flatIndex = index + i;\n          ivec3 rc = outCoordsFromFlatIndex(flatIndex);\n          result[i] = getA(rc.x, rc.y, rc.z);\n        }\n\n        "+n.output+" = result;\n      }\n    "},Hi=function(e){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outPackingScheme=ft.DENSE;var t=Ct(e),n=Jo();this.outputShape=e,this.userCode="\n      ivec3 outCoordsFromFlatIndex(int index) {\n        "+Zo(["r","c","d"],e)+"\n        return ivec3(r, c, d);\n      }\n\n      void main() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n          vec2("+t[0]+", "+t[1]+"));\n        int index = 4 * (resTexRC.x * "+t[1]+" + resTexRC.y);\n\n        vec4 result = vec4(0.);\n\n        for (int i=0; i<4; i++) {\n          int flatIndex = index + i;\n          ivec3 rc = outCoordsFromFlatIndex(flatIndex);\n          result[i] = getChannel(getA(rc.x, rc.y, rc.z), vec2(rc.y, rc.z));\n        }\n\n        "+n.output+" = result;\n      }\n    "},ji=function(){function e(e,t,n){this.variableNames=["x"],this.outputShape=[],this.outputShape=e,this.blockSize=t,this.dataFormat=n,this.userCode="\n    void main() {\n      ivec4 coords = getOutputCoords();\n      int b = coords[0];\n      int h = "+this.getHeightCoordString()+";\n      int w = "+this.getWidthCoordString()+";\n      int d = "+this.getDepthCoordString()+";\n\n      int in_h = h / "+t+";\n      int offset_h = imod(h, "+t+");\n      int in_w = w / "+t+";\n      int offset_w = imod(w, "+t+");\n      int offset_d = (offset_h * "+t+" + offset_w) *\n        "+this.getOutputDepthSize()+";\n      int in_d = d + offset_d;\n\n      float result = "+this.getInputSamplingString()+";\n      setOutput(result);\n    }\n  "}return e.prototype.getHeightCoordString=function(){return"NHWC"===this.dataFormat?"coords[1]":"coords[2]"},e.prototype.getWidthCoordString=function(){return"NHWC"===this.dataFormat?"coords[2]":"coords[3]"},e.prototype.getDepthCoordString=function(){return"NHWC"===this.dataFormat?"coords[3]":"coords[1]"},e.prototype.getOutputDepthSize=function(){return"NHWC"===this.dataFormat?this.outputShape[3]:this.outputShape[1]},e.prototype.getInputSamplingString=function(){return"NHWC"===this.dataFormat?"getX(b, in_h, in_w, in_d)":"getX(b, in_d, in_h, in_w)"},e}(),qi=function(e){this.variableNames=["X"],this.outputShape=[e,e],this.userCode="\n      void main() {\n          ivec2 coords = getOutputCoords();\n          float val = coords[0] == coords[1] ? getX(coords[0]) : 0.0;\n          setOutput(val);\n      }\n    "},Ki=function(e){this.variableNames=["A"],this.outTexUsage=mt.DOWNLOAD;var t=Jo();this.outputShape=e,this.userCode="\n      "+ti+"\n\n      void main() {\n        float x = getAAtOutCoords();\n        "+t.output+" = encode_float(x);\n      }\n    "},Xi=function(e){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!1,this.outTexUsage=mt.DOWNLOAD;var t=Jo();this.outputShape=e,this.userCode="\n      "+ti+"\n\n      void main() {\n        ivec3 coords = getOutputCoords();\n        float x = getChannel(getAAtOutCoords(), vec2(coords.y, coords.z));\n        "+t.output+" = encode_float(x);\n      }\n    "},Qi=function(e,t,n){void 0===n&&(n=!1),this.variableNames=["A"];var r=Jo(),o=t[0],i=t[1];this.outputShape=e;var a="result";n&&(a="floor(result * 255. + 0.5)"),this.userCode="\n      "+ei(e)+"\n\n      void main() {\n        ivec3 coords = getOutputCoords();\n\n        int flatIndex = getFlatIndex(coords);\n        int offset = imod(flatIndex, 4);\n\n        flatIndex = idiv(flatIndex, 4, 1.);\n        \n        int r = flatIndex / "+i+";\n        int c = imod(flatIndex, "+i+");\n        vec2 uv = (vec2(c, r) + halfCR) / vec2("+i+".0, "+o+".0);\n        vec4 values = "+r.texture2D+"(A, uv);\n\n        float result;\n\n        if(offset == 0) {\n          result = values[0];\n        } else if(offset == 1) {\n          result = values[1];\n        } else if(offset == 2) {\n          result = values[2];\n        } else {\n          result = values[3];\n        }\n\n        "+r.output+" = vec4("+a+", 0., 0., 0.);\n      }\n    "},Yi=function(e,t,n){void 0===n&&(n=!1),this.variableNames=["A"],this.packedInputs=!1,this.packedOutput=!0;var r=Jo(),o=t[0],i=t[1];this.outputShape=e;var a="",s="result";n&&(s="floor(result * 255. + 0.5)");for(var u=0;u<=1;u++)for(var c=0;c<=1;c++){var l=2*u+c;a+="\n          localCoords = coords;\n          if(localCoords[2] + "+c+" < "+e[2]+") {\n            localCoords[2] += "+c+";\n            if(localCoords[1] + "+u+" < "+e[1]+") {\n              localCoords[1] += "+u+";\n\n              flatIndex = getFlatIndex(localCoords);\n              offset = imod(flatIndex, 4);\n\n              flatIndex = idiv(flatIndex, 4, 1.);\n\n              r = flatIndex / "+i+";\n              c = imod(flatIndex, "+i+");\n              uv = (vec2(c, r) + halfCR) / vec2("+i+".0, "+o+".0);\n              values = "+r.texture2D+"(A, uv);\n\n              if(offset == 0) {\n                result["+l+"] = values[0];\n              } else if(offset == 1) {\n                result["+l+"] = values[1];\n              } else if(offset == 2) {\n                result["+l+"] = values[2];\n              } else {\n                result["+l+"] = values[3];\n              }\n            }\n          }\n        "}this.userCode="\n      "+ei(e)+"\n\n      void main() {\n        ivec3 coords = getOutputCoords();\n\n        vec4 result = vec4(0.);\n        int flatIndex, r, c, offset;\n        ivec3 localCoords;\n        vec2 uv;\n        vec4 values;\n\n        "+a+"\n\n        "+r.output+" = "+s+";\n      }\n    "},$i=function(e,t,n){this.variableNames=["real","imag"];var r=t[1];this.outputShape=t;var o=n?"2.0 * "+Math.PI:"-2.0 * "+Math.PI,i=n?r+".0":"1.0";this.userCode="\n      const float exponentMultiplier = "+o+";\n\n      float unaryOpComplex(float real, float expR, float imag, float expI) {\n        "+e+"\n      }\n\n      float mulMatDFT(int batch, int index) {\n        float indexRatio = float(index) / float("+r+");\n        float exponentMultiplierTimesIndexRatio =\n            exponentMultiplier * indexRatio;\n\n        float result = 0.0;\n\n        for (int i = 0; i < "+r+"; i++) {\n          // x = (-2|2 * PI / N) * index * i;\n          float x = exponentMultiplierTimesIndexRatio * float(i);\n          float expR = cos(x);\n          float expI = sin(x);\n          float real = getReal(batch, i);\n          float imag = getImag(batch, i);\n\n          result +=\n              unaryOpComplex(real, expR, imag, expI) / "+i+";\n        }\n\n        return result;\n      }\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        setOutput(mulMatDFT(coords[0], coords[1]));\n      }\n    "},Ji=function(){function e(e,t){this.outputShape=[],this.variableNames=["x"],this.outputShape=e,this.userCode="\n      uniform float value;\n      void main() {\n        // Input can be obtained from uniform value.\n        setOutput(value);\n      }\n    "}return e.prototype.getCustomSetupFunc=function(e){var t=this;return function(n,r){null==t.valueLoc&&(t.valueLoc=n.getUniformLocationNoThrow(r,"value")),n.gl.uniform1f(t.valueLoc,e)}},e}(),Zi=function(e,t,n){this.variableNames=["A","indices"];var r=e.slice();r[n]=t,this.outputShape=r,this.rank=r.length;var o=ci(this.rank),i=function(e,t){var n=e.length;if(n>4)throw Error("Gather for rank "+n+" is not yet supported");if(1===n)return"int(getIndices(resRC))";for(var r=["resRC.x","resRC.y","resRC.z","resRC.w"],o=[],i=0;i<e.length;i++)i===t?o.push("int(getIndices("+r[i]+"))"):o.push(""+r[i]);return o.join()}(e,n);this.userCode="\n      void main() {\n        "+o+" resRC = getOutputCoords();\n        setOutput(getA("+i+"));\n      }\n    "},ea=function(e,t,n){this.sliceDim=e,this.strides=t,this.variableNames=["x","indices"],this.outputShape=n;var r=ci(t.length),o=ci(n.length),i=this.sliceDim>1?"strides[j]":"strides";this.userCode="\n        "+r+" strides = "+r+"("+this.strides+");\n         void main() {\n          "+o+" coords = getOutputCoords();\n          int flattenIndex = 0;\n          for (int j = 0; j < "+this.sliceDim+"; j++) {\n            int index = round(getIndices(coords[0], j));\n            flattenIndex += index * "+i+";\n          }\n          setOutput(getX(flattenIndex, coords[1]));\n        }\n      "};function ta(e,t){var n=Jo();return St(e,t,n.version+"\n    precision highp float;\n    "+n.attribute+" vec3 clipSpacePos;\n    "+n.attribute+" vec2 uv;\n    "+n.varyingVs+" vec2 resultUV;\n\n    void main() {\n      gl_Position = vec4(clipSpacePos, 1);\n      resultUV = uv;\n    }")}function na(e,t){return Pt(e,t,new Float32Array([-1,1,0,0,1,-1,-1,0,0,0,1,1,0,1,1,1,-1,0,1,0]))}function ra(e,t){return Lt(e,t,new Uint16Array([0,1,2,2,1,3]))}function oa(e,t,n,r,o,i,a){Wt(n,r);var s=zt(e,t),u=e.TEXTURE_2D;return _t(e,t,(function(){return e.bindTexture(u,s)})),_t(e,t,(function(){return e.texParameteri(u,e.TEXTURE_WRAP_S,e.CLAMP_TO_EDGE)})),_t(e,t,(function(){return e.texParameteri(u,e.TEXTURE_WRAP_T,e.CLAMP_TO_EDGE)})),_t(e,t,(function(){return e.texParameteri(u,e.TEXTURE_MIN_FILTER,e.NEAREST)})),_t(e,t,(function(){return e.texParameteri(u,e.TEXTURE_MAG_FILTER,e.NEAREST)})),_t(e,t,(function(){return e.texImage2D(u,0,o,n,r,0,i,a,null)})),_t(e,t,(function(){return e.bindTexture(e.TEXTURE_2D,null)})),s}function ia(e,t,n,r,o){var i=xt(n,r);return oa(e,t,i[0],i[1],o.internalFormatFloat,o.textureFormatFloat,e.FLOAT)}function aa(e,t,n,r,o){var i=xt(n,r);return oa(e,t,i[0],i[1],o.internalFormatHalfFloat,o.textureFormatFloat,o.textureTypeHalfFloat)}function sa(e,t,n,r,o){var i=xt(n,r);return oa(e,t,i[0],i[1],e.RGBA,e.RGBA,e.UNSIGNED_BYTE)}function ua(e,t,n,r,o){var i=wt(n,r);return oa(e,t,i[0],i[1],o.internalFormatPackedFloat,e.RGBA,e.FLOAT)}function ca(e,t,n,r,o){var i=wt(n,r);return oa(e,t,i[0],i[1],o.internalFormatPackedHalfFloat,e.RGBA,o.textureTypeHalfFloat)}function la(e,t,n,r){return _t(e,t,(function(){return e.bindBuffer(e.ARRAY_BUFFER,r)})),Vt(e,t,n,"clipSpacePos",r,3,20,0)&&Vt(e,t,n,"uv",r,2,20,12)}function da(e,t,n,r,o,i,a){var s,u,c;_t(e,t,(function(){return e.bindTexture(e.TEXTURE_2D,n)})),i instanceof Uint8Array?(s=new Uint8Array(r*o*4),u=e.UNSIGNED_BYTE,c=e.RGBA):(s=new Float32Array(r*o*4),u=e.FLOAT,c=a.internalFormatPackedFloat),s.set(i),_t(e,t,(function(){return e.texImage2D(e.TEXTURE_2D,0,c,r,o,0,e.RGBA,u,s)})),_t(e,t,(function(){return e.bindTexture(e.TEXTURE_2D,null)}))}function ha(e,t,n,r){_t(e,t,(function(){return e.bindTexture(e.TEXTURE_2D,n)})),r.data instanceof Uint8Array?_t(e,t,(function(){return e.texImage2D(e.TEXTURE_2D,0,e.RGBA,r.width,r.height,0,e.RGBA,e.UNSIGNED_BYTE,r.data)})):_t(e,t,(function(){return e.texImage2D(e.TEXTURE_2D,0,e.RGBA,e.RGBA,e.UNSIGNED_BYTE,r)})),_t(e,t,(function(){return e.bindTexture(e.TEXTURE_2D,null)}))}function pa(e,t,n,r,o){var i=e.createBuffer();_t(e,t,(function(){return e.bindBuffer(e.PIXEL_PACK_BUFFER,i)}));var a=16*n*r;return _t(e,t,(function(){return e.bufferData(e.PIXEL_PACK_BUFFER,a,e.STREAM_READ)})),_t(e,t,(function(){return e.readPixels(0,0,r,n,e.RGBA,e.FLOAT,0)})),_t(e,t,(function(){return e.bindBuffer(e.PIXEL_PACK_BUFFER,null)})),i}function fa(e,t,n){var r=e,o=new Float32Array(n);return r.bindBuffer(r.PIXEL_PACK_BUFFER,t),r.getBufferSubData(r.PIXEL_PACK_BUFFER,0,o),r.bindBuffer(r.PIXEL_PACK_BUFFER,null),o}function ma(e,t,n,r,o){var i=xt(n,r),a=i[0],s=i[1],u=new Uint8Array(n*r*4);return _t(e,t,(function(){return e.readPixels(0,0,a,s,o.downloadTextureFormat,e.UNSIGNED_BYTE,u)})),new Float32Array(u.buffer)}function va(e,t,n,r,o,i,a,s){var u=e,c=new Float32Array(function(e,t){var n=wt(e,t);return n[0]*n[1]*4}(i,a));return u.bindBuffer(u.PIXEL_PACK_BUFFER,t),u.getBufferSubData(u.PIXEL_PACK_BUFFER,0,c),u.bindBuffer(u.PIXEL_PACK_BUFFER,null),c}function ga(e,t,n,r){var o=new Float32Array(n*r*4);return _t(e,t,(function(){return e.readPixels(0,0,r,n,e.RGBA,e.FLOAT,o)})),o}var ba=Object.freeze({createVertexShader:ta,createVertexBuffer:na,createIndexBuffer:ra,createFloat32MatrixTexture:ia,createFloat16MatrixTexture:aa,createUnsignedBytesMatrixTexture:sa,createPackedMatrixTexture:ua,createFloat16PackedMatrixTexture:ca,bindVertexProgramAttributeStreams:la,uploadDenseMatrixToTexture:da,uploadPixelDataToTexture:ha,createBufferFromOutputTexture:pa,downloadFloat32MatrixFromBuffer:fa,downloadByteEncodedFloatMatrixFromOutputTexture:ma,downloadPackedMatrixFromBuffer:va,downloadMatrixFromPackedOutputTexture:ga}),Aa=function(){function e(e){this.outputTexture=null,this.program=null,this.disposed=!1,this.vertexAttrsAreBound=!1,this.itemsToPoll=[];var t=U().getNumber("WEBGL_VERSION");null!=e?(this.gl=e,At(t,e)):this.gl=yt(t);var n="WEBGL_color_buffer_float";if(1===U().getNumber("WEBGL_VERSION")){if(this.textureFloatExtension=Rt(this.gl,this.debug,"OES_texture_float"),cn(this.gl,"OES_texture_half_float"))this.textureHalfFloatExtension=Rt(this.gl,this.debug,"OES_texture_half_float");else if(U().get("WEBGL_FORCE_F16_TEXTURES"))throw new Error("GL context does not support half float textures, yet the environment flag WEBGL_FORCE_F16_TEXTURES is set to true.");if(this.colorBufferFloatExtension=this.gl.getExtension(n),cn(this.gl,"EXT_color_buffer_half_float"))this.colorBufferHalfFloatExtension=Rt(this.gl,this.debug,"EXT_color_buffer_half_float");else if(U().get("WEBGL_FORCE_F16_TEXTURES"))throw new Error("GL context does not support color renderable half floats, yet the environment flag WEBGL_FORCE_F16_TEXTURES is set to true.")}else if(n="EXT_color_buffer_float",cn(this.gl,n))this.colorBufferFloatExtension=this.gl.getExtension(n);else{if(!cn(this.gl,"EXT_color_buffer_half_float"))throw new Error("GL context does not support color renderable floats");this.colorBufferHalfFloatExtension=this.gl.getExtension("EXT_color_buffer_half_float")}this.vertexBuffer=na(this.gl,this.debug),this.indexBuffer=ra(this.gl,this.debug),this.framebuffer=Ut(this.gl,this.debug),this.textureConfig=kt(this.gl,this.textureHalfFloatExtension)}return Object.defineProperty(e.prototype,"debug",{get:function(){return U().getBool("DEBUG")},enumerable:!0,configurable:!0}),e.prototype.dispose=function(){var e=this;if(!this.disposed){null!=this.program&&console.warn("Disposing a GPGPUContext that still has a bound WebGLProgram. This is probably a resource leak, delete the program with GPGPUContext.deleteProgram before disposing."),null!=this.outputTexture&&console.warn("Disposing a GPGPUContext that still has a bound output matrix texture.  This is probably a resource leak, delete the output matrix texture with GPGPUContext.deleteMatrixTexture before disposing.");var t=this.gl;_t(t,this.debug,(function(){return t.finish()})),_t(t,this.debug,(function(){return t.bindFramebuffer(t.FRAMEBUFFER,null)})),_t(t,this.debug,(function(){return t.deleteFramebuffer(e.framebuffer)})),_t(t,this.debug,(function(){return t.bindBuffer(t.ARRAY_BUFFER,null)})),_t(t,this.debug,(function(){return t.bindBuffer(t.ELEMENT_ARRAY_BUFFER,null)})),_t(t,this.debug,(function(){return t.deleteBuffer(e.indexBuffer)})),this.disposed=!0}},e.prototype.createFloat32MatrixTexture=function(e,t){return this.throwIfDisposed(),ia(this.gl,this.debug,e,t,this.textureConfig)},e.prototype.createFloat16MatrixTexture=function(e,t){return this.throwIfDisposed(),aa(this.gl,this.debug,e,t,this.textureConfig)},e.prototype.createUnsignedBytesMatrixTexture=function(e,t){return this.throwIfDisposed(),sa(this.gl,this.debug,e,t,this.textureConfig)},e.prototype.uploadPixelDataToTexture=function(e,t){this.throwIfDisposed(),ha(this.gl,this.debug,e,t)},e.prototype.uploadDenseMatrixToTexture=function(e,t,n,r){this.throwIfDisposed(),da(this.gl,this.debug,e,t,n,r,this.textureConfig)},e.prototype.createFloat16PackedMatrixTexture=function(e,t){return this.throwIfDisposed(),ca(this.gl,this.debug,e,t,this.textureConfig)},e.prototype.createPackedMatrixTexture=function(e,t){return this.throwIfDisposed(),ua(this.gl,this.debug,e,t,this.textureConfig)},e.prototype.deleteMatrixTexture=function(e){var t=this;this.throwIfDisposed(),this.outputTexture===e&&(Xt(this.gl,this.debug,this.framebuffer),this.outputTexture=null),_t(this.gl,this.debug,(function(){return t.gl.deleteTexture(e)}))},e.prototype.downloadByteEncodedFloatMatrixFromOutputTexture=function(e,t,n){var r=this;return this.downloadMatrixDriver(e,(function(){return ma(r.gl,r.debug,t,n,r.textureConfig)}))},e.prototype.downloadPackedMatrixFromBuffer=function(e,t,n,r,o,i){return va(this.gl,e,0,0,0,o,i,this.textureConfig)},e.prototype.downloadFloat32MatrixFromBuffer=function(e,t){return fa(this.gl,e,t)},e.prototype.createBufferFromTexture=function(e,t,n){this.bindTextureToFrameBuffer(e);var r=pa(this.gl,this.debug,t,n,this.textureConfig);return this.unbindTextureToFrameBuffer(),r},e.prototype.createAndWaitForFence=function(){var e=this.createFence(this.gl);return this.pollFence(e)},e.prototype.createFence=function(e){var t,n,r=this;if(U().getBool("WEBGL_FENCE_API_ENABLED")){var o=e,i=o.fenceSync(o.SYNC_GPU_COMMANDS_COMPLETE,0);e.flush(),n=function(){var e=o.clientWaitSync(i,0,0);return e===o.ALREADY_SIGNALED||e===o.CONDITION_SATISFIED},t=i}else U().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")>0?(t=this.beginQuery(),this.endQuery(),n=function(){return r.isQueryAvailable(t,U().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION"))}):n=function(){return!0};return{query:t,isFencePassed:n}},e.prototype.downloadMatrixFromPackedTexture=function(e,t,n){var r=this;return this.downloadMatrixDriver(e,(function(){return ga(r.gl,r.debug,t,n)}))},e.prototype.createProgram=function(e){this.throwIfDisposed();var t=this.gl,n=Tt(t,this.debug,e),r=ta(t,this.debug),o=Bt(t,this.debug);return _t(t,this.debug,(function(){return t.attachShader(o,r)})),_t(t,this.debug,(function(){return t.attachShader(o,n)})),Ot(t,this.debug,o),this.debug&&Mt(t,this.debug,o),this.vertexAttrsAreBound||(this.setProgram(o),this.vertexAttrsAreBound=la(t,this.debug,this.program,this.vertexBuffer)),o},e.prototype.deleteProgram=function(e){var t=this;this.throwIfDisposed(),e===this.program&&(this.program=null),null!=e&&_t(this.gl,this.debug,(function(){return t.gl.deleteProgram(e)}))},e.prototype.setProgram=function(e){var t=this;this.throwIfDisposed(),this.program=e,null!=this.program&&this.debug&&Mt(this.gl,this.debug,this.program),_t(this.gl,this.debug,(function(){return t.gl.useProgram(e)}))},e.prototype.getUniformLocation=function(e,t,n){return void 0===n&&(n=!0),this.throwIfDisposed(),n?Ht(this.gl,this.debug,e,t):jt(this.gl,e,t)},e.prototype.getAttributeLocation=function(e,t){var n=this;return this.throwIfDisposed(),_t(this.gl,this.debug,(function(){return n.gl.getAttribLocation(e,t)}))},e.prototype.getUniformLocationNoThrow=function(e,t){return this.throwIfDisposed(),this.gl.getUniformLocation(e,t)},e.prototype.setInputMatrixTexture=function(e,t,n){this.throwIfDisposed(),this.throwIfNoProgram(),qt(this.gl,this.debug,this.program,e,t,n)},e.prototype.setOutputMatrixTexture=function(e,t,n){this.setOutputMatrixTextureDriver(e,n,t)},e.prototype.setOutputPackedMatrixTexture=function(e,t,n){this.throwIfDisposed();var r=wt(t,n),o=r[0],i=r[1];this.setOutputMatrixTextureDriver(e,o,i)},e.prototype.setOutputMatrixWriteRegion=function(e,t,n,r){this.setOutputMatrixWriteRegionDriver(n,e,r,t)},e.prototype.setOutputPackedMatrixWriteRegion=function(e,t,n,r){throw new Error("setOutputPackedMatrixWriteRegion not implemented.")},e.prototype.debugValidate=function(){null!=this.program&&Mt(this.gl,this.debug,this.program),Qt(this.gl)},e.prototype.executeProgram=function(){this.throwIfDisposed(),this.throwIfNoProgram();var e=this.gl;this.debug&&this.debugValidate(),_t(e,this.debug,(function(){return e.drawElements(e.TRIANGLES,6,e.UNSIGNED_SHORT,0)}))},e.prototype.blockUntilAllProgramsCompleted=function(){var e=this;this.throwIfDisposed(),_t(this.gl,this.debug,(function(){return e.gl.finish()}))},e.prototype.getQueryTimerExtension=function(){return null==this.disjointQueryTimerExtension&&(this.disjointQueryTimerExtension=Rt(this.gl,this.debug,2===U().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")?"EXT_disjoint_timer_query_webgl2":"EXT_disjoint_timer_query")),this.disjointQueryTimerExtension},e.prototype.getQueryTimerExtensionWebGL2=function(){return this.getQueryTimerExtension()},e.prototype.getQueryTimerExtensionWebGL1=function(){return this.getQueryTimerExtension()},e.prototype.beginQuery=function(){if(2===U().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")){var e=this.gl,t=this.getQueryTimerExtensionWebGL2(),n=e.createQuery();return e.beginQuery(t.TIME_ELAPSED_EXT,n),n}var r=this.getQueryTimerExtensionWebGL1(),o=r.createQueryEXT();return r.beginQueryEXT(r.TIME_ELAPSED_EXT,o),o},e.prototype.endQuery=function(){if(2!==U().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")){var e=this.getQueryTimerExtensionWebGL1();e.endQueryEXT(e.TIME_ELAPSED_EXT)}else{var t=this.gl,n=this.getQueryTimerExtensionWebGL2();t.endQuery(n.TIME_ELAPSED_EXT)}},e.prototype.waitForQueryAndGetTime=function(e){return P(this,void 0,void 0,(function(){var t=this;return L(this,(function(n){switch(n.label){case 0:return[4,le((function(){return t.disposed||t.isQueryAvailable(e,U().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION"))}))];case 1:return n.sent(),[2,this.getQueryTime(e,U().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION"))]}}))}))},e.prototype.getQueryTime=function(e,t){if(0===t)return null;if(2===t){var n=this.gl;return n.getQueryParameter(e,n.QUERY_RESULT)/1e6}var r=this.getQueryTimerExtensionWebGL1();return r.getQueryObjectEXT(e,r.QUERY_RESULT_EXT)/1e6},e.prototype.isQueryAvailable=function(e,t){if(0===t)return!0;if(2===t){var n=this.gl,r=this.getQueryTimerExtensionWebGL2(),o=n.getQueryParameter(e,n.QUERY_RESULT_AVAILABLE);return null==this.disjoint&&(this.disjoint=this.gl.getParameter(r.GPU_DISJOINT_EXT)),o&&!this.disjoint}return o=(r=this.getQueryTimerExtensionWebGL1()).getQueryObjectEXT(e,r.QUERY_RESULT_AVAILABLE_EXT),null==this.disjoint&&(this.disjoint=this.gl.getParameter(r.GPU_DISJOINT_EXT)),o&&!this.disjoint},e.prototype.pollFence=function(e){var t=this;return new Promise((function(n){t.addItemToPoll((function(){return e.isFencePassed()}),(function(){return n()}))}))},e.prototype.pollItems=function(){for(var e=function(e){for(var t=0;t<e.length&&e[t]();++t);return t-1}(this.itemsToPoll.map((function(e){return e.isDoneFn}))),t=0;t<=e;++t)(0,this.itemsToPoll[t].resolveFn)();this.itemsToPoll=this.itemsToPoll.slice(e+1)},e.prototype.addItemToPoll=function(e,t){var n=this;this.itemsToPoll.push({isDoneFn:e,resolveFn:t}),this.itemsToPoll.length>1||le((function(){return n.pollItems(),0===n.itemsToPoll.length}))},e.prototype.bindTextureToFrameBuffer=function(e){this.throwIfDisposed(),Kt(this.gl,this.debug,e,this.framebuffer),this.debug&&Qt(this.gl)},e.prototype.unbindTextureToFrameBuffer=function(){null!=this.outputTexture?(Kt(this.gl,this.debug,this.outputTexture,this.framebuffer),this.debug&&Qt(this.gl)):Xt(this.gl,this.debug,this.framebuffer)},e.prototype.downloadMatrixDriver=function(e,t){this.bindTextureToFrameBuffer(e);var n=t();return this.unbindTextureToFrameBuffer(),n},e.prototype.setOutputMatrixTextureDriver=function(e,t,n){this.throwIfDisposed();var r=this.gl;Kt(r,this.debug,e,this.framebuffer),this.debug&&Qt(r),this.outputTexture=e,_t(r,this.debug,(function(){return r.viewport(0,0,t,n)})),_t(r,this.debug,(function(){return r.scissor(0,0,t,n)}))},e.prototype.setOutputMatrixWriteRegionDriver=function(e,t,n,r){var o=this;this.throwIfDisposed(),_t(this.gl,this.debug,(function(){return o.gl.scissor(e,t,n,r)}))},e.prototype.throwIfDisposed=function(){if(this.disposed)throw new Error("Attempted to use disposed GPGPUContext.")},e.prototype.throwIfNoProgram=function(){if(null==this.program)throw new Error("No GPU program is currently set.")},e}();function ya(e,t){if(e.length!==t.length)throw Error("Binary was compiled with "+e.length+" inputs, but was executed with "+t.length+" inputs");e.forEach((function(e,n){var r=e.logicalShape,o=t[n],i=o.shape;if(!ie(r,i))throw Error("Binary was compiled with different shapes than the current args. Shapes "+r+" and "+i+" must match");if(!e.isUniform||!o.isUniform){var a=e.texShape,s=o.isUniform?null:o.texData.texShape;if(!ie(a,s))throw Error("Binary was compiled with different texture shapes than the current args. Shape "+a+" and "+s+" must match")}}))}var xa=function(e,t,n){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=e;for(var r=n.filterWidth,o=n.inChannels,i=n.strideWidth,a=n.strideHeight,s=n.padInfo,u=n.outWidth,c=n.dilationWidth,l=n.dilationHeight,d=n.dataFormat,h=s.left,p=s.top,f=o*r,m=Jo(),v="channelsLast"===d,g=v?0:1,b=v?1:2,A="",y=0;y<=1;y++)for(var x=0;x<=1;x++)A+="\n          blockIndex = rc.y + "+x+";\n          pos = rc.x + "+y+";\n\n          if(blockIndex < "+e[1]+" && pos < "+e[0]+") {\n            offsetY = int(blockIndex / ("+u+")) * "+a+" - "+p+";\n            d0 = offsetY + "+l+" * (pos / "+f+");\n\n            if(d0 < "+t[g]+" && d0 >= 0) {\n\n              offsetX = int(mod(float(blockIndex), "+u+".) * "+i+". - "+h+".);\n              d1 = offsetX + "+c+" * (int(mod(float(pos), "+f+".) / "+o+".));\n\n              if(d1 < "+t[b]+" && d1 >= 0) {\n\n                ch = int(mod(float(pos), "+o+".));\n\n                if ("+v+") {\n                  innerDims = vec2(d1, ch);\n                  result["+(2*y+x)+"] = getChannel(\n                    getA(d0, int(innerDims.x),\n                    int(innerDims.y)), innerDims);\n                } else {\n                  innerDims = vec2(d0, d1);\n                  result["+(2*y+x)+"] = getChannel(\n                    getA(ch, int(innerDims.x),\n                    int(innerDims.y)), innerDims);\n                }\n              }\n            }\n          }\n        ";this.userCode="\n      void main() {\n        ivec2 rc = getOutputCoords();\n\n        vec4 result = vec4(0);\n\n        int blockIndex, pos, offsetY, d0, offsetX, d1, ch;\n        vec2 innerDims;\n\n        "+A+"\n\n        "+m.output+" = result;\n      }\n    "},Ca=function(e,t,n,r,o){this.variableNames=["x"],this.outputShape=[];var i,a=t,s=e[3]-1;this.outputShape=e;var u="float("+n+") + float("+r+") * sum";i=.5===o?"inversesqrt("+u+")":1===o?"1.0/("+u+")":"exp(log("+u+") * float(-"+o+"));",this.userCode="\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int r = coords[1];\n        int c = coords[2];\n        int d = coords[3];\n        float x = getX(b, r, c, d);\n        float sum = 0.0;\n        for (int j = -"+a+"; j <= "+a+"; j++) {\n          int idx = d + j;\n          if (idx >= 0 && idx <=  "+s+") {\n            float z = getX(b, r, c, idx);\n            sum += z * z;\n          }\n        }\n        float val = x * "+i+";\n        setOutput(val);\n      }\n    "},wa=function(e,t,n,r,o){this.variableNames=["inputImage","outputImage","dy"],this.outputShape=[],this.outputShape=e,this.depth=e[3],this.depthRadius=t,this.bias=n,this.alpha=r,this.beta=o,this.userCode="\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int r = coords[1];\n        int c = coords[2];\n\n        float result = 0.0;\n        for (int d = 0; d < "+this.depth+"; ++d) {\n          int depthBegin = int(max(0.0, float(d - "+t+")));\n          int depthEnd = int(min(float("+this.depth+"),\n              float(d + "+t+" + 1)));\n\n          const int MIN_DEPTH_BEGIN = 0;\n          const int MAX_DEPTH_END = "+this.depth+";\n\n          float norm = 0.0;\n          for (int k = MIN_DEPTH_BEGIN; k < MAX_DEPTH_END; ++k) {\n            if (k < depthBegin){\n              continue;\n            }\n            else if (k >= depthBegin && k < depthEnd) {\n              norm += getInputImage(b, r, c, k) * getInputImage(b, r, c, k);\n            }\n            else {\n              break;\n            }\n          }\n\n          norm = float("+r+") * norm + float("+n+");\n\n          for(int k = MIN_DEPTH_BEGIN; k < MAX_DEPTH_END; ++k){\n            if (k < depthBegin){\n              continue;\n            }\n            else if (k >= depthBegin && k < depthEnd){\n              float dyi = -2.0 * float("+r+")\n                * float("+o+")\n                * getInputImage(b ,r ,c, k) * getOutputImage(b, r, c, d)\n                / norm;\n              if (k == d) {\n                dyi += pow(norm, -1.0 * "+o+");\n              }\n              if (k == coords[3]) {\n                dyi *= getDy(b, r, c, d);\n                result += dyi;\n              }\n            }\n            else {\n              break;\n            }\n          }\n      }\n      setOutput(result);\n      }\n    "},ka=function(e,t,n,r,o){this.variableNames=["x"],this.outputShape=[],this.packedInputs=!0,this.packedOutput=!0;var i,a=t,s=e[3]-1;this.outputShape=e;var u="float("+n+") + float("+r+") * sum";i=.5===o?"inversesqrt("+u+")":1===o?"1.0/("+u+")":"exp(log("+u+") * float(-"+o+"));",this.userCode="\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords.x;\n        int r = coords.y;\n        int c = coords.z;\n        int d = coords.w;\n\n        bool hasNextCol = d < "+this.outputShape[3]+";\n        bool hasNextRow = c < "+this.outputShape[2]+";\n\n        vec4 sum = vec4(0.);\n        vec4 xFragAtOutputCoords = getX(b, r, c, d);\n\n        vec4 xAtOutputCoords = vec4(\n          getChannel(xFragAtOutputCoords, vec2(c, d)),\n          hasNextCol ?\n            getChannel(xFragAtOutputCoords, vec2(c, d + 1)) : 0.0,\n          hasNextRow ?\n            getChannel(xFragAtOutputCoords , vec2(c + 1, d)) : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getChannel(xFragAtOutputCoords, vec2(c + 1, d + 1)) : 0.0\n        );\n\n        int firstChannel = d - "+a+";\n        vec2 cache = vec2(0.);\n        if(firstChannel >= 0){\n          vec4 firstChannelFrag = getX(b, r, c, firstChannel);\n          cache.x = getChannel(firstChannelFrag, vec2(c, firstChannel));\n            if(hasNextRow){\n              cache.y = getChannel(firstChannelFrag, vec2(c + 1, firstChannel));\n            }\n        }\n\n        ivec2 depth = ivec2(d, d + 1);\n        for (int j = - "+a+"; j <= "+a+"; j++) {\n          ivec2 idx = depth + j;\n          bvec2 aboveLowerBound = greaterThanEqual(idx, ivec2(0));\n          bvec2 belowUpperBound = lessThanEqual(idx, ivec2("+s+"));\n\n          bool depthInRange = aboveLowerBound.x && belowUpperBound.x;\n          bool depthPlusOneInRange = aboveLowerBound.y && belowUpperBound.y;\n\n          if(depthInRange || depthPlusOneInRange){\n            vec4 z = vec4(0.);\n            vec4 xFragAtCurrentDepth;\n            z.xz = cache.xy;\n            if(depthPlusOneInRange && hasNextCol){\n              xFragAtCurrentDepth = idx.y != d ?\n                getX(b, r, c, idx.y) : xFragAtOutputCoords;\n              z.y = getChannel(xFragAtCurrentDepth, vec2(c, idx.y));\n              if(hasNextRow){\n                z.w = getChannel(xFragAtCurrentDepth, vec2(c + 1, idx.y));\n              }\n            }\n            cache.xy = z.yw;\n            sum += z * z;\n          }\n        }\n        vec4 result = xAtOutputCoords * "+i+";\n        setOutput(result);\n      }\n    "},_a=function(e){this.variableNames=["dy","maxPos"],this.outputShape=e.inShape;var t=e.strideHeight,n=e.strideWidth,r=e.dilationHeight,o=e.effectiveFilterHeight,i=e.effectiveFilterWidth,a=o-1-e.padInfo.top,s=i-1-e.padInfo.left,u=o*i-1;this.userCode="\n      const ivec2 pads = ivec2("+a+", "+s+");\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n\n        ivec2 dyRCCorner = coords.yz - pads;\n        int dyRCorner = dyRCCorner.x;\n        int dyCCorner = dyRCCorner.y;\n\n        // Convolve dy(?, ?, d) with pos mask(:, :, d) to get dx(xR, xC, d).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < "+o+";\n          wR += "+r+") {\n          float dyR = float(dyRCorner + wR) / "+t+".0;\n\n          if (dyR < 0.0 || dyR >= "+e.outHeight+".0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          for (int wC = 0; wC < "+i+"; wC++) {\n            float dyC = float(dyCCorner + wC) / "+n+".0;\n\n            if (dyC < 0.0 || dyC >= "+e.outWidth+".0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            float dyValue = getDy(b, idyR, idyC, d);\n            int maxPosValue = "+u+" - int(getMaxPos(b, idyR, idyC, d));\n\n            // Get the current value, check it against the value from the\n            // position matrix.\n            int curPosValue = wR * "+i+" + wC;\n            float mask = float(maxPosValue == curPosValue ? 1.0 : 0.0);\n\n            dotProd += dyValue * mask;\n          }\n        }\n        setOutput(dotProd);\n      }\n    "},Ea=function(e){this.variableNames=["dy","maxPos"],this.outputShape=e.inShape;var t=e.strideDepth,n=e.strideHeight,r=e.strideWidth,o=e.dilationDepth,i=e.dilationHeight,a=e.dilationWidth,s=e.effectiveFilterDepth,u=e.effectiveFilterHeight,c=e.effectiveFilterWidth,l=s-1-e.padInfo.front,d=u-1-e.padInfo.top,h=c-1-e.padInfo.left,p=s*u*c-1;this.userCode="\n      const ivec3 pads = ivec3("+l+", "+d+", "+h+");\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int ch = coords.u;\n\n        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;\n        int dyDCorner = dyCorner.x;\n        int dyRCorner = dyCorner.y;\n        int dyCCorner = dyCorner.z;\n\n        // Convolve dy(?, ?, ?, ch) with pos mask(:, :, :, d) to get\n        // dx(xD, xR, xC, ch).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n\n        for (int wD = 0; wD < "+s+";\n           wD += "+o+") {\n          float dyD = float(dyDCorner + wD) / "+t+".0;\n\n          if (dyD < 0.0 || dyD >= "+e.outDepth+".0 || fract(dyD) > 0.0) {\n            continue;\n          }\n          int idyD = int(dyD);\n\n          for (int wR = 0; wR < "+u+";\n              wR += "+i+") {\n            float dyR = float(dyRCorner + wR) / "+n+".0;\n\n            if (dyR < 0.0 || dyR >= "+e.outHeight+".0 ||\n                fract(dyR) > 0.0) {\n              continue;\n            }\n            int idyR = int(dyR);\n\n            for (int wC = 0; wC < "+c+";\n                wC += "+a+") {\n              float dyC = float(dyCCorner + wC) / "+r+".0;\n\n              if (dyC < 0.0 || dyC >= "+e.outWidth+".0 ||\n                  fract(dyC) > 0.0) {\n                continue;\n              }\n              int idyC = int(dyC);\n\n              float dyValue = getDy(batch, idyD, idyR, idyC, ch);\n              int maxPosValue = "+p+" -\n                  int(getMaxPos(batch, idyD, idyR, idyC, ch));\n\n              // Get the current value, check it against the value from the\n              // position matrix.\n              int curPosValue =\n                  wD * "+u+" * "+c+" +\n                  wR * "+c+" + wC;\n              float mask = float(maxPosValue == curPosValue ? 1.0 : 0.0);\n\n              dotProd += dyValue * mask;\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    "},Ia=function(e,t,n,r,o,i,a){void 0===n&&(n=!1),void 0===r&&(r=!1),void 0===o&&(o=!1),void 0===i&&(i=null),void 0===a&&(a=!1),this.variableNames=["matrixA","matrixB"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=t;var s=n?e[1]:e[2],u=Math.ceil(s/2),c=n?"i * 2, rc.y":"rc.y, i * 2",l=r?"rc.z, i * 2":"i * 2, rc.z",d=n?["a.xxyy","a.zzww"]:["a.xxzz","a.yyww"],h=r?["b.xzxz","b.ywyw"]:["b.xyxy","b.zwzw"],p="",f="";i&&(p=a?"vec4 activation(vec4 a) {\n          vec4 b = getPreluActivationWeightsAtOutCoords();\n          "+i+"\n        }":"vec4 activation(vec4 x) {\n          "+i+"\n        }",f="result = activation(result);");var m=o?"result += getBiasAtOutCoords();":"";o&&this.variableNames.push("bias"),a&&this.variableNames.push("preluActivationWeights"),this.userCode="\n      "+p+"\n\n      const float sharedDimension = "+u+".0;\n\n      vec4 dot2x2ARowBCol(ivec3 rc) {\n        vec4 result = vec4(0);\n        for (int i = 0; i < "+u+"; i++) {\n          vec4 a = getMatrixA(rc.x, "+c+");\n          vec4 b = getMatrixB(rc.x, "+l+");\n\n          // These swizzled products need to be separately added.\n          // See: https://github.com/tensorflow/tfjs/issues/1735\n          result += ("+d[0]+" * "+h[0]+");\n          result += ("+d[1]+" * "+h[1]+");\n        }\n        return result;\n      }\n\n      void main() {\n        ivec3 rc = getOutputCoords();\n        vec4 result = dot2x2ARowBCol(rc);\n\n        "+m+"\n\n        "+f+"\n\n        setOutput(result);\n      }\n    "},Ra=function(){function e(e,t,n){this.variableNames=["probs"],this.outputShape=[e,n],this.userCode="\n      uniform float seed;\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n\n        float r = random(seed);\n        float cdf = 0.0;\n\n        for (int i = 0; i < "+(t-1)+"; i++) {\n          cdf += getProbs(batch, i);\n\n          if (r < cdf) {\n            setOutput(float(i));\n            return;\n          }\n        }\n\n        // If no other event happened, last event happened.\n        setOutput(float("+(t-1)+"));\n      }\n    "}return e.prototype.getCustomSetupFunc=function(e){var t=this;return function(n,r){null==t.seedLoc&&(t.seedLoc=n.getUniformLocation(r,"seed")),n.gl.uniform1f(t.seedLoc,e)}},e}(),Sa=function(e,t,n,r){this.variableNames=["indices"],this.outputShape=[e,t],this.userCode="\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int index = round(getIndices(coords.x));\n        setOutput(mix(float("+r+"), float("+n+"),\n                      float(index == coords.y)));\n      }\n    "},Ta=function(e){this.variableNames=["A"],this.packedInputs=!1,this.packedOutput=!0,this.outputShape=e;var t=e.length;if(0===t)this.userCode="\n        void main() {\n          setOutput(vec4(getA(), 0., 0., 0.));\n        }\n      ";else{var n=$o("rc",t),r=ci(t),o=function(e,t,n){if(1===e)return"rc > "+t[0];for(var r="",o=e-2;o<e;o++)r+=n[o]+" >= "+t[o],o<e-1&&(r+="||");return r}(t,e,n),i=function(e,t,n,r){if(1===e)return"";var o=r.slice(-2);return"\n    int r = "+o[0]+";\n    int c = "+o[1]+";\n    int rp1 = r + 1;\n    int cp1 = c + 1;\n\n    bool cEdge = cp1 >= "+t+";\n    bool rEdge = rp1 >= "+n+";\n  "}(t,e[e.length-1],e[e.length-2],n),a=function(e,t){var n=e.length,r=function(e,t){for(var n=[],r=0;r<=1;r++)for(var o=0;o<=1;o++){for(var i=(0===r?"r":"rp1")+", "+(0===o?"c":"cp1"),a=2;a<e;a++)i=t[t.length-1-a]+","+i;n.push(i)}return n}(n,t);return 1===n?"getA(rc),\n            rc + 1 >= "+e[0]+" ? 0. : getA(rc + 1),\n            0, 0":"getA("+r[0]+"),\n          cEdge ? 0. : getA("+r[1]+"),\n          rEdge ? 0. : getA("+r[2]+"),\n          rEdge || cEdge ? 0. : getA("+r[3]+")"}(e,n);this.userCode="\n        void main() {\n          "+r+" rc = getOutputCoords();\n\n          if("+o+") {\n            setOutput(vec4(0));\n          } else {\n            "+i+"\n\n            setOutput(vec4("+a+"));\n          }\n        }\n      "}},Da=function(e,t,n){this.variableNames=["x"],this.outputShape=t.map((function(t,n){return t[0]+e[n]+t[1]}));var r=e.length,o=ci(r),i=t.map((function(e){return e[0]})).join(","),a=t.map((function(t,n){return t[0]+e[n]})).join(","),s=["coords[0]","coords[1]","coords[2]","coords[3]"].slice(0,r);this.userCode=1!==r?"\n      "+o+" start = "+o+"("+i+");\n      "+o+" end = "+o+"("+a+");\n\n      void main() {\n        "+o+" outC = getOutputCoords();\n        if (any(lessThan(outC, start)) || any(greaterThanEqual(outC, end))) {\n          setOutput(float("+n+"));\n        } else {\n          "+o+" coords = outC - start;\n          setOutput(getX("+s+"));\n        }\n      }\n    ":"\n        int start = "+i+";\n        int end = "+a+";\n\n        void main() {\n          int outC = getOutputCoords();\n          if (outC < start || outC >= end) {\n            setOutput(float("+n+"));\n          } else {\n            setOutput(getX(outC - start));\n          }\n        }\n      "},Fa=function(e,t,n){this.variableNames=["x"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=t.map((function(t,n){return t[0]+e[n]+t[1]}));for(var r=e.length,o=ci(r),i=t.map((function(e){return e[0]})).join(","),a=t.map((function(t,n){return t[0]+e[n]})).join(","),s=$o("rc",r),u=$o("source",r),c=s[r-1]+" < "+this.outputShape[r-1],l=1===r?"source":"vec2("+u.slice(-2).join()+")",d=[o+" rc = outputLoc;",s[r-1]+" += 1;\n       if("+c+") {\n      ",1===r?"":"}\n       rc = outputLoc;\n       "+s[r-2]+" += 1;\n       if("+s[r-2]+" < "+this.outputShape[r-2]+") {",1===r?"":"  "+s[r-1]+" += 1;\n         if("+c+") {"],h=1===r?"rc < start || rc >= end":"any(lessThan(rc, start)) || any(greaterThanEqual(rc, end))",p="",f=0,m=1===r?2:4;f<m;f++)p+="\n        "+d[f]+"\n        if ("+h+") {\n          result["+f+"] = float("+n+");\n        } else {\n          "+o+" source = rc - start;\n          result["+f+"] = getChannel(getX("+u.join()+"), "+l+");\n        }\n      ";p+=1===r?"} ":"}}",this.userCode="\n      const "+o+" start = "+o+"("+i+");\n      const "+o+" end = "+o+"("+a+");\n\n      void main() {\n        "+o+" outputLoc = getOutputCoords();\n        vec4 result = vec4(0.);\n        "+p+"\n        setOutput(result);\n      }\n    "},Na=function(e,t,n){if(this.variableNames=["x"],"avg"===t&&n)throw new Error("Cannot compute positions for average pool.");var r=e.filterWidth,o=e.strideHeight,i=e.strideWidth,a=e.dilationHeight,s=e.dilationWidth,u=e.effectiveFilterHeight,c=e.effectiveFilterWidth,l=e.padInfo.top,d=e.padInfo.left;this.outputShape=e.outShape;var h="avg"===t,p="0.0";if(h||(p="-1.0 / 1e-20"),n)this.userCode="\n        const ivec2 strides = ivec2("+o+", "+i+");\n        const ivec2 pads = ivec2("+l+", "+d+");\n\n        void main() {\n          ivec4 coords = getOutputCoords();\n          int batch = coords[0];\n          int d = coords[3];\n\n          ivec2 xRCCorner = coords.yz * strides - pads;\n          int xRCorner = xRCCorner.x;\n          int xCCorner = xRCCorner.y;\n\n          // max/min x(?, ?, d) to get y(yR, yC, d).\n          // ? = to be determined\n          float minMaxValue = 0.0;\n          float minMaxValueFound = 0.0;\n          int minMaxPosition = 0;\n          float avgValue = 0.0;\n\n          for (int wR = 0; wR < "+u+";\n              wR += "+a+") {\n            int xR = xRCorner + wR;\n\n            if (xR < 0 || xR >= "+e.inHeight+") {\n              continue;\n            }\n\n            for (int wC = 0; wC < "+c+";\n                wC += "+s+") {\n              int xC = xCCorner + wC;\n\n              if (xC < 0 || xC >= "+e.inWidth+") {\n                continue;\n              }\n\n              float value = getX(batch, xR, xC, d);\n\n              // If a min / max value has already been found, use it. If not,\n              // use the current value.\n              float currMinMaxValue = mix(\n                  value, minMaxValue, minMaxValueFound);\n              if (value >= currMinMaxValue) {\n                minMaxValue = value;\n                minMaxValueFound = 1.0;\n                minMaxPosition = wR * "+c+" + wC;\n              }\n            }\n          }\n          setOutput(float(minMaxPosition));\n        }\n      ";else{var f=t+"("+t+"("+t+"(minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])";"avg"===t&&(f="avgValue / count");var m=4*Math.floor(r/4),v=r%4,g="\n      if ("+h+") {\n        avgValue += dot(values, ones);\n      } else {\n        minMaxValue = max(values, minMaxValue);\n      }\n    ";this.userCode="\n      const ivec2 strides = ivec2("+o+", "+i+");\n      const ivec2 pads = ivec2("+l+", "+d+");\n      const float initializationValue = "+p+";\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\n\n      float count = 0.0;\n\n      float getValue(int batch, int xR, int xC, int d) {\n        if (xC < 0 || xC >= "+e.inWidth+") {\n          return initializationValue;\n        }\n        count += 1.0;\n        return getX(batch, xR, xC, d);\n      }\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d = coords[3];\n\n        ivec2 xRCCorner = coords.yz * strides - pads;\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        // max/min x(?, ?, d) to get y(yR, yC, d).\n        // ? = to be determined\n        vec4 minMaxValue = vec4("+p+");\n        float avgValue = 0.0;\n        count = 0.0;\n\n        for (int wR = 0; wR < "+u+";\n            wR += "+a+") {\n          int xR = xRCorner + wR;\n\n          if (xR < 0 || xR >= "+e.inHeight+") {\n            continue;\n          }\n\n          for (int wC = 0; wC < "+m+"; wC += 4) {\n            int xC = xCCorner + wC * "+s+";\n\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              getValue(batch, xR, xC + "+s+", d),\n              getValue(batch, xR, xC + 2 * "+s+", d),\n              getValue(batch, xR, xC + 3 * "+s+", d)\n            );\n\n            "+g+"\n          }\n\n          int xC = xCCorner + "+m+";\n          if ("+(1===v)+") {\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              initializationValue,\n              initializationValue,\n              initializationValue\n            );\n\n            "+g+"\n          } else if ("+(2===v)+") {\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              getValue(batch, xR, xC + "+s+", d),\n              initializationValue,\n              initializationValue\n            );\n\n            "+g+"\n          } else if ("+(3===v)+") {\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              getValue(batch, xR, xC + "+s+", d),\n              getValue(batch, xR, xC + 2 * "+s+", d),\n              initializationValue\n            );\n\n            "+g+"\n          }\n        }\n        setOutput("+f+");\n      }\n    "}},Ba=function(e,t,n){if(this.variableNames=["x"],"avg"===t&&n)throw new Error("Cannot compute positions for average pool.");var r=e.filterWidth,o=e.strideDepth,i=e.strideHeight,a=e.strideWidth,s=e.dilationDepth,u=e.dilationHeight,c=e.dilationWidth,l=e.effectiveFilterDepth,d=e.effectiveFilterHeight,h=e.effectiveFilterWidth,p=e.padInfo.front,f=e.padInfo.top,m=e.padInfo.left;this.outputShape=e.outShape;var v="avg"===t,g="0.0";if(v||(g="-1.0 / 1e-20"),n)this.userCode="\n        const ivec3 strides =\n            ivec3("+o+", "+i+", "+a+");\n        const ivec3 pads = ivec3("+p+", "+f+", "+m+");\n\n        void main() {\n          ivec5 coords = getOutputCoords();\n          int batch = coords.x;\n          int ch = coords.u;\n\n          ivec3 xCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;\n          int xDCorner = xCorner.x;\n          int xRCorner = xCorner.y;\n          int xCCorner = xCorner.z;\n\n          // max/min x(?, ?, ?, ch) to get y(yD, yR, yC, ch).\n          // ? = to be determined\n          float minMaxValue = 0.0;\n          float minMaxValueFound = 0.0;\n          int minMaxPosition = 0;\n\n          for (int wD = 0; wD < "+l+";\n              wD += "+s+") {\n            int xD = xDCorner + wD;\n\n            if (xD < 0 || xD >= "+e.inDepth+") {\n              continue;\n            }\n\n            for (int wR = 0; wR < "+d+";\n                wR += "+u+") {\n              int xR = xRCorner + wR;\n\n              if (xR < 0 || xR >= "+e.inHeight+") {\n                continue;\n              }\n\n              for (int wC = 0; wC < "+h+";\n                  wC += "+c+") {\n                int xC = xCCorner + wC;\n\n                if (xC < 0 || xC >= "+e.inWidth+") {\n                  continue;\n                }\n\n                float value = getX(batch, xD, xR, xC, ch);\n\n                // If a min / max value has already been found, use it. If not,\n                // use the current value.\n                float currMinMaxValue = mix(\n                    value, minMaxValue, minMaxValueFound);\n                if (value >= currMinMaxValue) {\n                  minMaxValue = value;\n                  minMaxValueFound = 1.0;\n                  minMaxPosition =\n                      wD * "+d+" * "+h+" +\n                      wR * "+h+" + wC;;\n                }\n              }\n            }\n          }\n          setOutput(float(minMaxPosition));\n        }\n      ";else{var b=t+"("+t+"("+t+"(minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])";"avg"===t&&(b="avgValue / count");var A=4*Math.floor(r/4),y=r%4,x="\n      if ("+v+") {\n        avgValue += dot(values, ones);\n      } else {\n        minMaxValue = max(values, minMaxValue);\n      }\n    ";this.userCode="\n      const ivec3 strides =\n        ivec3("+o+", "+i+", "+a+");\n      const ivec3 pads = ivec3("+p+", "+f+", "+m+");\n      const float initializationValue = "+g+";\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\n\n      float count = 0.0;\n\n      float getValue(int batch, int xD, int xR, int xC, int ch) {\n        if (xC < 0 || xC >= "+e.inWidth+") {\n          return initializationValue;\n        }\n        count += 1.0;\n        return getX(batch, xD, xR, xC, ch);\n      }\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int ch = coords.u;\n\n        ivec3 xCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;\n        int xDCorner = xCorner.x;\n        int xRCorner = xCorner.y;\n        int xCCorner = xCorner.z;\n\n        // max/min x(?, ?, ?, d) to get y(yD, yR, yC, ch).\n        // ? = to be determined\n        vec4 minMaxValue = vec4("+g+");\n        float avgValue = 0.0;\n        count = 0.0;\n\n        for (int wD = 0; wD < "+l+";\n            wD += "+s+") {\n          int xD = xDCorner + wD;\n\n          if (xD < 0 || xD >= "+e.inDepth+") {\n            continue;\n          }\n\n          for (int wR = 0; wR < "+d+";\n            wR += "+u+") {\n            int xR = xRCorner + wR;\n\n            if (xR < 0 || xR >= "+e.inHeight+") {\n              continue;\n            }\n\n            for (int wC = 0; wC < "+A+"; wC += 4) {\n              int xC = xCCorner + wC * "+c+";\n\n              vec4 values = vec4(\n                getValue(batch, xD, xR, xC, ch),\n                getValue(batch, xD, xR, xC + "+c+", ch),\n                getValue(batch, xD, xR, xC + 2 * "+c+", ch),\n                getValue(batch, xD, xR, xC + 3 * "+c+", ch)\n              );\n\n              "+x+"\n            }\n\n            int xC = xCCorner + "+A+";\n            if ("+(1===y)+") {\n              vec4 values = vec4(\n                getValue(batch, xD, xR, xC, ch),\n                initializationValue,\n                initializationValue,\n                initializationValue\n              );\n\n              "+x+"\n            } else if ("+(2===y)+") {\n              vec4 values = vec4(\n                getValue(batch, xD, xR, xC, ch),\n                getValue(batch, xD, xR, xC + "+c+", ch),\n                initializationValue,\n                initializationValue\n              );\n\n              "+x+"\n            } else if ("+(3===y)+") {\n              vec4 values = vec4(\n                getValue(batch, xD, xR, xC, ch),\n                getValue(batch, xD, xR, xC + "+c+", ch),\n                getValue(batch, xD, xR, xC + 2 * "+c+", ch),\n                initializationValue\n              );\n\n              "+x+"\n            }\n          }\n          setOutput("+b+");\n        }\n      }\n    "}},Oa=function(e,t){this.variableNames=["x"];var n=e.windowSize,r=e.batchSize,o=e.inSize,i=Math.ceil(o/n);this.outputShape=[r,i];var a="0.0",s="";"prod"===t?a="1.0":"min"===t?(a="1.0 / 1e-20",s="min"):"max"===t&&(a="-1.0 / 1e-20",s="max");var u=t+"("+t+"("+t+"(minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])";"sum"===t?u="sumValue":"prod"===t?u="prodValue":"all"===t?u="allValue":"any"===t&&(u="anyValue");var c=4*Math.floor(n/4),l=n%4,d="\n      if ("+("sum"===t)+") {\n        sumValue += dot(values, ones);\n      } else if ("+("prod"===t)+") {\n        vec2 tmp = vec2(values[0], values[1]) * vec2(values[2], values[3]);\n        prodValue *= tmp[0] * tmp[1];\n      } else {\n        minMaxValue = "+s+"(values, minMaxValue);\n      }\n    ",h="vec4";"all"===t?(a="1.0",d="\n        bool reducedAllValue = all(values);\n        float floatedReducedAllValue = float(reducedAllValue);\n        allValue = float(allValue >= 1.0 && floatedReducedAllValue >= 1.0);\n      ",h="bvec4"):"any"===t&&(a="0.0",d="\n        bool reducedAnyValue = any(values);\n        float floatedReducedAnyValue = float(reducedAnyValue);\n        anyValue = float(anyValue >= 1.0 || floatedReducedAnyValue >= 1.0);\n      ",h="bvec4");var p="";o%n>0&&(p="\n        if (inIdx < 0 || inIdx >= "+o+") {\n          return initializationValue;\n        }\n      "),this.userCode="\n      const float initializationValue = "+a+";\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\n\n      float getValue(int batch, int inIdx) {\n        "+p+"\n        return getX(batch, inIdx);\n      }\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n        int outIdx = coords[1];\n        int inOffset = outIdx * "+n+";\n\n        vec4 minMaxValue = vec4("+a+");\n        float prodValue = 1.0;\n        float sumValue = 0.0;\n        float allValue = 1.0;\n        float anyValue = 0.0;\n\n        for (int i = 0; i < "+c+"; i += 4) {\n          int inIdx = inOffset + i;\n          "+h+" values = "+h+"(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            getValue(batch, inIdx + 3)\n          );\n\n          "+d+"\n        }\n\n        int inIdx = inOffset + "+c+";\n        if ("+(1===l)+") {\n          "+h+" values = "+h+"(\n            getValue(batch, inIdx),\n            initializationValue,\n            initializationValue,\n            initializationValue\n          );\n\n          "+d+"\n        } else if ("+(2===l)+") {\n          "+h+" values = "+h+"(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            initializationValue,\n            initializationValue\n          );\n\n          "+d+"\n        } else if ("+(3===l)+") {\n          "+h+" values = "+h+"(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            initializationValue\n          );\n\n          "+d+"\n        }\n        setOutput("+u+");\n      }\n    "},Ma=function(e,t){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=e;for(var n="",r=0;r<4;r++){var o="thisRC = rc;";r%2==1&&(o+="thisRC.z += 1;"),r>1&&(o+="thisRC.y += 1;"),n+="\n        "+o+"\n        "+(r>0?"if(thisRC.y < rows && thisRC.z < cols){":"")+"\n          int flatIndex = getFlatIndex(thisRC);\n\n          ivec3 inputRC = inputCoordsFromReshapedOutCoords(flatIndex);\n          vec2 inputRCInnerDims = vec2(float(inputRC.y),float(inputRC.z));\n\n          result["+r+"] =\n            getChannel(getA(inputRC.x, inputRC.y, inputRC.z), inputRCInnerDims);\n        "+(r>0?"}":"")+"\n      "}this.userCode="\n      \n    ivec3 inputCoordsFromReshapedOutCoords(int index) {\n      "+Zo(["r","c","d"],t)+"\n      return ivec3(r, c, d);\n    }\n  \n      "+ei(e)+"\n\n      void main() {\n        ivec3 rc = getOutputCoords();\n\n        vec4 result = vec4(0.);\n\n        ivec3 thisRC;\n        int rows = "+e[1]+";\n        int cols = "+e[2]+";\n\n        "+n+"\n\n        setOutput(result);\n      }\n    "},Pa=function(e,t,n){this.variableNames=["dy"],this.outputShape=[],this.outputShape=t.shape;var r=t.shape,o=r[1],i=r[2],a=e.shape,s=a[1],u=a[2],c=[n&&s>1?o-1:o,n&&u>1?i-1:i],l=[n&&s>1?s-1:s,n&&u>1?u-1:u],d=c[0]/l[0],h=c[1]/l[1],p=1/d,f=1/h,m=2*Math.ceil(p)+2,v=2*Math.ceil(f)+2;this.userCode="\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        int r = coords[1];\n        int c = coords[2];\n\n        float accumulator = 0.0;\n\n        const float heightScale = float("+d+");\n        const float widthScale = float("+h+");\n\n        const float invHeightScale = float("+p+");\n        const float invWidthScale = float("+f+");\n\n        const int winHeight = int("+m+");\n        const int winWidth = int("+v+");\n\n        // Compute bounds for where in dy we will look\n        float startRLerp = floor(float(r) * invHeightScale);\n        int startDyR = int(startRLerp - float(winHeight / 2));\n\n        float startCLerp = floor(float(c) * invWidthScale);\n        int startDyC = int(startCLerp - float(winWidth / 2));\n\n        // Loop over dy\n        for (int dyROffset = 0; dyROffset < winHeight; dyROffset++) {\n          int dyR = dyROffset + startDyR;\n\n          // Guard against the window exceeding the bounds of dy\n          if (dyR < 0 || dyR >= "+s+") {\n            continue;\n          }\n\n          for (int dyCOffset = 0; dyCOffset < winWidth; dyCOffset++) {\n            int dyC = dyCOffset + startDyC;\n\n            // Guard against the window exceeding the bounds of dy\n            if (dyC < 0 || dyC >= "+u+") {\n              continue;\n            }\n\n            float dxR = float(dyR) * heightScale;\n            int topDxRIndex = int(floor(dxR));\n            int bottomDxRIndex = int(min(ceil(dxR), "+(o-1)+".0));\n            float dxRLerp = dxR - float(topDxRIndex);\n            float inverseDxRLerp = 1.0 - dxRLerp;\n\n            float dxC = float(dyC) * widthScale;\n            int leftDxCIndex = int(floor(dxC));\n            int rightDxCIndex = int(min(ceil(dxC), "+(i-1)+".0));\n            float dxCLerp = dxC - float(leftDxCIndex);\n            float inverseDxCLerp = 1.0 - dxCLerp;\n\n            if (r == topDxRIndex && c == leftDxCIndex) {\n              // topLeft\n              accumulator +=\n                getDy(b, dyR, dyC, d) * inverseDxRLerp * inverseDxCLerp;\n            }\n\n            if (r == topDxRIndex && c == rightDxCIndex) {\n              // topRight\n              accumulator += getDy(b, dyR, dyC, d) * inverseDxRLerp * dxCLerp;\n            }\n\n            if (r == bottomDxRIndex && c == leftDxCIndex) {\n              // bottomLeft\n              accumulator += getDy(b, dyR, dyC, d) * dxRLerp * inverseDxCLerp;\n            }\n\n            if (r == bottomDxRIndex && c == rightDxCIndex) {\n              // bottomRight\n              accumulator += getDy(b, dyR, dyC, d) * dxRLerp * dxCLerp;\n            }\n          }\n        }\n        // End loop over dy\n\n        setOutput(accumulator);\n      }\n    "},La=function(e,t,n,r){this.variableNames=["A"],this.outputShape=[];var o=e[0],i=e[1],a=e[2],s=e[3];this.outputShape=[o,t,n,s];var u=[r&&t>1?i-1:i,r&&n>1?a-1:a],c=[r&&t>1?t-1:t,r&&n>1?n-1:n];this.userCode="\n      const vec2 effectiveInputOverOutputRatioRC = vec2(\n          "+u[0]/c[0]+",\n          "+u[1]/c[1]+");\n      const vec2 inputShapeRC = vec2("+i+".0, "+a+".0);\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        ivec2 yRC = coords.yz;\n\n        // Fractional source index.\n        vec2 sourceFracIndexRC = vec2(yRC) * effectiveInputOverOutputRatioRC;\n\n        // Compute the four integer indices.\n        ivec2 sourceFloorRC = ivec2(sourceFracIndexRC);\n        ivec2 sourceCeilRC = ivec2(\n          min(inputShapeRC - 1.0, ceil(sourceFracIndexRC)));\n\n        float topLeft = getA(b, sourceFloorRC.x, sourceFloorRC.y, d);\n        float bottomLeft = getA(b, sourceCeilRC.x, sourceFloorRC.y, d);\n        float topRight = getA(b, sourceFloorRC.x, sourceCeilRC.y, d);\n        float bottomRight = getA(b, sourceCeilRC.x, sourceCeilRC.y, d);\n\n        vec2 fracRC = sourceFracIndexRC - vec2(sourceFloorRC);\n\n        float top = topLeft + (topRight - topLeft) * fracRC.y;\n        float bottom = bottomLeft + (bottomRight - bottomLeft) * fracRC.y;\n        float newValue = top + (bottom - top) * fracRC.x;\n\n        setOutput(newValue);\n      }\n    "},za=function(e,t,n,r){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=[];var o=e[0],i=e[1],a=e[2],s=e[3];this.outputShape=[o,t,n,s];var u=[r&&t>1?i-1:i,r&&n>1?a-1:a],c=[r&&t>1?t-1:t,r&&n>1?n-1:n];this.userCode="\n      const vec3 effectiveInputOverOutputRatioRC = vec3(\n          "+u[0]/c[0]+",\n          "+u[1]/c[1]+",\n          "+u[1]/c[1]+");\n      const vec3 inputShapeRC = vec3("+i+".0, "+a+".0,\n                                     "+a+".0);\n\n      float getAValue(int b, int r, int c, int d) {\n        return getChannel(getA(b, r, c, d), vec2(c, d));\n      }\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        // Calculate values for next column in yRC.z.\n        ivec3 yRC = coords.yzz + ivec3(0, 0, 1);\n\n        // Fractional source index.\n        vec3 sourceFracIndexRC = vec3(yRC) * effectiveInputOverOutputRatioRC;\n\n        // Compute the four integer indices.\n        ivec3 sourceFloorRC = ivec3(sourceFracIndexRC);\n        ivec3 sourceCeilRC = ivec3(\n          min(inputShapeRC - 1.0, ceil(sourceFracIndexRC)));\n\n        // Should we calculate next column and row elements in 2x2 packed cell.\n        bool hasNextCol = d < "+(s-1)+";\n        bool hasNextRow = coords.z < "+(n-1)+";\n\n        // In parallel, construct four corners for all four components in\n        // packed 2x2 cell.\n        vec4 topLeft = vec4(\n          getAValue(b, sourceFloorRC.x, sourceFloorRC.y, d),\n          hasNextCol ? getAValue(b, sourceFloorRC.x, sourceFloorRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceFloorRC.x, sourceFloorRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceFloorRC.x, sourceFloorRC.z, d + 1) : 0.0);\n\n        vec4 bottomLeft = vec4(\n          getAValue(b, sourceCeilRC.x, sourceFloorRC.y, d),\n          hasNextCol ? getAValue(b, sourceCeilRC.x, sourceFloorRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceCeilRC.x, sourceFloorRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceCeilRC.x, sourceFloorRC.z, d + 1) : 0.0);\n\n        vec4 topRight = vec4(\n          getAValue(b, sourceFloorRC.x, sourceCeilRC.y, d),\n          hasNextCol ? getAValue(b, sourceFloorRC.x, sourceCeilRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceFloorRC.x, sourceCeilRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceFloorRC.x, sourceCeilRC.z, d + 1) : 0.0);\n\n        vec4 bottomRight = vec4(\n          getAValue(b, sourceCeilRC.x, sourceCeilRC.y, d),\n          hasNextCol ? getAValue(b, sourceCeilRC.x, sourceCeilRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceCeilRC.x, sourceCeilRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceCeilRC.x, sourceCeilRC.z, d + 1) : 0.0);\n\n        vec3 fracRC = sourceFracIndexRC - vec3(sourceFloorRC);\n\n        vec4 top = mix(topLeft, topRight, fracRC.yyzz);\n        vec4 bottom = mix(bottomLeft, bottomRight, fracRC.yyzz);\n        vec4 newValue = mix(top, bottom, fracRC.x);\n\n        setOutput(newValue);\n      }\n    "},Wa=function(e,t,n){this.variableNames=["dy"],this.outputShape=[],this.outputShape=t.shape;var r=t.shape,o=r[1],i=r[2],a=e.shape,s=a[1],u=a[2],c=[n&&s>1?o-1:o,n&&u>1?i-1:i],l=[n&&s>1?s-1:s,n&&u>1?u-1:u],d=c[0]/l[0],h=c[1]/l[1],p=1/d,f=1/h,m=2*Math.ceil(p)+2,v=2*Math.ceil(f)+2;this.userCode="\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        int r = coords[1];\n        int c = coords[2];\n\n        float accumulator = 0.0;\n\n        const float heightScale = float("+d+");\n        const float widthScale = float("+h+");\n\n        const float invHeightScale = float("+p+");\n        const float invWidthScale = float("+f+");\n\n        const int winHeight = int("+m+");\n        const int winWidth = int("+v+");\n\n        // Compute bounds for where in dy we will look\n        float startRLerp = floor(float(r) * invHeightScale);\n        int startDyR = int(floor(startRLerp - float(winHeight / 2)));\n\n        float startCLerp = floor(float(c) * invWidthScale);\n        int startDyC = int(floor(startCLerp - float(winWidth / 2)));\n\n        // Loop over dy\n        for (int dyROffset = 0; dyROffset < winHeight; dyROffset++) {\n          int dyR = dyROffset + startDyR;\n\n          // Guard against the window exceeding the bounds of dy\n          if (dyR < 0 || dyR >= "+s+") {\n            continue;\n          }\n\n          for (int dyCOffset = 0; dyCOffset < winWidth; dyCOffset++) {\n            int dyC = dyCOffset + startDyC;\n\n            // Guard against the window exceeding the bounds of dy\n            if (dyC < 0 || dyC >= "+u+") {\n              continue;\n            }\n\n            float sourceFracRow =\n              float("+c[0]+") *\n                (float(dyR) / float("+l[0]+"));\n\n            float sourceFracCol =\n                float("+c[1]+") *\n                  (float(dyC) / float("+l[1]+"));\n\n            int sourceNearestRow = int(min(\n                float(int("+o+") - 1),\n                "+n+" ? float(round(sourceFracRow)) :\n                                  float(floor(sourceFracRow))));\n\n            int sourceNearestCol = int(min(\n                float(int("+i+") - 1),\n                "+n+" ? float(round(sourceFracCol)) :\n                                  float(floor(sourceFracCol))));\n\n            if (r == sourceNearestRow && c == sourceNearestCol) {\n              accumulator += getDy(b, dyR, dyC, d);\n            }\n          }\n        }\n        // End loop over dy\n\n        setOutput(accumulator);\n      }\n    "},Ua=function(e,t,n,r){this.variableNames=["A"],this.outputShape=[];var o=e[0],i=e[1],a=e[2],s=e[3];this.outputShape=[o,t,n,s];var u=[r&&t>1?i-1:i,r&&n>1?a-1:a],c=[r&&t>1?t-1:t,r&&n>1?n-1:n],l=r?"0.5":"0.0";this.userCode="\n      const vec2 effectiveInputOverOutputRatioRC = vec2(\n          "+u[0]/c[0]+",\n          "+u[1]/c[1]+");\n      const vec2 inputShapeRC = vec2("+i+".0, "+a+".0);\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        ivec2 yRC = coords.yz;\n\n        // Fractional source index.\n        vec2 sourceFracIndexRC = vec2(yRC) * effectiveInputOverOutputRatioRC;\n\n        // Compute the coordinators of nearest neighbor point.\n        ivec2 sourceNearestRC = ivec2(\n          min(inputShapeRC - 1.0, floor(sourceFracIndexRC + "+l+")));\n\n        float newValue = getA(b, sourceNearestRC.x, sourceNearestRC.y, d);\n\n        setOutput(newValue);\n      }\n    "},Va=function(e,t){this.variableNames=["x"];var n=e.length;if(n>4)throw new Error("WebGL backend: Reverse of rank-"+n+" tensor is not yet supported");if(this.outputShape=e,1!==n){var r=e.map((function(n,r){return function(n){return-1!==t.indexOf(n)&&1!==e[n]?e[n]+" - coords["+n+"] - 1":"coords["+n+"]"}(r)})).join(","),o=ci(n);this.userCode="\n      void main() {\n        "+o+" coords = getOutputCoords();\n        setOutput(getX("+r+"));\n      }\n    "}else this.userCode="\n        void main() {\n          int coord = getOutputCoords();\n          setOutput(getX("+e[0]+" - coord - 1));\n        }\n      "},Ga=function(e,t){this.variableNames=["x"],this.packedInputs=!0,this.packedOutput=!0;var n=e.length;if(n>4)throw new Error("WebGL backend: Reverse of rank-"+n+" tensor is not yet supported");this.outputShape=e;var r=$o("rc",n),o=r[n-1]+" + 1 < "+this.outputShape[n-1],i=r[n-2]+" + 1 < "+this.outputShape[n-2],a=ci(n);function s(n){var r=e.map((function(r,o){return function(n,r){return-1!==t.indexOf(n)&&1!==e[n]?e[n]+" - "+r[n]+" - 1":""+r[n]}(o,n)}));return"getChannel(getX("+r.join(",")+"), vec2("+r.slice(-2).join(",")+"))"}this.userCode=1===n?"\n        void main(){\n          int rc = getOutputCoords();\n          vec4 result = vec4(0.);\n          result.r = getChannel(getX("+e[0]+" - rc - 1),\n            "+e[0]+" - rc - 1);\n          if("+o+"){\n              result.g = getChannel(getX("+e[0]+" - (rc  + 1) - 1),\n                "+e[0]+" - (rc  + 1) - 1);\n          }\n          setOutput(result);\n        }\n      ":"\n        void main() {\n          "+a+" rc = getOutputCoords();\n          vec4 result = vec4(0.);\n          result.r = "+function(e){return s(e)}(r.slice())+";\n          if("+o+"){\n            result.g = "+function(e){return e[n-1]="("+e[n-1]+" + 1)",s(e)}(r.slice())+";\n          }\n          if("+i+") {\n            result.b = "+function(e){return e[n-2]="("+e[n-2]+" + 1)",s(e)}(r.slice())+";\n            if("+o+") {\n              result.a = "+function(e){return e[n-1]="("+e[n-1]+" + 1)",e[n-2]="("+e[n-2]+" + 1)",s(e)}(r.slice())+";\n            }\n          }\n          setOutput(result);\n        }\n    "},Ha=function(e,t,n,r,o,i,a){void 0===a&&(a=!0),this.variableNames=["updates","indices","defaultValue"],this.outputShape=i;var s=ci(o.length),u=ci(i.length),c="";1===n?c="i":2===n&&(c="i, j");var l="getIndices("+c+")",d="";1===r?d="i":2===r&&(d="i, coords[1]");var h="getUpdates("+d+")",p=t>1?"strides[j]":"strides";this.userCode="\n        "+s+" strides = "+s+"("+o+");\n\n        void main() {\n          "+u+" coords = getOutputCoords();\n          float sum = 0.0;\n          bool found = false;\n          for (int i = 0; i < "+e+"; i++) {\n            int flattenedIndex = 0;\n            for (int j = 0; j < "+t+"; j++) {\n              int index = round("+l+");\n              flattenedIndex += index * "+p+";\n            }\n            if (flattenedIndex == coords[0]) {\n              sum += "+h+";\n              found = true;\n            }\n          }\n          setOutput(mix(getDefaultValue(), sum, float(found)));\n        }\n      "},ja=function(e,t){this.variableNames=["x","segmentIds"];var n=e.windowSize,r=e.batchSize,o=e.inSize,i=e.numSegments,a=i*Math.ceil(o/n);this.outputShape=[r,a];var s=4*Math.floor(n/4),u=n%4,c="\n        sumValue += dot(values, segFilter);\n    ",l="";o%n>0&&(l="\n        if (inIdx < 0 || inIdx >= "+o+") {\n          return initializationValue;\n        }\n      ");var d="";o%n>0&&(d="\n        if (inIdx < 0 || inIdx >= "+o+") {\n          return -1.0;\n        }\n      "),this.userCode="\n      const float initializationValue = 0.0;\n\n      float getValue(int batch, int inIdx) {\n        "+l+"\n        return getX(batch, inIdx);\n      }\n\n      float getSegmentIdAtIndex(int inIdx) {\n        "+d+"\n        return getSegmentIds(inIdx);\n      }\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n        int outIdx = coords[1];\n        int inOffset = int(floor(float(outIdx) / float(\n          "+i+")) * float("+n+"));\n        int currentSeg = int(mod(float(outIdx), float("+i+")));\n\n        float sumValue = 0.0;\n\n        for (int i = 0; i < "+s+"; i += 4) {\n          int inIdx = inOffset + i;\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            getValue(batch, inIdx + 3)\n          );\n\n          vec4 segFilter = vec4(\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 2)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 3)) == currentSeg ? 1 : 0\n          );\n\n          "+c+"\n        }\n\n        int inIdx = inOffset + "+s+";\n        if ("+(1===u)+") {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            initializationValue,\n            initializationValue,\n            initializationValue\n          );\n\n          int inIdxSeg = int(getSegmentIdAtIndex(inIdx));\n\n          vec4 segFilter = vec4(\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\n            0,\n            0,\n            0\n          );\n\n          "+c+"\n        } else if ("+(2===u)+") {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            initializationValue,\n            initializationValue\n          );\n\n          vec4 segFilter = vec4(\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,\n              0,\n              0\n          );\n\n          "+c+"\n        } else if ("+(3===u)+") {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            initializationValue\n          );\n\n          vec4 segFilter = vec4(\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 2)) == currentSeg ? 1 : 0,\n            0\n          );\n\n          "+c+"\n        }\n        setOutput(sumValue);\n      }\n    "},qa=function(e,t,n){var r,o;if(this.variableNames=["c","a","b"],this.outputShape=t,n>4)throw Error("Where for rank "+n+" is not yet supported");if(1===n)o="resRC",r="resRC";else{for(var i=["resRC.x","resRC.y","resRC.z","resRC.w"],a=[],s=[],u=0;u<t.length;u++)s.push(""+i[u]),u<e&&a.push(""+i[u]);r=a.join(),o=s.join()}var c=ci(n);this.userCode="\n      void main() {\n        "+c+" resRC = getOutputCoords();\n        float cVal = getC("+r+");\n        if (cVal >= 1.0) {\n          setOutput(getA("+o+"));\n        } else {\n          setOutput(getB("+o+"));\n        }\n      }\n    "},Ka=function(){function e(e){this.variableNames=["source"],this.outputShape=e,this.rank=e.length;var t,n=ci(this.rank),r="uniform int start["+this.rank+"];",o=function(e){if(1===e)return"sourceLoc";if(e<=6)return Xa.slice(0,e).map((function(e){return"sourceLoc."+e})).join(",");throw Error("Slicing for rank "+e+" is not yet supported")}(this.rank);t="\n        "+n+" sourceLoc;\n        "+n+" coords = getOutputCoords();\n        "+e.map((function(e,t){return"sourceLoc."+Xa[t]+" = start["+t+"] + coords."+Xa[t]+";"})).join("\n")+"\n      ",this.userCode="\n      "+r+"\n      void main() {\n        "+t+"\n        setOutput(getSource("+o+"));\n      }\n    "}return e.prototype.getCustomSetupFunc=function(e){var t=this;if(e.length!==this.rank)throw Error("The rank ("+this.rank+") of the program must match the length of start ("+e.length+")");return function(n,r){null==t.startLoc&&(t.startLoc=n.getUniformLocationNoThrow(r,"start"),null==t.startLoc)||n.gl.uniform1iv(t.startLoc,e)}},e}(),Xa=["x","y","z","w","u","v"],Qa=function(){function e(e){this.variableNames=["source"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=e,this.rank=e.length;var t=ci(this.rank),n=$o("coords",this.rank),r=$o("sourceLoc",this.rank),o=1===this.rank?"sourceLoc":"vec2("+r.slice(-2).join()+")",i="getChannel(getSource("+r.join()+"), "+o+")",a="\n      result.x = "+i+";\n      if (++"+n[this.rank-1]+" < "+e[this.rank-1]+") {\n        ++"+r[this.rank-1]+";\n        result.y = "+i+";\n        --"+r[this.rank-1]+";\n      }\n    ",s=1===this.rank?"":"\n      --"+n[this.rank-1]+";\n      if (++"+n[this.rank-2]+" < "+e[this.rank-2]+") {\n        ++"+r[this.rank-2]+";\n        result.z = "+i+";\n        if (++"+n[this.rank-1]+" < "+e[this.rank-1]+") {\n          ++"+r[this.rank-1]+";\n          result.w = "+i+";\n        }\n      }\n    ",u=this.rank<=4?"sourceLoc = coords +\n            "+t+"("+e.map((function(e,t){return"start["+t+"]"})).join()+");":e.map((function(e,t){return r[t]+" = "+n[t]+" + start["+t+"];"})).join("\n");this.userCode="\n      uniform int start["+this.rank+"];\n      void main() {\n        "+t+" coords = getOutputCoords();\n        "+t+" sourceLoc;\n        "+u+"\n        vec4 result = vec4(0.);\n        "+a+"\n        "+s+"\n        setOutput(result);\n      }\n    "}return e.prototype.getCustomSetupFunc=function(e){var t=this;if(e.length!==this.rank)throw Error("The rank ("+this.rank+") of the program must match the length of start ("+e.length+")");return function(n,r){null==t.startLoc&&(t.startLoc=n.getUniformLocationNoThrow(r,"start"),null==t.startLoc)||n.gl.uniform1iv(t.startLoc,e)}},e}(),Ya=function(e,t,n){this.variableNames=["x"],this.outputShape=n;var r=n.length,o=ci(n.length),i=ci(n.length),a="";if(1===r)a="coords * strides + begin";else{var s=0;a=n.map((function(e,t){return s++,1===n.length?"coords * strides["+t+"] + begin["+t+"]":"coords["+(s-1)+"] * strides["+t+"] + begin["+t+"]"})).join(",")}this.userCode="\n      "+o+" begin = "+o+"("+e+");\n      "+o+" strides = "+o+"("+t+");\n\n      void main() {\n        "+i+" coords = getOutputCoords();\n        setOutput(getX("+a+"));\n      }\n    "},$a=function(){function e(e){this.gpgpu=e,this.numUsedTextures=0,this.numFreeTextures=0,this.freeTextures={},this.logEnabled=!1,this.usedTextures={}}return e.prototype.acquireTexture=function(e,t,n){var r,o=Ja(t,n),i=Za(e,o,n);if(i in this.freeTextures||(this.freeTextures[i]=[]),i in this.usedTextures||(this.usedTextures[i]=[]),this.freeTextures[i].length>0){this.numFreeTextures--,this.numUsedTextures++,this.log();var a=this.freeTextures[i].shift();return this.usedTextures[i].push(a),a}return this.numUsedTextures++,this.log(),o===vt.PACKED_2X2_FLOAT32?r=this.gpgpu.createPackedMatrixTexture(e[0],e[1]):o===vt.PACKED_2X2_FLOAT16?r=this.gpgpu.createFloat16PackedMatrixTexture(e[0],e[1]):o===vt.UNPACKED_FLOAT32?r=this.gpgpu.createFloat32MatrixTexture(e[0],e[1]):o===vt.UNPACKED_FLOAT16?r=this.gpgpu.createFloat16MatrixTexture(e[0],e[1]):o===vt.PACKED_4X1_UNSIGNED_BYTE&&(r=this.gpgpu.createUnsignedBytesMatrixTexture(e[0],e[1])),this.usedTextures[i].push(r),r},e.prototype.releaseTexture=function(e,t,n,r){if(null!=this.freeTextures){var o=Za(t,Ja(n,r),r);o in this.freeTextures||(this.freeTextures[o]=[]),this.freeTextures[o].push(e),this.numFreeTextures++,this.numUsedTextures--;var i=this.usedTextures[o],a=i.indexOf(e);if(a<0)throw new Error("Cannot release a texture that was never provided by this texture manager");i.splice(a,1),this.log()}},e.prototype.log=function(){if(this.logEnabled){var e=this.numFreeTextures+this.numUsedTextures;console.log("Free/Used",this.numFreeTextures+" / "+this.numUsedTextures,"("+e+")")}},e.prototype.getNumUsedTextures=function(){return this.numUsedTextures},e.prototype.getNumFreeTextures=function(){return this.numFreeTextures},e.prototype.dispose=function(){var e=this;if(null!=this.freeTextures){for(var t in this.freeTextures)this.freeTextures[t].forEach((function(t){e.gpgpu.deleteMatrixTexture(t)}));for(var t in this.usedTextures)this.usedTextures[t].forEach((function(t){e.gpgpu.deleteMatrixTexture(t)}));this.freeTextures=null,this.usedTextures=null,this.numUsedTextures=0,this.numFreeTextures=0}},e}();function Ja(e,t){if(e===mt.UPLOAD)return vt.PACKED_2X2_FLOAT32;if(e===mt.RENDER||null==e)return function(e){return U().getBool("WEBGL_RENDER_FLOAT32_ENABLED")?e?vt.PACKED_2X2_FLOAT32:vt.UNPACKED_FLOAT32:e?vt.PACKED_2X2_FLOAT16:vt.UNPACKED_FLOAT16}(t);if(e===mt.DOWNLOAD||e===mt.PIXELS)return vt.PACKED_4X1_UNSIGNED_BYTE;throw new Error("Unknown logical texture type "+e)}function Za(e,t,n){return e[0]+"_"+e[1]+"_"+t+"_"+n}var es=function(e,t){this.variableNames=["A"];for(var n=new Array(e.length),r=0;r<n.length;r++)n[r]=e[r]*t[r];this.outputShape=n,this.rank=n.length;var o=ci(this.rank),i=function(e){var t=e.length;if(t>5)throw Error("Tile for rank "+t+" is not yet supported");if(1===t)return"imod(resRC, "+e[0]+")";for(var n=["resRC.x","resRC.y","resRC.z","resRC.w","resRC.u"],r=[],o=0;o<e.length;o++)r.push("imod("+n[o]+", "+e[o]+")");return r.join()}(e);this.userCode="\n      void main() {\n        "+o+" resRC = getOutputCoords();\n        setOutput(getA("+i+"));\n      }\n    "},ts=function(e,t){this.variableNames=["A"];for(var n=new Array(e.length),r=0;r<n.length;r++)n[r]=e[t[r]];this.outputShape=n,this.rank=n.length;var o=ci(this.rank),i=function(e){var t=e.length;if(t>6)throw Error("Transpose for rank "+t+" is not yet supported");for(var n=["resRC.x","resRC.y","resRC.z","resRC.w","resRC.u","resRC.v"],r=new Array(t),o=0;o<e.length;o++)r[e[o]]=n[o];return r.join()}(t);this.userCode="\n    void main() {\n      "+o+" resRC = getOutputCoords();\n      setOutput(getA("+i+"));\n    }\n    "},ns=function(e,t){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0;for(var n=new Array(e.length),r=0;r<n.length;r++)n[r]=e[t[r]];if(this.outputShape=n,this.rank=n.length,this.rank>6)throw Error("Packed transpose for rank "+this.rank+" is not yet supported.");var o=ci(this.rank),i=Yo("rc",this.rank),a=new Array(this.rank);for(r=0;r<t.length;r++)a[t[r]]=i[r];var s="vec2("+a.slice(-2).join()+")",u="++"+i[this.rank-1]+" < "+n[this.rank-1],c="getChannel(getA("+a.join()+"), "+s+")";this.userCode="\n    void main() {\n      "+o+" rc = getOutputCoords();\n      vec4 result = vec4(0.);\n      result[0] = "+c+";\n      if("+u+") {\n        result[1] = "+c+";\n      }\n      --"+i[this.rank-1]+";\n      if(++"+i[this.rank-2]+" < "+n[this.rank-2]+") {\n        result[2] = "+c+";\n        if("+u+") {\n          result[3] = "+c+";\n        }\n      }\n      setOutput(result);\n    }\n    "},rs=1.7580993408473768,os=1.0507009873554805,is=function(e,t){this.variableNames=["A"],this.outputShape=e,this.userCode="\n      float unaryOperation(float x) {\n        "+t+"\n      }\n\n      void main() {\n        float x = getAAtOutCoords();\n        float y = unaryOperation(x);\n\n        setOutput(y);\n      }\n    "},as="if (isnan(x)) return x;",ss="return abs(x);",us=as+"\n  return (x < 0.0) ? 0.0 : x;\n",cs=as+"\n  return (x < 0.0) ? 0.0 : min(6.0, x);\n",ls="return (x >= 0.0) ? x : (exp(x) - 1.0);",ds="return -x;",hs="return ceil(x);",ps="return floor(x);",fs="return exp(x);",ms="return exp(x) - 1.0;",vs="return x;",gs="\n  vec4 result = x * vec4(greaterThanEqual(x, vec4(0.0)));\n  bvec4 isNaN = isnan(x);\n\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n",bs="\n  vec4 result = min(x, vec4(6.)) * vec4(greaterThanEqual(x, vec4(0.0)));\n  bvec4 isNaN = isnan(x);\n\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n",As="\n  vec4 result;\n\n  result.r = (x.r >= 0.0) ? x.r : (exp(x.r) - 1.0);\n  result.g = (x.g >= 0.0) ? x.g : (exp(x.g) - 1.0);\n  result.b = (x.b >= 0.0) ? x.b : (exp(x.b) - 1.0);\n  result.a = (x.a >= 0.0) ? x.a : (exp(x.a) - 1.0);\n\n  return result;\n",ys=function(e,t){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=e,this.userCode="\n      vec4 unaryOperation(vec4 x) {\n        "+t+"\n      }\n\n      void main() {\n        vec4 x = getAAtOutCoords();\n        vec4 y = unaryOperation(x);\n\n        setOutput(y);\n      }\n    "},xs=function(e){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!1,this.outputShape=e;var t=e.length,n=$o("rc",t),r=ci(t),o=function(e,t){if(1===e)return"rc";for(var n="",r=0;r<e;r++)n+=t[r],r<e-1&&(n+=",");return n}(t,n),i=n.slice(-2),a=t<=1?"rc":"vec2("+i.join(",")+")";this.userCode="\n      void main() {\n        "+r+" rc = getOutputCoords();\n        vec4 packedInput = getA("+o+");\n\n        setOutput(getChannel(packedInput, "+a+"));\n      }\n    "},Cs={};function ws(e,t){if(void 0===t&&(t=!1),"linear"===e)return"return x;";if("relu"===e)return t?gs:us;if("elu"===e)return t?As:ls;if("relu6"===e)return t?bs:cs;if("prelu"===e)return t?Ci:yi;throw new Error("Activation "+e+" has not been implemented for the WebGL backend.")}var ks=function(e){function t(t){var n,r=e.call(this)||this;if(r.pendingRead=new WeakMap,r.pendingDisposal=new WeakSet,r.dataRefCount=new WeakMap,r.numBytesInGPU=0,r.uploadWaitMs=0,r.downloadWaitMs=0,r.warnedAboutMemory=!1,r.pendingDeletes=0,r.disposed=!1,!U().getBool("HAS_WEBGL"))throw new Error("WebGL is not supported on this device");if(null==t){var o=yt(U().getNumber("WEBGL_VERSION"));r.binaryCache=((n=U().getNumber("WEBGL_VERSION"))in Cs||(Cs[n]={}),Cs[n]),r.gpgpu=new Aa(o),r.canvas=o.canvas,r.gpgpuCreatedLocally=!0}else r.gpgpu=t,r.binaryCache={},r.gpgpuCreatedLocally=!1,r.canvas=t.gl.canvas;return r.textureManager=new $a(r.gpgpu),r.numMBBeforeWarning=null==U().global.screen?1024:U().global.screen.height*U().global.screen.width*window.devicePixelRatio*600/1024/1024,r.texData=new co(r,dt),r}return M(t,e),t.prototype.numDataIds=function(){return this.texData.numDataIds()+(this.cpuBackend?this.cpuBackend.numDataIds():0)-this.pendingDeletes},t.prototype.write=function(e,t,n){if(U().getBool("DEBUG")&&this.checkNumericalProblems(e),"complex64"===n&&null!=e)throw new Error("Cannot write to a complex64 dtype. Please use tf.complex(real, imag).");var r={};return this.texData.set(r,{shape:t,dtype:n,values:e,usage:mt.UPLOAD}),r},t.prototype.move=function(e,t,n,r){if(U().getBool("DEBUG")&&this.checkNumericalProblems(t),"complex64"===r)throw new Error("Cannot write to a complex64 dtype. Please use tf.complex(real, imag).");this.texData.set(e,{shape:n,dtype:r,values:t,usage:mt.UPLOAD})},t.prototype.readSync=function(e){var t=this.texData.get(e),n=t.values,r=t.dtype,o=t.complexTensors,i=t.slice,a=t.shape,s=t.isPacked;if(null!=i){var u;u=s?new ys(a,vs):new is(a,vs);var c=this.runWebGLProgram(u,[{dataId:e,shape:a,dtype:r}],r),l=this.readSync(c.dataId);return this.disposeData(c.dataId),l}if(null!=n)return this.convertAndCacheOnCPU(e);if("string"===r)return n;var d,h,p=null!=this.activeTimers;return p&&(d=Ne()),h="complex64"===r?Do(o.real.dataSync(),o.imag.dataSync()):this.getValuesFromTexture(e),p&&(this.downloadWaitMs+=Ne()-d),this.convertAndCacheOnCPU(e,h)},t.prototype.read=function(e){return P(this,void 0,void 0,(function(){var t,n,r,o,i,a,s,u,c,l,d,h,p,f,m,v,g,b,A,y,x,C;return L(this,(function(w){switch(w.label){case 0:if(this.pendingRead.has(e))return t=this.pendingRead.get(e),[2,new Promise((function(e){return t.push(e)}))];if(n=this.texData.get(e),r=n.values,o=n.shape,i=n.slice,a=n.dtype,s=n.complexTensors,u=n.isPacked,null!=i)return void 0,c=u?new ys(o,vs):new is(o,vs),l=this.runWebGLProgram(c,[{dataId:e,shape:o,dtype:a}],a),d=this.read(l.dataId),this.disposeData(l.dataId),[2,d];if(null!=r)return[2,this.convertAndCacheOnCPU(e)];if(!U().getBool("WEBGL_DOWNLOAD_FLOAT_ENABLED")&&2===U().getNumber("WEBGL_VERSION"))throw new Error("tensor.data() with WEBGL_DOWNLOAD_FLOAT_ENABLED=false and WEBGL_VERSION=2 not yet supported.");return h=null,"complex64"!==a&&U().get("WEBGL_BUFFER_SUPPORTED")&&(p=this.decode(e),f=this.texData.get(p.dataId),h=(C=this.gpgpu).createBufferFromTexture.apply(C,[f.texture].concat(Ct(o)))),this.pendingRead.set(e,[]),"complex64"===a?[3,2]:[4,this.gpgpu.createAndWaitForFence()];case 1:w.sent(),w.label=2;case 2:return"complex64"!==a?[3,4]:[4,Promise.all([s.real.data(),s.imag.data()])];case 3:return v=w.sent(),g=v[0],b=v[1],m=Do(g,b),[3,5];case 4:null==h?m=this.getValuesFromTexture(e):(A=oe(o),m=this.gpgpu.downloadFloat32MatrixFromBuffer(h,A)),w.label=5;case 5:return null!=p&&this.disposeData(p.dataId),y=this.convertAndCacheOnCPU(e,m),x=this.pendingRead.get(e),this.pendingRead.delete(e),x.forEach((function(e){return e(y)})),this.pendingDisposal.has(e)&&(this.pendingDisposal.delete(e),this.disposeData(e),this.pendingDeletes--),[2,y]}}))}))},t.prototype.checkNumericalProblems=function(e){if(null!=e)for(var t=0;t<e.length;t++){var n=e[t];if(!Et(n)){if(U().getBool("WEBGL_RENDER_FLOAT32_CAPABLE"))throw Error("The value "+n+" cannot be represented with your current settings. Consider enabling float32 rendering: 'tf.env().set('WEBGL_RENDER_FLOAT32_ENABLED', true);'");throw Error("The value "+n+" cannot be represented on this device.")}}},t.prototype.getValuesFromTexture=function(e){var t,n=this.texData.get(e),r=n.shape,o=n.dtype,i=n.isPacked,a=oe(r);if(U().getBool("WEBGL_DOWNLOAD_FLOAT_ENABLED")){var s=this.decode(e),u=this.texData.get(s.dataId),c=(t=this.gpgpu).downloadMatrixFromPackedTexture.apply(t,[u.texture].concat(Ct(r))).subarray(0,a);return this.disposeData(s.dataId),c}var l=U().getBool("WEBGL_PACK")&&!0===i,d=l?tn(r):r,h=l?new Xi(d):new Ki(d),p=this.runWebGLProgram(h,[{shape:d,dtype:o,dataId:e}],"float32"),f=this.texData.get(p.dataId),m=this.gpgpu.downloadByteEncodedFloatMatrixFromOutputTexture(f.texture,f.texShape[0],f.texShape[1]).subarray(0,a);return this.disposeData(p.dataId),m},t.prototype.time=function(e){return P(this,void 0,void 0,(function(){var t,n,r,o,i,a,s;return L(this,(function(u){switch(u.label){case 0:return t=this.activeTimers,n=[],r=!1,null==this.programTimersStack?(this.programTimersStack=n,r=!0):this.activeTimers.push(n),this.activeTimers=n,e(),o=re(this.activeTimers.map((function(e){return e.query}))).filter((function(e){return null!=e})),i=re(this.activeTimers.map((function(e){return e.name}))).filter((function(e){return null!=e})),this.activeTimers=t,r&&(this.programTimersStack=null),a={uploadWaitMs:this.uploadWaitMs,downloadWaitMs:this.downloadWaitMs,kernelMs:null,wallMs:null},U().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE")>0?[4,Promise.all(o)]:[3,2];case 1:return s=u.sent(),a.kernelMs=Z(s),a.getExtraProfileInfo=function(){return s.map((function(e,t){return{name:i[t],ms:e}})).map((function(e){return e.name+": "+e.ms})).join(", ")},[3,3];case 2:a.kernelMs={error:"WebGL query timers are not supported in this environment."},u.label=3;case 3:return this.uploadWaitMs=0,this.downloadWaitMs=0,[2,a]}}))}))},t.prototype.memory=function(){return{unreliable:!1,numBytesInGPU:this.numBytesInGPU}},t.prototype.startTimer=function(){return U().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE")>0?this.gpgpu.beginQuery():{startMs:Ne(),endMs:null}},t.prototype.endTimer=function(e){return U().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE")>0?(this.gpgpu.endQuery(),e):(e.endMs=Ne(),e)},t.prototype.getQueryTime=function(e){return P(this,void 0,void 0,(function(){var t;return L(this,(function(n){return U().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE")>0?[2,this.gpgpu.waitForQueryAndGetTime(e)]:[2,(t=e).endMs-t.startMs]}))}))},t.prototype.disposeData=function(e){if(!this.pendingDisposal.has(e)){if(this.pendingRead.has(e))return this.pendingDisposal.add(e),void this.pendingDeletes++;if(this.texData.has(e)){this.releaseGPUData(e);var t=this.texData.get(e).complexTensors;null!=t&&(t.real.dispose(),t.imag.dispose()),this.texData.delete(e)}}},t.prototype.releaseGPUData=function(e){var t=this.texData.get(e),n=t.texture,r=t.dtype,o=t.texShape,i=t.usage,a=t.isPacked,s=t.slice,u=s&&s.origDataId||e,c=this.dataRefCount.get(u);c>1?this.dataRefCount.set(u,c-1):(this.dataRefCount.delete(u),null!=n&&(this.numBytesInGPU-=this.computeBytes(o,r),this.textureManager.releaseTexture(n,o,i,a)));var l=this.texData.get(e);l.texture=null,l.texShape=null,l.isPacked=!1,l.slice=null},t.prototype.getTexture=function(e){return this.uploadToGPU(e),this.texData.get(e).texture},t.prototype.getDataInfo=function(e){return this.texData.get(e)},t.prototype.getCPUBackend=function(){return U().getBool("WEBGL_CPU_FORWARD")?(null==this.cpuBackend&&(this.cpuBackend=dt.findBackend("cpu")),this.cpuBackend):null},t.prototype.shouldExecuteOnCPU=function(e,t){var n=this;return void 0===t&&(t=128),null!=this.getCPUBackend()&&e.every((function(e){return null==n.texData.get(e.dataId).texture&&e.size<t}))},t.prototype.getGPGPUContext=function(){return this.gpgpu},t.prototype.complex=function(e,t){var n=this.makeOutput(e.shape,"complex64");return this.texData.get(n.dataId).complexTensors={real:dt.keep(e.clone()),imag:dt.keep(t.clone())},n},t.prototype.real=function(e){return this.texData.get(e.dataId).complexTensors.real.clone()},t.prototype.imag=function(e){return this.texData.get(e.dataId).complexTensors.imag.clone()},t.prototype.slice=function(e,t,n){if(this.shouldExecuteOnCPU([e]))return this.cpuBackend.slice(e,t,n);if(0===oe(n))return zn([],n,e.dtype);var r=this.texData.get(e.dataId).isPacked,o=oo(e.shape,t,n);if(r||!o){var i=U().getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new Qa(n):new Ka(n),a=i.getCustomSetupFunc(t);return this.compileAndRun(i,[e],null,a)}return this.uploadToGPU(e.dataId),this.shallowSlice(e,t,n)},t.prototype.shallowSlice=function(e,t,n){var r=this.texData.get(e.dataId),o=this.makeOutput(n,e.dtype),i=this.texData.get(o.dataId);Object.assign(i,r),i.shape=n,i.dtype=e.dtype;var a=io(t,e.strides);r.slice&&(a+=r.slice.flatOffset),i.slice={flatOffset:a,origDataId:r.slice&&r.slice.origDataId||e.dataId};var s=this.dataRefCount.get(i.slice.origDataId)||1;return this.dataRefCount.set(i.slice.origDataId,s+1),o},t.prototype.stridedSlice=function(e,t,n,r){if(this.shouldExecuteOnCPU([e]))return this.cpuBackend.stridedSlice(e,t,n,r);var o=to(t,n,r);if(o.some((function(e){return 0===e})))return zn([],o);var i=new Ya(t,r,o);return this.compileAndRun(i,[e])},t.prototype.reverse=function(e,t){var n=U().getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new Ga(e.shape,t):new Va(e.shape,t);return this.compileAndRun(n,[e])},t.prototype.concat=function(e,t){if("complex64"===e[0].dtype){var n=e.map((function(e){return Pn(e)})),r=e.map((function(e){return Ln(e)}));return Mn(this.concat(n,t),this.concat(r,t))}if(this.shouldExecuteOnCPU(e))return this.cpuBackend.concat(e,t);if(1===e.length)return e[0];if(e.length>U().getNumber("WEBGL_MAX_TEXTURES_IN_SHADER")){var o=Math.floor(e.length/2),i=this.concat(e.slice(0,o),t),a=this.concat(e.slice(o),t);return this.concat([i,a],t)}if(U().getBool("WEBGL_PACK_ARRAY_OPERATIONS")&&e[0].rank>1){var s=new Ri(e.map((function(e){return e.shape})),t);return this.compileAndRun(s,e)}var u=Bn(e.map((function(e){return e.shape})),t),c=e.map((function(e){return e.as2D(-1,oe(e.shape.slice(t)))})),l=new Ii(c.map((function(e){return e.shape})));return this.compileAndRun(l,c).reshape(u)},t.prototype.neg=function(e){if(this.shouldExecuteOnCPU([e]))return this.cpuBackend.neg(e);if(U().getBool("WEBGL_PACK_UNARY_OPERATIONS"))return this.packedUnaryOp(e,ds,e.dtype);var t=new is(e.shape,ds);return this.compileAndRun(t,[e])},t.prototype.batchMatMul=function(e,t,n,r){var o=n?e.shape[2]:e.shape[1],i=r?t.shape[1]:t.shape[2],a=n?e.shape[1]:e.shape[2],s=e.shape[0];if((1===o||1===i)&&a>1e3){n&&(e=e.transpose([0,2,1])),r&&(t=t.transpose([0,2,1]));var u=1===i?e:e.as3D(s,a,1),c=1===i?2:1,l=1===i?t.as3D(s,1,a):t;return this.multiply(u,l).sum(c,!0)}var d=rt(e.dtype,t.dtype),h=new Ia(e.shape,[s,o,i],n,r);return this.compileAndRun(h,[e,t],d)},t.prototype.fusedBatchMatMul=function(e){var t=e.a,n=e.b,r=e.transposeA,o=e.transposeB,i=e.bias,a=e.activation,s=e.preluActivationWeights,u=r?t.shape[2]:t.shape[1],c=o?n.shape[1]:n.shape[2],l=t.shape[0],d=rt(t.dtype,n.dtype),h=null!=i,p=null!=s,f=a?ws(a,!0):null,m=new Ia(t.shape,[l,u,c],r,o,h,f,p),v=[t,n];return i&&v.push(i),s&&v.push(s),this.compileAndRun(m,v,d)},t.prototype.multiply=function(e,t){if("complex64"===e.dtype){var n=this.texData.get(e.dataId),r=this.texData.get(t.dataId),o=new gi("return areal * breal - aimag * bimag;",e.shape,t.shape),i=new gi("return areal * bimag + aimag * breal;",e.shape,t.shape),a=[this.makeComplexComponentTensorInfo(e,n.complexTensors.real),this.makeComplexComponentTensorInfo(e,n.complexTensors.imag),this.makeComplexComponentTensorInfo(t,r.complexTensors.real),this.makeComplexComponentTensorInfo(t,r.complexTensors.imag)],s=this.compileAndRun(o,a),u=this.compileAndRun(i,a),c=this.complex(s,u);return s.dispose(),u.dispose(),c}if(this.shouldExecuteOnCPU([e,t]))return this.cpuBackend.multiply(e,t);if(U().getBool("WEBGL_PACK_BINARY_OPERATIONS"))return this.packedBinaryOp(e,t,Ai,e.dtype);var l=new xi(Ai,e.shape,t.shape);return this.compileAndRun(l,[e,t],e.dtype)},t.prototype.batchNormalization=function(e,t,n,r,o,i){var a=[e,t,n],s=null;null!=i&&(s=i.shape,a.push(i));var u=null;if(null!=o&&(u=o.shape,a.push(o)),U().getBool("WEBGL_PACK_NORMALIZATION")){var c=new vi(e.shape,t.shape,n.shape,s,u,r);return this.compileAndRun(c,a)}var l=new mi(e.shape,t.shape,n.shape,s,u,r);return this.compileAndRun(l,a)},t.prototype.localResponseNormalization4D=function(e,t,n,r,o){var i=U().getBool("WEBGL_PACK_NORMALIZATION")?new ka(e.shape,t,n,r,o):new Ca(e.shape,t,n,r,o);return this.compileAndRun(i,[e])},t.prototype.LRNGrad=function(e,t,n,r,o,i,a){var s=new wa(t.shape,r,o,i,a);return this.compileAndRun(s,[t,n,e])},t.prototype.tile=function(e,t){if("string"===e.dtype){var n=this.readSync(e.dataId).map((function(e){return Me(e)}));return Ho(vr(e.shape,e.dtype,n),t)}var r=new es(e.shape,t);return this.compileAndRun(r,[e])},t.prototype.pad=function(e,t,n){var r=U().getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new Fa(e.shape,t,n):new Da(e.shape,t,n);return this.compileAndRun(r,[e])},t.prototype.transpose=function(e,t){if(this.shouldExecuteOnCPU([e]))return this.cpuBackend.transpose(e,t);var n=U().getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new ns(e.shape,t):new ts(e.shape,t);return this.compileAndRun(n,[e])},t.prototype.gather=function(e,t,n){if(this.shouldExecuteOnCPU([e,t]))return this.cpuBackend.gather(e,t,n);var r=new Zi(e.shape,t.size,n);return this.compileAndRun(r,[e,t])},t.prototype.batchToSpaceND=function(e,t,n){ee(e.rank<=4,(function(){return"batchToSpaceND for rank > 4 with a WebGL backend not implemented yet"}));var r=t.reduce((function(e,t){return e*t})),o=Gr(e.shape,t,r),i=Hr(o.length,t.length),a=jr(e.shape,t,r),s=qr(n,t.length),u=Kr(a,n,t.length);return e.reshape(o).transpose(i).reshape(a).slice(s,u)},t.prototype.spaceToBatchND=function(e,t,n){ee(e.rank<=4,(function(){return"spaceToBatchND for rank > 4 with a WebGL backend not implemented yet"}));var r=t.reduce((function(e,t){return e*t})),o=[[0,0]];o.push.apply(o,n);for(var i=1+t.length;i<e.shape.length;++i)o.push([0,0]);var a=e.pad(o),s=Gr(a.shape,t,r,!1),u=Hr(s.length,t.length,!1),c=jr(a.shape,t,r,!1);return a.reshape(s).transpose(u).reshape(c)},t.prototype.reduce=function(e,t,n){var r=e.shape[0],o=e.shape[1],i=Qr(o),a=new Oa({windowSize:i,inSize:o,batchSize:r},t),s=this.compileAndRun(a,[e],n);return 1===s.shape[1]?s:this.reduce(s,t,n)},t.prototype.argReduce=function(e,t,n){void 0===n&&(n=null);var r=e.shape[0],o=e.shape[1];null!=n&&(r=n.shape[0],o=n.shape[1]);var i=Qr(o),a=new Qo({windowSize:i,inSize:o,batchSize:r},t,null==n),s=[e];null!=n&&s.push(n);var u=this.compileAndRun(a,s,"int32");return 1===u.shape[1]?u:this.argReduce(e,t,u)},t.prototype.argReducePacked=function(e,t,n){void 0===n&&(n=null);var r=null!=n?n.shape:e.shape,o=Qr(r[r.length-1]),i=new hi(r,o,t,null==n),a=null==n?[e]:[e,n],s=this.compileAndRun(i,a,"int32");return s.rank===e.rank?this.argReducePacked(e,t,s):s},t.prototype.sum=function(e,t){Sn("sum",t,e.rank);var n=In(e.shape,t),r=n[0],o=oe(n[1]),i=e.as2D(-1,o),a=ot(e.dtype);return this.reduce(i,"sum",a).reshape(r)},t.prototype.prod=function(e,t){if(this.shouldExecuteOnCPU([e]))return this.cpuBackend.prod(e,t);var n=In(e.shape,t),r=n[0],o=oe(n[1]),i=e.as2D(-1,o),a=ot(e.dtype);return this.reduce(i,"prod",a).reshape(r)},t.prototype.unsortedSegmentSum=function(e,t,n){var r=0,o=Tn([r],e.rank),i=e;null!=o&&(i=e.transpose(o),r=Fn(1,e.rank)[0]);var a=function(e,t,n){for(var r=[],o=e.length,i=0;i<o;i++)i!==t?r.push(e[i]):r.push(n);return r}(i.shape,r,n),s=oe([i.shape[r]]),u=i.as2D(-1,s),c=ot(e.dtype),l=this.segOpCompute(u,"unsortedSegmentSum",t,c,n).reshape(a);return null!=o&&(l=l.transpose(Dn(o))),l},t.prototype.segOpCompute=function(e,t,n,r,o){var i=e.shape[0],a=e.shape[1],s=function(e,t){var n,r=!1;for(e<=30?(n=e,r=!0):n=Ie(e,Math.floor(Math.sqrt(e)));!r;)n>t||n===e?r=!0:n=Ie(e,n+1);return n}(a,o),u=new ja({windowSize:s,inSize:a,batchSize:i,numSegments:o},t),c=this.compileAndRun(u,[e,n],r);return c.shape[1]===o?c:(n=Qn(0,o).tile([a/s]),this.segOpCompute(c,t,n,r,o))},t.prototype.argMinMaxReduce=function(e,t,n){var r=[t];if(Sn("arg"+n.charAt(0).toUpperCase()+n.slice(1),r,e.rank),!U().getBool("WEBGL_PACK_REDUCE")||e.rank<=2){var o=In(e.shape,r),i=o[0],a=oe(o[1]),s=e.as2D(-1,a);return this.argReduce(s,n).reshape(i)}return this.argReducePacked(e,n)},t.prototype.argMin=function(e,t){return this.argMinMaxReduce(e,t,"min")},t.prototype.argMax=function(e,t){return this.argMinMaxReduce(e,t,"max")},t.prototype.cumsum=function(e,t,n,r){if(t!==e.rank-1)throw new Error("WebGL cumsum shader expects an inner-most axis="+(e.rank-1)+" but got axis="+t);var o=new Ui(e.shape,n,r);return this.compileAndRun(o,[e])},t.prototype.equal=function(e,t){if(U().getBool("WEBGL_PACK_BINARY_OPERATIONS"))return this.packedBinaryOp(e,t,"\n  return vec4(equal(a, b));\n","bool");var n=new xi("return float(a == b);",e.shape,t.shape);return this.compileAndRun(n,[e,t],"bool")},t.prototype.notEqual=function(e,t){if(U().getBool("WEBGL_PACK_BINARY_OPERATIONS"))return this.packedBinaryOp(e,t,"\n  return vec4(notEqual(a, b));\n","bool");var n=new xi("return float(a != b);",e.shape,t.shape);return this.compileAndRun(n,[e,t],"bool")},t.prototype.less=function(e,t){if(this.shouldExecuteOnCPU([e,t]))return this.cpuBackend.less(e,t);if(U().getBool("WEBGL_PACK_BINARY_OPERATIONS"))return this.packedBinaryOp(e,t,"\n  return vec4(lessThan(a, b));\n","bool");var n=new xi("return float(a < b);",e.shape,t.shape);return this.compileAndRun(n,[e,t],"bool")},t.prototype.lessEqual=function(e,t){if(U().getBool("WEBGL_PACK_BINARY_OPERATIONS"))return this.packedBinaryOp(e,t,"\n  return vec4(lessThanEqual(a, b));\n","bool");var n=new xi("return float(a <= b);",e.shape,t.shape);return this.compileAndRun(n,[e,t],"bool")},t.prototype.greater=function(e,t){if(this.shouldExecuteOnCPU([e,t]))return this.cpuBackend.greater(e,t);if(U().getBool("WEBGL_PACK_BINARY_OPERATIONS"))return this.packedBinaryOp(e,t,"\n  return vec4(greaterThan(a, b));\n","bool");var n=new xi("return float(a > b);",e.shape,t.shape);return this.compileAndRun(n,[e,t],"bool")},t.prototype.greaterEqual=function(e,t){if(U().getBool("WEBGL_PACK_BINARY_OPERATIONS"))return this.packedBinaryOp(e,t,"\n  return vec4(greaterThanEqual(a, b));\n","bool");var n=new xi("return float(a >= b);",e.shape,t.shape);return this.compileAndRun(n,[e,t],"bool")},t.prototype.logicalNot=function(e){var t=new is(e.shape,"return float(!(x >= 1.0));");return this.compileAndRun(t,[e])},t.prototype.logicalAnd=function(e,t){if(U().getBool("WEBGL_PACK_BINARY_OPERATIONS"))return this.packedBinaryOp(e,t,"\n  return vec4(\n    vec4(greaterThanEqual(a, vec4(1.0))) *\n    vec4(greaterThanEqual(b, vec4(1.0))));\n","bool");var n=new xi("return float(a >= 1.0 && b >= 1.0);",e.shape,t.shape);return this.compileAndRun(n,[e,t],"bool")},t.prototype.logicalOr=function(e,t){if(U().getBool("WEBGL_PACK_BINARY_OPERATIONS"))return this.packedBinaryOp(e,t,"\n  return min(\n    vec4(greaterThanEqual(a, vec4(1.0))) +\n    vec4(greaterThanEqual(b, vec4(1.0))),\n    vec4(1.0));\n","bool");var n=new xi("return float(a >= 1.0 || b >= 1.0);",e.shape,t.shape);return this.compileAndRun(n,[e,t],"bool")},t.prototype.select=function(e,t,n){var r=new qa(e.rank,t.shape,t.rank);return this.compileAndRun(r,[e,t,n],rt(t.dtype,n.dtype))},t.prototype.where=function(e){yn("tf.where() in webgl locks the UI thread. Call tf.whereAsync() instead");var t=e.dataSync();return qo(e.shape,t)},t.prototype.topk=function(e,t,n){return jo(e.dataSync(),e.shape,e.dtype,t)},t.prototype.min=function(e,t){Sn("min",t,e.rank);var n=In(e.shape,t),r=n[0],o=oe(n[1]),i=e.as2D(-1,o);return this.reduce(i,"min",i.dtype).reshape(r)},t.prototype.minimum=function(e,t){if(this.shouldExecuteOnCPU([e,t]))return this.cpuBackend.minimum(e,t);var n=U().getBool("WEBGL_PACK_BINARY_OPERATIONS")?new wi("\n  vec4 result = vec4(min(a, b));\n  vec4 isNaN = min(vec4(isnan(a)) + vec4(isnan(b)), vec4(1.0));\n  \n  result.r = isNaN.r > 0. ? NAN : result.r;\n  result.g = isNaN.g > 0. ? NAN : result.g;\n  result.b = isNaN.b > 0. ? NAN : result.b;\n  result.a = isNaN.a > 0. ? NAN : result.a;\n\n  return result;\n",e.shape,t.shape):new xi("\n  if (isnan(a)) return a;\n  if (isnan(b)) return b;\n\n  return min(a, b);\n",e.shape,t.shape);return this.compileAndRun(n,[e,t])},t.prototype.mod=function(e,t){var n=U().getBool("WEBGL_PACK_BINARY_OPERATIONS")?new wi("\n  vec4 result = mod(a, b);\n  vec4 isNaN = vec4(equal(b, vec4(0.0)));\n  \n  result.r = isNaN.r > 0. ? NAN : result.r;\n  result.g = isNaN.g > 0. ? NAN : result.g;\n  result.b = isNaN.b > 0. ? NAN : result.b;\n  result.a = isNaN.a > 0. ? NAN : result.a;\n\n  return result;\n",e.shape,t.shape):new xi("if (b == 0.0) return NAN;\n  return mod(a, b);",e.shape,t.shape);return this.compileAndRun(n,[e,t])},t.prototype.max=function(e,t){if(this.shouldExecuteOnCPU([e]))return this.cpuBackend.max(e,t);Sn("max",t,e.rank);var n=In(e.shape,t),r=n[0],o=oe(n[1]),i=e.as2D(-1,o);return this.reduce(i,"max",i.dtype).reshape(r)},t.prototype.maximum=function(e,t){if(this.shouldExecuteOnCPU([e,t]))return this.cpuBackend.maximum(e,t);var n=U().getBool("WEBGL_PACK_BINARY_OPERATIONS")?new wi("\n  vec4 result = vec4(max(a, b));\n  vec4 isNaN = min(vec4(isnan(a)) + vec4(isnan(b)), vec4(1.0));\n  \n  result.r = isNaN.r > 0. ? NAN : result.r;\n  result.g = isNaN.g > 0. ? NAN : result.g;\n  result.b = isNaN.b > 0. ? NAN : result.b;\n  result.a = isNaN.a > 0. ? NAN : result.a;\n\n  return result;\n",e.shape,t.shape):new xi("\n  if (isnan(a)) return a;\n  if (isnan(b)) return b;\n\n  return max(a, b);\n",e.shape,t.shape);return this.compileAndRun(n,[e,t])},t.prototype.all=function(e,t){Sn("all",t,e.rank);var n=In(e.shape,t),r=n[0],o=oe(n[1]),i=e.as2D(-1,o);return this.reduce(i,"all",i.dtype).reshape(r)},t.prototype.any=function(e,t){Sn("any",t,e.rank);var n=In(e.shape,t),r=n[0],o=oe(n[1]),i=e.as2D(-1,o);return this.reduce(i,"any",i.dtype).reshape(r)},t.prototype.realDivide=function(e,t){if(U().getBool("WEBGL_PACK_BINARY_OPERATIONS"))return this.packedBinaryOp(e,t,"\n  // vec4 one = vec4(equal(a, b));\n  // return one + (vec4(1.0) - one) * a / b;\n  vec4 result = a / b;\n  if(a.x == b.x) {\n    result.x = 1.;\n  }\n  if(a.y == b.y) {\n    result.y = 1.;\n  }\n  if(a.z == b.z) {\n    result.z = 1.;\n  }\n  if(a.w == b.w) {\n    result.w = 1.;\n  }\n\n  return result;\n","float32",!0);var n=new xi("\nif (a == b) {\n  return 1.0;\n};\nreturn a / b;",e.shape,t.shape);return this.compileAndRun(n,[e,t],"float32")},t.prototype.floorDiv=function(e,t){if(U().getBool("WEBGL_PACK_BINARY_OPERATIONS"))return this.packedBinaryOp(e,t,"\n  ivec4 ia = round(a);\n  ivec4 ib = round(b);\n  bvec4 cond = notEqual(ib, ivec4(0));\n  ivec4 result = ivec4(0);\n  vec4 s = sign(a) * sign(b);\n\n  // Windows (D3D) wants guaranteed non-zero int division at compile-time.\n  if (cond[0]) {\n    result[0] = idiv(ia[0], ib[0], s[0]);\n  }\n  if (cond[1]) {\n    result[1] = idiv(ia[1], ib[1], s[1]);\n  }\n  if (cond[2]) {\n    result[2] = idiv(ia[2], ib[2], s[2]);\n  }\n  if (cond[3]) {\n    result[3] = idiv(ia[3], ib[3], s[3]);\n  }\n  return vec4(result);\n","int32");var n=new xi("\n  float s = sign(a) * sign(b);\n  int ia = round(a);\n  int ib = round(b);\n  if (ib != 0) {\n    // Windows (D3D) wants guaranteed non-zero int division at compile-time.\n    return float(idiv(ia, ib, s));\n  } else {\n    return NAN;\n  }\n",e.shape,t.shape);return this.compileAndRun(n,[e,t],"int32")},t.prototype.add=function(e,t){if("complex64"===e.dtype&&"complex64"===t.dtype)return this.complexSeparableBinaryOp(e,t,bi);if(this.shouldExecuteOnCPU([e,t]))return this.cpuBackend.add(e,t);var n=rt(e.dtype,t.dtype);if(U().getBool("WEBGL_PACK_BINARY_OPERATIONS"))return this.packedBinaryOp(e,t,bi,n);var r=new xi(bi,e.shape,t.shape);return this.compileAndRun(r,[e,t],n)},t.prototype.packedUnaryOp=function(e,t,n){var r=new ys(e.shape,t);return this.compileAndRun(r,[e],n)},t.prototype.packedBinaryOp=function(e,t,n,r,o){void 0===o&&(o=!1);var i=new wi(n,e.shape,t.shape,o);return this.compileAndRun(i,[e,t],r)},t.prototype.complexSeparableBinaryOp=function(e,t,n){var r=this,o=this.texData.get(e.dataId),i=this.texData.get(t.dataId),a=[[o.complexTensors.real,i.complexTensors.real],[o.complexTensors.imag,i.complexTensors.imag]].map((function(o){var i=o[0],a=o[1],s=r.makeComplexComponentTensorInfo(e,i),u=r.makeComplexComponentTensorInfo(t,a),c=new xi(n,e.shape,t.shape);return r.compileAndRun(c,[s,u],rt(i.dtype,a.dtype))})),s=a[0],u=a[1],c=this.complex(s,u);return s.dispose(),u.dispose(),c},t.prototype.makeComplexComponentTensorInfo=function(e,t){return{dataId:t.dataId,dtype:t.dtype,shape:e.shape}},t.prototype.addN=function(e){if(1===e.length)return e[0];if(e.length>U().get("WEBGL_MAX_TEXTURES_IN_SHADER")){var t=Math.floor(e.length/2),n=this.addN(e.slice(0,t)),r=this.addN(e.slice(t));return this.addN([n,r])}var o=e.map((function(e){return e.dtype})).reduce((function(e,t){return rt(e,t)})),i=e.map((function(e){return e.shape})),a=U().getBool("WEBGL_PACK")?new Xo(e[0].shape,i):new Ko(e[0].shape,i);return this.compileAndRun(a,e,o)},t.prototype.subtract=function(e,t){if("complex64"===e.dtype&&"complex64"===t.dtype)return this.complexSeparableBinaryOp(e,t,"return a - b;");if(this.shouldExecuteOnCPU([e,t]))return this.cpuBackend.subtract(e,t);var n=rt(e.dtype,t.dtype);if(U().getBool("WEBGL_PACK_BINARY_OPERATIONS"))return this.packedBinaryOp(e,t,"return a - b;",e.dtype);var r=new xi("return a - b;",e.shape,t.shape);return this.compileAndRun(r,[e,t],n)},t.prototype.pow=function(e,t){var n=U().getBool("WEBGL_PACK_BINARY_OPERATIONS")?new wi("\n  // isModRound1 has 1 for components with round(mod(b, 2.0)) == 1, 0 otherwise.\n  vec4 isModRound1 = vec4(equal(round(mod(b, 2.0)), ivec4(1)));\n  vec4 multiplier = sign(a) * isModRound1 + (vec4(1.0) - isModRound1);\n  vec4 result = multiplier * pow(abs(a), b);\n\n  // Ensure that a^0 = 1, including 0^0 = 1 as this correspond to TF and JS\n  bvec4 isExpZero = equal(b, vec4(0.0));\n  result.r = isExpZero.r ? 1.0 : result.r;\n  result.g = isExpZero.g ? 1.0 : result.g;\n  result.b = isExpZero.b ? 1.0 : result.b;\n  result.a = isExpZero.a ? 1.0 : result.a;\n\n  vec4 isNaN = vec4(lessThan(a, vec4(0.0))) * vec4(lessThan(floor(b), b));\n  \n  result.r = isNaN.r > 0. ? NAN : result.r;\n  result.g = isNaN.g > 0. ? NAN : result.g;\n  result.b = isNaN.b > 0. ? NAN : result.b;\n  result.a = isNaN.a > 0. ? NAN : result.a;\n\n  return result;\n",e.shape,t.shape):new xi("\nif(a < 0.0 && floor(b) < b){\n  return NAN;\n}\nif (b == 0.0) {\n  return 1.0;\n}\nreturn (round(mod(b, 2.0)) != 1) ?\n    pow(abs(a), b) : sign(a) * pow(abs(a), b);\n",e.shape,t.shape),r=rt(e.dtype,t.dtype);return this.compileAndRun(n,[e,t],r)},t.prototype.ceil=function(e){if(this.shouldExecuteOnCPU([e]))return this.cpuBackend.ceil(e);if(U().getBool("WEBGL_PACK_UNARY_OPERATIONS"))return this.packedUnaryOp(e,hs,e.dtype);var t=new is(e.shape,hs);return this.compileAndRun(t,[e])},t.prototype.floor=function(e){if(this.shouldExecuteOnCPU([e]))return this.cpuBackend.floor(e);if(U().getBool("WEBGL_PACK_UNARY_OPERATIONS"))return this.packedUnaryOp(e,ps,e.dtype);var t=new is(e.shape,ps);return this.compileAndRun(t,[e])},t.prototype.sign=function(e){var t=new is(e.shape,"\n  if (isnan(x)) { return 0.0; }\n  return sign(x);\n");return this.compileAndRun(t,[e])},t.prototype.isNaN=function(e){var t=new is(e.shape,"return float(isnan(x));");return this.compileAndRun(t,[e],"bool")},t.prototype.isInf=function(e){var t=new is(e.shape,"return float(isinf(x));");return this.compileAndRun(t,[e],"bool")},t.prototype.isFinite=function(e){var t=new is(e.shape,"return float(!isnan(x) && !isinf(x));");return this.compileAndRun(t,[e],"bool")},t.prototype.round=function(e){var t=new is(e.shape,"\n  // OpenGL ES does not support round function.\n  // The algorithm is based on banker's rounding.\n  float base = floor(x);\n  if ((x - base) < 0.5) {\n    return floor(x);\n  } else if ((x - base) > 0.5) {\n    return ceil(x);\n  } else {\n    if (mod(base, 2.0) == 0.0) {\n      return base;\n    } else {\n      return base + 1.0;\n    }\n  }\n");return this.compileAndRun(t,[e])},t.prototype.exp=function(e){if(this.shouldExecuteOnCPU([e]))return this.cpuBackend.exp(e);if(U().getBool("WEBGL_PACK_UNARY_OPERATIONS"))return this.packedUnaryOp(e,fs,e.dtype);var t=new is(e.shape,fs);return this.compileAndRun(t,[e])},t.prototype.expm1=function(e){if(this.shouldExecuteOnCPU([e]))return this.cpuBackend.expm1(e);if(U().getBool("WEBGL_PACK_UNARY_OPERATIONS"))return this.packedUnaryOp(e,ms,e.dtype);var t=new is(e.shape,ms);return this.compileAndRun(t,[e])},t.prototype.softmax=function(e,t){var n=he([t],e.shape),r=this.max(e,n),o=Rn(r.shape,n),i=this.subtract(e,r.reshape(o)),a=this.exp(i),s=this.sum(a,n).reshape(o);return this.realDivide(a,s)},t.prototype.log=function(e){if(this.shouldExecuteOnCPU([e]))return this.cpuBackend.log(e);if(U().getBool("WEBGL_PACK_UNARY_OPERATIONS"))return this.packedUnaryOp(e,"\n  vec4 result = log(x);\n  vec4 isNaN = vec4(lessThan(x, vec4(0.0)));\n  result.r = isNaN.r == 1.0 ? NAN : result.r;\n  result.g = isNaN.g == 1.0 ? NAN : result.g;\n  result.b = isNaN.b == 1.0 ? NAN : result.b;\n  result.a = isNaN.a == 1.0 ? NAN : result.a;\n\n  return result;\n",e.dtype);var t=new is(e.shape,"if (x < 0.0) return NAN;\n  return log(x);");return this.compileAndRun(t,[e])},t.prototype.log1p=function(e){var t=new is(e.shape,"return log(1.0 + x);");return this.compileAndRun(t,[e])},t.prototype.sqrt=function(e){var t=new is(e.shape,"return sqrt(x);");return this.compileAndRun(t,[e])},t.prototype.rsqrt=function(e){if(this.shouldExecuteOnCPU([e]))return this.cpuBackend.rsqrt(e);var t=new is(e.shape,"return inversesqrt(x);");return this.compileAndRun(t,[e])},t.prototype.reciprocal=function(e){var t=new is(e.shape,"return 1.0 / x;");return this.compileAndRun(t,[e])},t.prototype.relu=function(e){var t;return t=U().getBool("WEBGL_PACK")?new ys(e.shape,gs):new is(e.shape,us),this.compileAndRun(t,[e])},t.prototype.relu6=function(e){var t;return t=U().getBool("WEBGL_PACK")?new ys(e.shape,bs):new is(e.shape,cs),this.compileAndRun(t,[e])},t.prototype.prelu=function(e,t){var n=U().getBool("WEBGL_PACK_BINARY_OPERATIONS")?new wi(Ci,e.shape,t.shape):new xi(yi,e.shape,t.shape);return this.compileAndRun(n,[e,t])},t.prototype.elu=function(e){if(U().getBool("WEBGL_PACK_UNARY_OPERATIONS"))return this.packedUnaryOp(e,As,e.dtype);var t=new is(e.shape,ls);return this.compileAndRun(t,[e])},t.prototype.eluDer=function(e,t){var n=U().getBool("WEBGL_PACK_BINARY_OPERATIONS")?new wi("\n  vec4 bGTEZero = vec4(greaterThanEqual(b, vec4(0.)));\n  return (bGTEZero * a) + ((vec4(1.0) - bGTEZero) * (a * (b + vec4(1.0))));\n",e.shape,t.shape):new xi("return (b >= 1.0) ? a : a * (b + 1.0);",e.shape,t.shape);return this.compileAndRun(n,[e,t])},t.prototype.selu=function(e){var t=new is(e.shape,"\n  // Stable and Attracting Fixed Point (0, 1) for Normalized Weights.\n  // see: https://arxiv.org/abs/1706.02515\n  float scaleAlpha = 1.7580993408473768;\n  float scale = 1.0507009873554805;\n  return (x >= 0.0) ? scale * x : scaleAlpha * (exp(x) - 1.0);\n");return this.compileAndRun(t,[e])},t.prototype.int=function(e){var t=new is(e.shape,"return float(int(x));");return this.compileAndRun(t,[e],"int32")},t.prototype.clip=function(e,t,n){var r,o=(r=U().getBool("WEBGL_PACK_CLIP")?new _i(e.shape):new ki(e.shape)).getCustomSetupFunc(t,n);return this.compileAndRun(r,[e],null,o)},t.prototype.abs=function(e){if(this.shouldExecuteOnCPU([e]))return this.cpuBackend.abs(e);if(U().getBool("WEBGL_PACK_UNARY_OPERATIONS"))return this.packedUnaryOp(e,ss,e.dtype);var t=new is(e.shape,ss);return this.compileAndRun(t,[e])},t.prototype.complexAbs=function(e){var t=this.texData.get(e.dataId),n=new Ei(e.shape),r=[this.makeComplexComponentTensorInfo(e,t.complexTensors.real),this.makeComplexComponentTensorInfo(e,t.complexTensors.imag)];return this.compileAndRun(n,r)},t.prototype.sigmoid=function(e){var t=new is(e.shape,"return 1.0 / (1.0 + exp(-1.0 * x));");return this.compileAndRun(t,[e])},t.prototype.softplus=function(e){var t=new is(e.shape,"\n  float epsilon = 1.1920928955078125e-7;\n  float threshold = log(epsilon) + 2.0;\n\n  bool too_large = x > -threshold;\n  bool too_small = x < threshold;\n\n  float result;\n  float exp_x = exp(x);\n\n  if (too_large){\n    result = x;\n  }\n  else if (too_small){\n    result = exp_x;\n  }\n  else{\n    result = log(exp_x + 1.0);\n  }\n  return result;\n");return this.compileAndRun(t,[e])},t.prototype.sin=function(e){var t=new is(e.shape,"if (isnan(x)) return x;\n  return sin(x);\n");return this.compileAndRun(t,[e])},t.prototype.cos=function(e){var t=new is(e.shape,"if (isnan(x)) return x;\n  return cos(x);\n");return this.compileAndRun(t,[e])},t.prototype.tan=function(e){var t=new is(e.shape,"return tan(x);");return this.compileAndRun(t,[e])},t.prototype.asin=function(e){var t=new is(e.shape,"if (isnan(x)) return x;\n  if (abs(x) > 1.) {\n    return NAN;\n  }\n  return asin(x);\n");return this.compileAndRun(t,[e])},t.prototype.acos=function(e){var t=new is(e.shape,"if (isnan(x)) return x;\n  if (abs(x) > 1.) {\n    return NAN;\n  }\n  return acos(x);\n");return this.compileAndRun(t,[e])},t.prototype.atan=function(e){var t=new is(e.shape,"if (isnan(x)) return x;\n  return atan(x);\n");return this.compileAndRun(t,[e])},t.prototype.atan2=function(e,t){var n=U().getBool("WEBGL_PACK_BINARY_OPERATIONS")?new wi("\n  vec4 result = atan(a, b);\n  vec4 isNaN = min(vec4(isnan(a)) + vec4(isnan(b)), vec4(1.0));\n  \n  result.r = isNaN.r > 0. ? NAN : result.r;\n  result.g = isNaN.g > 0. ? NAN : result.g;\n  result.b = isNaN.b > 0. ? NAN : result.b;\n  result.a = isNaN.a > 0. ? NAN : result.a;\n\n  return result;\n",e.shape,t.shape):new xi("\n  if (isnan(a)) return a;\n  if (isnan(b)) return b;\n\n  return atan(a, b);\n",e.shape,t.shape);return this.compileAndRun(n,[e,t])},t.prototype.sinh=function(e){var t=new is(e.shape,"\n  float e2x = exp(x);\n  return (e2x - 1.0 / e2x) / 2.0;\n");return this.compileAndRun(t,[e])},t.prototype.cosh=function(e){var t=new is(e.shape,"\n  float e2x = exp(-x);\n  return (e2x + 1.0 / e2x) / 2.0;\n");return this.compileAndRun(t,[e])},t.prototype.tanh=function(e){var t=new is(e.shape,"\n  float e2x = exp(-2.0 * abs(x));\n  return sign(x) * (1.0 - e2x) / (1.0 + e2x);\n");return this.compileAndRun(t,[e])},t.prototype.asinh=function(e){var t=new is(e.shape,"if (isnan(x)) return x;return log(x + sqrt(x * x + 1.0));");return this.compileAndRun(t,[e])},t.prototype.acosh=function(e){var t=new is(e.shape,"if (isnan(x)) return x;\n  if (x < 1.0) return NAN;\n  return log(x + sqrt(x * x - 1.0));");return this.compileAndRun(t,[e])},t.prototype.atanh=function(e){var t=new is(e.shape,"if (isnan(x)) return x;\n  if ((x < -1.0) || (x > 1.0)) return NAN;\n  return (log(1.0 + x) - log(1.0 - x)) / 2.0;");return this.compileAndRun(t,[e])},t.prototype.erf=function(e){var t=new is(e.shape,'\n  // Error function is calculated approximately with elementary function.\n  // See "Handbook of Mathematical Functions with Formulas,\n  // Graphs, and Mathematical Tables", Abramowitz and Stegun.\n  float p = 0.3275911;\n  float a1 = 0.254829592;\n  float a2 = -0.284496736;\n  float a3 = 1.421413741;\n  float a4 = -1.453152027;\n  float a5 = 1.061405429;\n\n  float sign = sign(x);\n  x = abs(x);\n  float t = 1.0 / (1.0 + p * x);\n  return sign * (1.0 - (((((a5*t + a4)*t) + a3)*t + a2)*t + a1)*t*exp(-x*x));\n');return this.compileAndRun(t,[e])},t.prototype.step=function(e,t){var n=new is(e.shape,function(e){return void 0===e&&(e=0),as+"\n    return x > 0.0 ? 1.0 : float("+e+");\n  "}(t));return this.compileAndRun(n,[e])},t.prototype.conv2dByMatMul=function(e,t,n,r,o,i){var a=e.shape,s=this.texData.get(e.dataId),u=n.inChannels,c=a[0]*a[1]*a[2],l=n.outChannels,d="channelsLast"===n.dataFormat,h=(1===c||1===l)&&u>1e3,p=a[2]%2!=0&&!!s.isPacked;if(h||!U().getBool("WEBGL_LAZILY_UNPACK")||!U().getBool("WEBGL_PACK_BINARY_OPERATIONS")||!p){var f=d?a[0]*a[1]*a[2]:a[0]*a[2]*a[3],m=this.reshape(e,[1,f,n.inChannels]),v=this.reshape(t,[1,n.inChannels,n.outChannels]);return this.reshape(this.fusedBatchMatMul({a:m,b:v,transposeA:!1,transposeB:!1,bias:r,activation:o,preluActivationWeights:i}),n.outShape)}var g=d?a[0]*a[1]*(a[2]+1):a[0]*a[2]*(a[3]+1),b={dataId:e.dataId,shape:[1,g,n.inChannels],dtype:e.dtype},A=s.shape;s.shape=s.shape.slice(),s.shape[s.shape.length-2]++,ee(on(s.shape,b.shape),(function(){return"packed reshape "+s.shape+" to "+b.shape+" isn't free"}));var y=this.reshape(t,[1,n.inChannels,n.outChannels]),x=this.fusedBatchMatMul({a:b,b:y,transposeA:!1,transposeB:!1,bias:r,activation:o,preluActivationWeights:i}),C=this.texData.get(x.dataId);return ee(C.isPacked,(function(){return"batchMatMul result is expected to be packed"})),s.shape=A,C.shape=n.outShape,dt.makeTensorFromDataId(x.dataId,n.outShape,x.dtype)},t.prototype.conv2dWithIm2Row=function(e,t,n,r,o,i){var a=n.filterWidth,s=n.filterHeight,u=n.inChannels,c=n.outWidth,l=n.outHeight,d="channelsLast"===n.dataFormat,h=a*s*u,p=l*c,f=[h,p],m=e.squeeze([0]),v=t.reshape([1,h,-1]),g=new xa(f,m.shape,n),b=this.compileAndRun(g,[m]).reshape([1,f[0],f[1]]),A=null!=r,y=null!=i,x=o?ws(o,!0):null,C=new Ia(b.shape,[1,p,n.outChannels],!0,!1,A,x,y),w=[b,v];r&&w.push(r),y&&w.push(i);var k=this.compileAndRun(C,w);return d?k.reshape([1,l,c,n.outChannels]):k.reshape([1,n.outChannels,l,c])},t.prototype.fusedConv2d=function(e){var t=e.input,n=e.filter,r=e.convInfo,o=e.bias,i=e.activation,a=e.preluActivationWeights;if(1===r.filterHeight&&1===r.filterWidth&&1===r.dilationHeight&&1===r.dilationWidth&&1===r.strideHeight&&1===r.strideWidth&&("SAME"===r.padInfo.type||"VALID"===r.padInfo.type))return this.conv2dByMatMul(t,n,r,o,i,a);if(U().getBool("WEBGL_CONV_IM2COL")&&1===t.shape[0])return this.conv2dWithIm2Row(t,n,r,o,i,a);var s=null!=o,u=null!=a,c=i?ws(i,!1):null,l=new Mi(r,s,c,u),d=[t,n];return o&&d.push(o),a&&d.push(a),this.compileAndRun(l,d)},t.prototype.conv2d=function(e,t,n){if(1===n.filterHeight&&1===n.filterWidth&&1===n.dilationHeight&&1===n.dilationWidth&&1===n.strideHeight&&1===n.strideWidth&&("SAME"===n.padInfo.type||"VALID"===n.padInfo.type))return this.conv2dByMatMul(e,t,n);if(U().getBool("WEBGL_CONV_IM2COL")&&1===e.shape[0])return this.conv2dWithIm2Row(e,t,n);var r=new Mi(n);return this.compileAndRun(r,[e,t])},t.prototype.conv2dDerInput=function(e,t,n){var r=new Di(n);return this.compileAndRun(r,[e,t])},t.prototype.conv2dDerFilter=function(e,t,n){var r=new Ti(n);return this.compileAndRun(r,[e,t])},t.prototype.fusedDepthwiseConv2D=function(e){var t,n=e.input,r=e.filter,o=e.convInfo,i=e.bias,a=e.activation,s=e.preluActivationWeights,u=U().getBool("WEBGL_PACK_DEPTHWISECONV")&&o.strideWidth<=2&&o.outChannels/o.inChannels==1,c=a?ws(a,u):null,l=[n,r],d=null!=i,h=null!=s;return d&&l.push(i),h&&l.push(s),u?(t=new zi(o,d,c,h),this.compileAndRun(t,l)):(t=new Li(o,d,c,h),this.compileAndRun(t,l))},t.prototype.depthwiseConv2D=function(e,t,n){var r;return U().getBool("WEBGL_PACK_DEPTHWISECONV")&&n.strideWidth<=2&&n.outChannels/n.inChannels==1?(r=new zi(n),this.compileAndRun(r,[e,t])):(r=new Li(n),this.compileAndRun(r,[e,t]))},t.prototype.depthwiseConv2DDerInput=function(e,t,n){var r=new Oi(n);return this.compileAndRun(r,[e,t])},t.prototype.depthwiseConv2DDerFilter=function(e,t,n){var r=new Bi(n);return this.compileAndRun(r,[e,t])},t.prototype.conv3d=function(e,t,n){var r=new Pi(n);return this.compileAndRun(r,[e,t])},t.prototype.conv3dDerInput=function(e,t,n){var r=new Ni(n);return this.compileAndRun(r,[e,t])},t.prototype.conv3dDerFilter=function(e,t,n){var r=new Fi(n);return this.compileAndRun(r,[e,t])},t.prototype.maxPool=function(e,t){var n=new Na(t,"max",!1);return this.compileAndRun(n,[e])},t.prototype.avgPool=function(e,t){var n=new Na(t,"avg",!1);return this.compileAndRun(n,[e],"float32")},t.prototype.maxPoolBackprop=function(e,t,n,r){var o=new Na(r,"max",!0),i=this.compileAndRun(o,[t]),a=new _a(r),s=this.compileAndRun(a,[e,i],t.dtype);return i.dispose(),s},t.prototype.avgPoolBackprop=function(e,t,n){var r=new pi(n);return this.compileAndRun(r,[e],t.dtype)},t.prototype.cast=function(e,t){return Ro(e,t,this)},t.prototype.unstack=function(e,t){for(var n=e.shape[t],r=new Array(e.rank-1),o=0,i=0;i<e.rank;i++)i!==t&&(r[o++]=e.shape[i]);var a=new Array(e.rank).fill(0),s=e.shape.slice();s[t]=1;var u=new Array(n);for(i=0;i<u.length;i++)a[t]=i,u[i]=this.slice(e,a,s).reshape(r);return u},t.prototype.avgPool3d=function(e,t){var n=new Ba(t,"avg",!1);return this.compileAndRun(n,[e],"float32")},t.prototype.avgPool3dBackprop=function(e,t,n){var r=new fi(n);return this.compileAndRun(r,[e],t.dtype)},t.prototype.maxPool3d=function(e,t){var n=new Ba(t,"max",!1);return this.compileAndRun(n,[e],"float32")},t.prototype.maxPool3dBackprop=function(e,t,n,r){var o=new Ba(r,"max",!0),i=this.compileAndRun(o,[t]),a=new Ea(r),s=this.compileAndRun(a,[e,i],t.dtype);return i.dispose(),s},t.prototype.reshape=function(e,t){var n=this.texData.get(e.dataId);if(n.isPacked&&!on(e.shape,t)&&(null===n.texture||!on(n.shape,t))){var r=this.packedReshape(e,t);return dt.makeTensorFromDataId(r.dataId,r.shape,r.dtype)}return So(e,t)},t.prototype.resizeBilinear=function(e,t,n,r){var o=U().getBool("WEBGL_PACK_IMAGE_OPERATIONS")?new za(e.shape,t,n,r):new La(e.shape,t,n,r);return this.compileAndRun(o,[e],"float32")},t.prototype.resizeBilinearBackprop=function(e,t,n){var r=new Pa(e,t,n);return this.compileAndRun(r,[e])},t.prototype.resizeNearestNeighbor=function(e,t,n,r){var o=new Ua(e.shape,t,n,r);return this.compileAndRun(o,[e])},t.prototype.resizeNearestNeighborBackprop=function(e,t,n){var r=new Wa(e,t,n);return this.compileAndRun(r,[e])},t.prototype.multinomial=function(e,t,n,r){var o=t?e:so(e),i=o.shape[0],a=o.shape[1],s=new Ra(i,a,n),u=s.getCustomSetupFunc(r);return this.compileAndRun(s,[o],"int32",u)},t.prototype.oneHot=function(e,t,n,r){var o=new Sa(e.size,t,n,r);return this.compileAndRun(o,[e])},t.prototype.diag=function(e){var t=new qi(e.size);return this.compileAndRun(t,[e])},t.prototype.nonMaxSuppression=function(e,t,n,r,o){return yn("tf.nonMaxSuppression() in webgl locks the UI thread. Call tf.nonMaxSuppressionAsync() instead"),Po(e.dataSync(),t.dataSync(),n,r,o)},t.prototype.cropAndResize=function(e,t,n,r,o,i){var a=new Wi(e.shape,t.shape,r,o,i);return this.compileAndRun(a,[e,t,n],"float32")},t.prototype.depthToSpace=function(e,t,n){ee(t>1,(function(){return"blockSize should be > 1 for depthToSpace, but was: "+t}));var r=e.shape[0],o="NHWC"===n?e.shape[1]:e.shape[2],i="NHWC"===n?e.shape[2]:e.shape[3],a="NHWC"===n?e.shape[3]:e.shape[1],s=o*t,u=i*t,c=a/(t*t),l=new ji("NHWC"===n?[r,s,u,c]:[r,c,s,u],t,n);return this.compileAndRun(l,[e])},t.prototype.split=function(e,t,n){return Go(e,t,n)},t.prototype.scatterND=function(e,t,n){var r=Jr(0,e,n),o=r.sliceRank,i=r.numUpdates,a=r.sliceSize,s=r.strides,u=r.outputSize,c=[u/a,a],l=e.reshape([i,o]),d=t.reshape([i,a]);if(0===u)return So(zn([]),n);var h=Un(0),p=new Ha(i,o,l.rank,d.rank,s,c);return this.compileAndRun(p,[d,l,h]).reshape(n)},t.prototype.sparseToDense=function(e,t,n,r){var o=Jr(0,e,n),i=o.sliceRank,a=o.numUpdates,s=o.strides,u=o.outputSize,c=new Ha(a,i,e.rank,t.rank,s,[u,1],!1);return this.compileAndRun(c,[t,e,r]).reshape(n)},t.prototype.fft=function(e){return this.fftImpl(e,!1)},t.prototype.ifft=function(e){return this.fftImpl(e,!0)},t.prototype.fftImpl=function(e,t){var n=this.texData.get(e.dataId),r=new $i("return real * expR - imag * expI;",e.shape,t),o=new $i("return real * expI + imag * expR;",e.shape,t),i=[this.makeComplexComponentTensorInfo(e,n.complexTensors.real),this.makeComplexComponentTensorInfo(e,n.complexTensors.imag)],a=this.compileAndRun(r,i),s=this.compileAndRun(o,i),u=this.complex(a,s).as2D(e.shape[0],e.shape[1]);return a.dispose(),s.dispose(),u},t.prototype.gatherND=function(e,t){var n=t.shape,r=n[n.length-1],o=Xr(e,t),i=o[0],a=o[1],s=o[2],u=o[3],c=t.reshape([a,r]),l=e.reshape([e.size/s,s]),d=new ea(r,u,[a,s]);return this.compileAndRun(d,[l,c]).reshape(i)},t.prototype.fill=function(e,t,n){if("string"===(n=n||_e(t))){var r=me(n,oe(e));return r.fill(t),dt.makeTensor(r,e,n,this)}var o=new Ji(e,t),i=o.getCustomSetupFunc(t);return this.compileAndRun(o,[],n,i)},t.prototype.onesLike=function(e){if("string"===e.dtype)throw new Error("onesLike is not supported under string dtype");return this.fill(e.shape,1,e.dtype)},t.prototype.zerosLike=function(e){return this.fill(e.shape,"string"===e.dtype?"":0,e.dtype)},t.prototype.linspace=function(e,t,n){return To(e,t,n)},t.prototype.makeTensorInfo=function(e,t){var n=this.write(null,e,t);return this.texData.get(n).usage=null,{dataId:n,shape:e,dtype:t}},t.prototype.makeOutput=function(e,t){var n=this.makeTensorInfo(e,t).dataId;return dt.makeTensorFromDataId(n,e,t,this)},t.prototype.unpackTensor=function(e){var t=new xs(e.shape);return this.runWebGLProgram(t,[e],e.dtype)},t.prototype.packTensor=function(e){var t=new Ta(e.shape);return this.runWebGLProgram(t,[e],e.dtype,null,!0)},t.prototype.packedReshape=function(e,t){var n=[Zt(e.shape)].concat(en(e.shape)),r={dtype:e.dtype,shape:n,dataId:e.dataId},o=[Zt(t)].concat(en(t)),i=new Ma(o,n),a=this.runWebGLProgram(i,[r],e.dtype,null,!0);return{dataId:a.dataId,shape:t,dtype:a.dtype}},t.prototype.decode=function(e){var t,n=this.texData.get(e),r=n.isPacked,o=n.shape,i=n.dtype,a=tn(o);return t=r?new Hi(a):new Gi(a),{dtype:i,shape:o,dataId:this.runWebGLProgram(t,[{shape:a,dtype:i,dataId:e}],i,null,!0).dataId}},t.prototype.runWebGLProgram=function(e,t,n,r,o){var i=this;void 0===o&&(o=!1);var a=this.makeTensorInfo(e.outputShape,n),s=this.texData.get(a.dataId);if(e.packedOutput&&(s.isPacked=!0),e.outPackingScheme===ft.DENSE){var u=Ct(e.outputShape);s.texShape=u.map((function(e){return 2*e}))}if(null!=e.outTexUsage&&(s.usage=e.outTexUsage),0===oe(a.shape))return s.values=fe(a.dtype,0),a;var c=[],l=t.map((function(t){if("complex64"===t.dtype)throw new Error("GPGPUProgram does not support complex64 input. For complex64 dtypes, please separate the program into real and imaginary parts.");var n=i.texData.get(t.dataId);if(null==n.texture){if(!e.packedInputs&&oe(t.shape)<=U().getNumber("WEBGL_SIZE_UPLOAD_UNIFORM"))return{shape:t.shape,texData:null,isUniform:!0,uniformValues:n.values};e.packedInputs&&(n.isPacked=!0,n.shape=t.shape)}else if(!!n.isPacked!=!!e.packedInputs)t=n.isPacked?i.unpackTensor(t):i.packTensor(t),c.push(t),n=i.texData.get(t.dataId);else if(n.isPacked&&!on(n.shape,t.shape)){var r=t,o=t.shape;t.shape=n.shape,t=i.packedReshape(t,o),c.push(t),n=i.texData.get(t.dataId),r.shape=o}return i.uploadToGPU(t.dataId),{shape:t.shape,texData:n,isUniform:!1}}));this.uploadToGPU(a.dataId);var d,h={shape:a.shape,texData:s,isUniform:!1},p=function(e,t,n){var r="";t.concat(n).forEach((function(e){var t=null!=e.texData&&null!=e.texData.slice&&e.texData.slice.flatOffset>0,n=e.isUniform?"uniform":e.texData.texShape;r+=e.shape+"_"+n+"_"+t}));var o=e.userCode;return e.constructor.name+"_"+r+"_"+o}(e,l,h),f=this.getAndSaveBinary(p,(function(){return function(e,t,n,r){var o=t.userCode,i=n.map((function(e,n){var r={logicalShape:e.shape,texShape:e.isUniform?null:e.texData.texShape,isUniform:e.isUniform,isPacked:!e.isUniform&&e.texData.isPacked,flatOffset:null};return null!=e.texData&&null!=e.texData.slice&&e.texData.slice.flatOffset>0&&(r.flatOffset=e.texData.slice.flatOffset),{name:t.variableNames[n],shapeInfo:r}})),a=i.map((function(e){return e.shapeInfo})),s={logicalShape:r.shape,texShape:r.texData.texShape,isUniform:!1,isPacked:r.texData.isPacked,flatOffset:null},u=ni(i,s,o,t.packedInputs),c=e.createProgram(u),l=null,d=e.getUniformLocation(c,"NAN",!1);1===U().getNumber("WEBGL_VERSION")&&(l=e.getUniformLocation(c,"INFINITY",!1));for(var h={},p=0;p<t.variableNames.length;p++){var f=t.variableNames[p];h[f]=e.getUniformLocation(c,f,!1),h["offset"+f]=e.getUniformLocation(c,"offset"+f,!1)}return{program:t,source:u,webGLProgram:c,uniformLocations:h,inShapeInfos:a,outShapeInfo:s,infLoc:l,nanLoc:d}}(i.gpgpu,e,l,h)})),m=null!=this.activeTimers;if(m&&(d=this.startTimer()),function(e,t,n,r,o){ya(t.inShapeInfos,n),ya([t.outShapeInfo],[r]);var i=r.texData.texture,a=r.texData.texShape;r.texData.isPacked?e.setOutputPackedMatrixTexture(i,a[0],a[1]):e.setOutputMatrixTexture(i,a[0],a[1]),e.setProgram(t.webGLProgram),1===U().getNumber("WEBGL_VERSION")&&null!==t.infLoc&&e.gl.uniform1f(t.infLoc,1/0),null!==t.nanLoc&&e.gl.uniform1f(t.nanLoc,NaN),n.forEach((function(n,r){var o=t.program.variableNames[r],i=t.uniformLocations[o],a=t.uniformLocations["offset"+o];if(null!=i)if(n.isUniform)if(oe(n.shape)<2)e.gl.uniform1f(i,n.uniformValues[0]);else{var s=n.uniformValues;s instanceof Float32Array||(s=new Float32Array(s)),e.gl.uniform1fv(i,s)}else null!=n.texData.slice&&null!=a&&e.gl.uniform1i(a,n.texData.slice.flatOffset),e.setInputMatrixTexture(n.texData.texture,i,r)})),null!=o&&o(e,t.webGLProgram),e.executeProgram()}(this.gpgpu,f,l,h,r),c.forEach((function(e){return i.disposeData(e.dataId)})),m&&(d=this.endTimer(d),this.activeTimers.push({name:e.constructor.name,query:this.getQueryTime(d)})),!U().getBool("WEBGL_LAZILY_UNPACK")&&s.isPacked&&!1===o){var v=this.unpackTensor(a);return this.disposeData(a.dataId),v}return a},t.prototype.compileAndRun=function(e,t,n,r,o){void 0===o&&(o=!1),n=n||t[0].dtype;var i=this.runWebGLProgram(e,t,n,r,o);return dt.makeTensorFromDataId(i.dataId,i.shape,i.dtype)},t.prototype.getAndSaveBinary=function(e,t){return e in this.binaryCache||(this.binaryCache[e]=t()),this.binaryCache[e]},t.prototype.getTextureManager=function(){return this.textureManager},t.prototype.dispose=function(){var e=this;this.disposed||(U().getBool("IS_TEST")||Object.keys(this.binaryCache).forEach((function(t){e.gpgpu.deleteProgram(e.binaryCache[t].webGLProgram),delete e.binaryCache[t]})),this.textureManager.dispose(),null!=this.canvas&&"undefined"!=typeof HTMLCanvasElement&&this.canvas instanceof HTMLCanvasElement?this.canvas.remove():this.canvas=null,this.gpgpuCreatedLocally&&(this.gpgpu.program=null,this.gpgpu.dispose()),this.disposed=!0)},t.prototype.floatPrecision=function(){var e=this;return null==this.floatPrecisionValue&&(this.floatPrecisionValue=bn((function(){if(!U().get("WEBGL_RENDER_FLOAT32_ENABLED")){var t=U().getBool("DEBUG");U().set("DEBUG",!1);var n=e.abs(Un(1e-8)).dataSync()[0];if(U().set("DEBUG",t),n>0)return 32}return 16}))),this.floatPrecisionValue},t.prototype.epsilon=function(){return 32===this.floatPrecision()?1e-7:1e-4},t.prototype.uploadToGPU=function(e){var t,n=this.texData.get(e),r=n.shape,o=n.dtype,i=n.values,a=n.texture,s=n.usage,u=n.isPacked;if(null==a){var c,l=null!=this.activeTimers;l&&(c=Ne());var d=n.texShape;if(null==d&&(d=nn(r,u),n.texShape=d),null!=i){var h=tn(r),p=void 0,f=d[1],m=d[0],v=i instanceof Uint8Array;u?(f=(t=wt(d[0],d[1]))[0],m=t[1],p=new Yi(h,[m,f],v)):p=new Qi(h,[m,f],v);var g=this.makeTensorInfo([m,f],o);this.texData.get(g.dataId).usage=v?mt.PIXELS:mt.UPLOAD,this.gpgpu.uploadDenseMatrixToTexture(this.getTexture(g.dataId),f,m,i);var b=this.runWebGLProgram(p,[g],o,null,!0),A=this.texData.get(b.dataId);n.texture=A.texture,n.texShape=A.texShape,n.isPacked=A.isPacked,n.usage=A.usage,this.disposeData(g.dataId),this.texData.delete(b.dataId),n.values=null,l&&(this.uploadWaitMs+=Ne()-c)}else{var y=this.acquireTexture(d,s,o,u);n.texture=y}}},t.prototype.convertAndCacheOnCPU=function(e,t){var n=this.texData.get(e),r=n.dtype;return this.releaseGPUData(e),null!=t&&(n.values=function(e,t){if("float32"===t||"complex64"===t)return e;if("int32"===t||"bool"===t){for(var n="int32"===t?new Int32Array(e.length):new Uint8Array(e.length),r=0;r<n.length;++r)n[r]=Math.round(e[r]);return n}throw new Error("Unknown dtype "+t)}(t,r)),n.values},t.prototype.acquireTexture=function(e,t,n,r){if(this.numBytesInGPU+=this.computeBytes(e,n),!this.warnedAboutMemory&&this.numBytesInGPU>1024*this.numMBBeforeWarning*1024){var o=(this.numBytesInGPU/1024/1024).toFixed(2);this.warnedAboutMemory=!0,console.warn("High memory usage in GPU: "+o+" MB, most likely due to a memory leak")}return this.textureManager.acquireTexture(e,t,r)},t.prototype.computeBytes=function(e,t){return e[0]*e[1]*ye(t)},t}(lo);ht()&&dt.registerBackend("webgl",(function(){return new ks}),2);var _s=On({square_:function(e){var t=wn(e,"x","square"),n=[t];return dt.runKernelFunc((function(e,n){return n([t]),e.square(t)}),{x:t},null,"Square",{},n,[])}}),Es="SquaredDifference",Is=On({squaredDifference_:function(e,t){var n,r=wn(e,"a","squaredDifference"),o=wn(t,"b","squaredDifference");n=it(r,o),r=n[0],o=n[1],mo(r.shape,o.shape);var i={a:r,b:o},a=[r,o];return dt.runKernelFunc((function(e,t){var n=e.squaredDifference(r,o);return t([r,o]),n}),i,(function(e,t){var n=t[0],r=t[1],o=Un(2);return{a:function(){return e.mul(n.sub(r).mul(o))},b:function(){return e.mul(r.sub(n).mul(o))}}}),Es,{},a,[])}}),Rs=On({abs_:function(e){var t=wn(e,"x","abs");return"complex64"===t.dtype?dt.runKernelFunc((function(e){return e.complexAbs(t)}),{$x:t}):dt.runKernelFunc((function(e,n){var r=e.abs(t);return n([t]),r}),{x:t},(function(e,t){var n=t[0];return{x:function(){return e.mul(n.toFloat().step(-1))}}}),"Abs")}}),Ss=On({acos_:function(e){var t=wn(e,"x","acos");return dt.runKernelFunc((function(e,n){var r=e.acos(t);return n([t]),r}),{$x:t},(function(e,t){var n=t[0];return{$x:function(){return e.divStrict(Un(1).sub(n.toFloat().square()).sqrt()).neg()}}}))}}),Ts=On({acosh_:function(e){var t=wn(e,"x","acosh");return dt.runKernelFunc((function(e,n){var r=e.acosh(t);return n([t]),r}),{$x:t},(function(e,t){var n=t[0];return{$x:function(){return e.divStrict(n.toFloat().square().sub(1).sqrt())}}}))}}),Ds=On({asin_:function(e){var t=wn(e,"x","asin");return dt.runKernelFunc((function(e,n){var r=e.asin(t);return n([t]),r}),{$x:t},(function(e,t){var n=t[0];return{$x:function(){return e.divStrict(Un(1).sub(n.toFloat().square()).sqrt())}}}))}}),Fs=On({asinh_:function(e){var t=wn(e,"x","asinh");return dt.runKernelFunc((function(e,n){var r=e.asinh(t);return n([t]),r}),{$x:t},(function(e,t){var n=t[0];return{$x:function(){return e.divStrict(Un(1).add(n.toFloat().square()).sqrt())}}}))}}),Ns=On({atan_:function(e){var t=wn(e,"x","atan");return dt.runKernelFunc((function(e,n){var r=e.atan(t);return n([t]),r}),{$x:t},(function(e,t){var n=t[0];return{$x:function(){return e.div(n.toFloat().square().add(1))}}}))}}),Bs=On({atanh_:function(e){var t=wn(e,"x","atanh");return dt.runKernelFunc((function(e,n){var r=e.atanh(t);return n([t]),r}),{$x:t},(function(e,t){var n=t[0];return{$x:function(){return e.div(Un(1).sub(n.toFloat().square()))}}}))}}),Os=On({ceil_:function(e){var t=wn(e,"x","ceil");return dt.runKernelFunc((function(e){return e.ceil(t)}),{$x:t},(function(e){return{$x:function(){return $n(e)}}}))}}),Ms=On({clipByValue_:function(e,t,n){var r=wn(e,"x","clipByValue");ee(t<=n,(function(){return"Error in clip: min ("+t+") must be less than or equal to max ("+n+")."}));var o=[r],i={min:t,max:n};return dt.runKernelFunc((function(e,o){var i=e.clip(r,t,n);return o([r]),i}),{x:r},(function(e,r){var o=r[0];return{x:function(){return e.where(o.greaterEqual(t).logicalAnd(o.lessEqual(n)),$n(e))}}}),"ClipByValue",i,o)}}),Ps=On({cos_:function(e){var t=wn(e,"x","cos"),n=[t];return dt.runKernelFunc((function(e,n){var r=e.cos(t);return n([t]),r}),{x:t},(function(e,t){var n=t[0];return{x:function(){return n.toFloat().sin().neg().mul(e)}}}),"Cos",{},n)}}),Ls=On({cosh_:function(e){var t=wn(e,"x","cosh");return dt.runKernelFunc((function(e,n){var r=e.cosh(t);return n([t]),r}),{$x:t},(function(e,t){var n=t[0];return{$x:function(){return n.toFloat().sinh().mulStrict(e)}}}))}}),zs=On({erf_:function(e){var t=wn(e,"x","erf");return ee("int32"===t.dtype||"float32"===t.dtype,(function(){return"Input dtype must be `int32` or `float32`."})),"int32"===t.dtype&&(t=t.toFloat()),dt.runKernelFunc((function(e,n){var r=e.erf(t);return n([t]),r}),{$x:t},(function(e,t){var n=t[0];return{$x:function(){return e.mul(n.square().neg().exp().mul(2/Math.sqrt(Math.PI)))}}}))}}),Ws=On({exp_:function(e){var t=wn(e,"x","exp");return dt.runKernelFunc((function(e,n){var r=e.exp(t);return n([r]),r}),{x:t},(function(e,t){return{x:function(){return e.mulStrict(t[0])}}}),"Exp",{},[],[!0])}}),Us=On({expm1_:function(e){var t=wn(e,"x","expm1");return dt.runKernelFunc((function(e,n){var r=e.expm1(t);return n([t]),r}),{$x:t},(function(e,t){var n=t[0];return{$x:function(){return e.mul(n.exp())}}}))}}),Vs=On({floor_:function(e){var t=wn(e,"x","floor");return dt.runKernelFunc((function(e){return e.floor(t)}),{$x:t},(function(e){return{$x:function(){return $n(e)}}}))}}),Gs=On({log_:function(e){var t=wn(e,"x","log"),n=[t];return dt.runKernelFunc((function(e,n){var r=e.log(t);return n([t]),r}),{x:t},(function(e,t){var n=t[0];return{x:function(){return e.div(n.toFloat())}}}),"Log",{},n)}}),Hs=On({log1p_:function(e){var t=wn(e,"x","log1p");return dt.runKernelFunc((function(e,n){var r=e.log1p(t);return n([t]),r}),{$x:t},(function(e,t){var n=t[0];return{$x:function(){return e.div(n.add(1))}}}))}}),js=On({logSigmoid_:function(e){var t=wn(e,"x","logSigmoid");return dt.runKernelFunc((function(e,n){var r=e.softplus(t.neg()).neg();return n([t]),r}),{$x:t},(function(e,t){var n=t[0];return{$x:function(){return e.mul(n.neg().sigmoid())}}}))}}),qs=On({neg_:function(e){var t=wn(e,"x","neg"),n=[t];return dt.runKernelFunc((function(e){return e.neg(t)}),{x:t},(function(e){return{x:function(){return e.neg()}}}),"Neg",{},n)}}),Ks=On({reciprocal_:function(e){var t=wn(e,"x","reciprocal");return dt.runKernelFunc((function(e,n){var r=e.reciprocal(t);return n([t]),r}),{$x:t},(function(e,t){var n=t[0];return{$x:function(){return e.div(n.square().neg())}}}))}}),Xs=On({round_:function(e){var t=wn(e,"x","round");return dt.runKernelFunc((function(e){return e.round(t)}),{$x:t},(function(e){return{$x:function(){return $n(e)}}}))}}),Qs=On({rsqrt_:function(e){var t=wn(e,"x","rsqrt"),n=[t];return dt.runKernelFunc((function(e,n){var r=e.rsqrt(t);return n([t]),r}),{x:t},(function(e,t){var n=t[0];return{x:function(){return e.div(n.pow(1.5).mul(2)).neg()}}}),"Rsqrt",{},n)}}),Ys=On({sigmoid_:function(e){var t=wn(e,"x","sigmoid");return dt.runKernelFunc((function(e,n){var r=e.sigmoid(t);return n([r]),r}),{x:t},(function(e,t){var n=t[0];return{x:function(){return e.mul(n.mul(Un(1).sub(n)))}}}),"Sigmoid")}}),$s=On({sign_:function(e){var t=wn(e,"x","sign");return dt.runKernelFunc((function(e){return e.sign(t)}),{$x:t},(function(e){return{$x:function(){return $n(e)}}}))}}),Js=On({isNaN_:function(e){var t=wn(e,"x","isNaN");return dt.runKernelFunc((function(e){return e.isNaN(t)}),{$x:t},(function(e){return{$x:function(){return $n(e)}}}))}}),Zs=On({isInf_:function(e){var t=wn(e,"x","isInf");return dt.runKernelFunc((function(e){return e.isInf(t)}),{$x:t},(function(e){return{$x:function(){return $n(e)}}}))}}),eu=On({isFinite_:function(e){var t=wn(e,"x","isFinite");return dt.runKernelFunc((function(e){return e.isFinite(t)}),{$x:t},(function(e){return{$x:function(){return $n(e)}}}))}}),tu=On({sin_:function(e){var t=wn(e,"x","sin"),n=[t];return dt.runKernelFunc((function(e,n){var r=e.sin(t);return n([t]),r}),{x:t},(function(e,t){var n=t[0];return{x:function(){return n.toFloat().cos().mul(e)}}}),"Sin",{},n)}}),nu=On({sinh_:function(e){var t=wn(e,"x","sinh");return dt.runKernelFunc((function(e,n){var r=e.sinh(t);return n([t]),r}),{$x:t},(function(e,t){var n=t[0];return{$x:function(){return n.toFloat().cosh().mulStrict(e)}}}))}}),ru=On({softplus_:function(e){var t=wn(e,"x","softplus");return dt.runKernelFunc((function(e,n){var r=e.softplus(t);return n([t]),r}),{$x:t},(function(e,t){var n=t[0];return{$x:function(){return e.mul(n.sigmoid())}}}))}}),ou=On({sqrt_:function(e){var t=wn(e,"x","sqrt");return dt.runKernelFunc((function(e,n){var r=e.sqrt(t);return n([t]),r}),{$x:t},(function(e,t){var n=t[0];return{$x:function(){return e.div(n.toFloat().sqrt().mul(2))}}}))}}),iu=On({step_:function(e,t){void 0===t&&(t=0);var n=wn(e,"x","step");return dt.runKernelFunc((function(e){return e.step(n,t)}),{$x:n},(function(e){return{$x:function(){return $n(e)}}}))}}),au=On({tan_:function(e){var t=wn(e,"x","tan");return dt.runKernelFunc((function(e,n){var r=e.tan(t);return n([t]),r}),{$x:t},(function(e,t){var n=t[0];return{$x:function(){return e.div(n.cos().square())}}}))}}),su=On({tanh_:function(e){var t=wn(e,"x","tanh");return dt.runKernelFunc((function(e,n){var r=e.tanh(t);return n([r]),r}),{x:t},(function(e,t){var n=t[0];return{x:function(){return Un(1).sub(n.square()).mulStrict(e)}}}),"Tanh",{},null,[!0])}});function uu(e,t,n,r,o,i){var a,s,u=wn(e,"x","batchNorm"),c=wn(t,"mean","batchNorm"),l=wn(n,"variance","batchNorm");return null!=o&&(a=wn(o,"scale","batchNorm")),null!=r&&(s=wn(r,"offset","batchNorm")),ee(2===u.rank,(function(){return"Error in batchNorm3D: x must be rank 3 but got rank "+u.rank+"."})),ee(2===c.rank||1===c.rank,(function(){return"Error in batchNorm2D: mean must be rank 2 or rank 1 but got rank "+c.rank+"."})),ee(2===l.rank||1===l.rank,(function(){return"Error in batchNorm2D: variance must be rank 2 or rank 1 but got rank "+l.rank+"."})),null!=a&&ee(2===a.rank||1===a.rank,(function(){return"Error in batchNorm2D: scale must be rank 2 or rank 1 but got rank "+a.rank+"."})),null!=s&&ee(2===s.rank||1===s.rank,(function(){return"Error in batchNorm2D: offset must be rank 2 or rank 1 but got rank "+s.rank+"."})),du(u,c,l,s,a,i)}function cu(e,t,n,r,o,i){var a,s,u=wn(e,"x","batchNorm"),c=wn(t,"mean","batchNorm"),l=wn(n,"variance","batchNorm");return null!=o&&(a=wn(o,"scale","batchNorm")),null!=r&&(s=wn(r,"offset","batchNorm")),ee(3===u.rank,(function(){return"Error in batchNorm3D: x must be rank 3 but got rank "+u.rank+"."})),ee(3===c.rank||1===c.rank,(function(){return"Error in batchNorm3D: mean must be rank 3 or rank 1 but got rank "+c.rank+"."})),ee(3===l.rank||1===l.rank,(function(){return"Error in batchNorm3D: variance must be rank 3 or rank 1 but got rank "+l.rank+"."})),null!=a&&ee(3===a.rank||1===a.rank,(function(){return"Error in batchNorm3D: scale must be rank 3 or rank 1 but got rank "+a.rank+"."})),null!=s&&ee(3===s.rank||1===s.rank,(function(){return"Error in batchNorm3D: offset must be rank 3 or rank 1 but got rank "+s.rank+"."})),du(u,c,l,s,a,i)}function lu(e,t,n,r,o,i){var a,s,u=wn(e,"x","batchNorm"),c=wn(t,"mean","batchNorm"),l=wn(n,"variance","batchNorm");return null!=o&&(a=wn(o,"scale","batchNorm")),null!=r&&(s=wn(r,"offset","batchNorm")),ee(4===u.rank,(function(){return"Error in batchNorm4D: x must be rank 4 but got rank "+u.rank+"."})),ee(4===c.rank||1===c.rank,(function(){return"Error in batchNorm4D: mean must be rank 4 or rank 1 but got rank "+c.rank+"."})),ee(4===l.rank||1===l.rank,(function(){return"Error in batchNorm4D: variance must be rank 4 or rank 1 but got rank "+l.rank+"."})),null!=a&&ee(4===a.rank||1===a.rank,(function(){return"Error in batchNorm4D: scale must be rank 4 or rank 1 but got rank "+a.rank+"."})),null!=s&&ee(4===s.rank||1===s.rank,(function(){return"Error in batchNorm4D: offset must be rank 4 or rank 1 but got rank "+s.rank+"."})),du(u,c,l,s,a,i)}function du(e,t,n,r,o,i){null==i&&(i=.001);var a,s,u,c=wn(e,"x","batchNorm"),l=wn(t,"mean","batchNorm"),d=wn(n,"variance","batchNorm");null!=o&&(a=wn(o,"scale","batchNorm")),null!=r&&(s=wn(r,"offset","batchNorm")),ee(l.rank===d.rank,(function(){return"Batch normalization gradient requires mean and variance to have equal ranks."})),ee(null==s||l.rank===s.rank,(function(){return"Batch normalization gradient requires mean and offset to have equal ranks."})),ee(null==a||l.rank===a.rank,(function(){return"Batch normalization gradient requires mean and scale to have equal ranks."})),u=0===c.rank||1===c.rank?c.as4D(1,1,1,c.size):2===c.rank?c.as4D(1,1,c.shape[0],c.shape[1]):3===c.rank?c.as4D(1,c.shape[0],c.shape[1],c.shape[2]):c;var h=[c,l,d,a];return dt.runKernelFunc((function(e,t){var n=e.batchNormalization(u,hu(l),hu(d),i,hu(a),hu(s));return t([c,l,d,a]),n}),{x:c,mean:l,variance:d,scale:a,offset:s},(function(e,t){var n=t,r=n[0],o=n[1],a=n[2],s=n[3],c=null==s?Un(1):s,l=fo(o.shape,u.shape),d=[];if(1===o.rank){for(var h=0;h<u.shape.length-1;++h)d.push(u.shape[h]);d.push(1)}var p=r.sub(o),f=e.mul(c),m=Qs(a.add(Un(i))),v=m.mul(m).mul(m).mul(Un(-.5));return{x:function(){return 1===o.rank?e.mul(Wr(m.as4D(1,1,1,o.shape[0]),d)).mul(c).reshape(r.shape):e.mul(m).mul(c).reshape(r.shape)},mean:function(){var e=m.mul(Un(-1)).mul(f);return 1===o.rank&&(e=e.sum(l)),e.reshape(o.shape)},variance:function(){var e=v.mul(p).mul(f);return 1===o.rank&&(e=e.sum(l)),e.reshape(o.shape)},scale:function(){var t=p.mul(m),n=e.mul(t);return 1===o.rank&&(n=n.sum(l)),n.reshape(o.shape)},offset:function(){var t=e;return 1===o.rank&&(t=t.sum(l)),t.reshape(o.shape)}}}),"BatchNormalization",{varianceEpsilon:i},h).reshape(c.shape)}function hu(e){return null==e?null:0===e.rank?e.as1D():1===e.rank?e:2===e.rank?e.as4D(1,1,e.shape[0],e.shape[1]):3===e.rank?e.as4D(1,e.shape[0],e.shape[1],e.shape[2]):e}function pu(){gn("tf.batchNormalization() is going away. Use tf.batchNorm() instead, and note the positional argument change of scale, offset, and varianceEpsilon")}var fu=On({batchNormalization2d_:function(e,t,n,r,o,i){return void 0===r&&(r=.001),pu(),uu(e,t,n,i,o,r)}}),mu=On({batchNormalization3d_:function(e,t,n,r,o,i){return void 0===r&&(r=.001),pu(),cu(e,t,n,i,o,r)}}),vu=On({batchNormalization4d_:function(e,t,n,r,o,i){return void 0===r&&(r=.001),pu(),lu(e,t,n,i,o,r)}}),gu=On({batchNormalization_:function(e,t,n,r,o,i){return void 0===r&&(r=.001),pu(),du(e,t,n,i,o,r)}}),bu=On({batchNorm_:du}),Au=On({batchNorm2d_:uu}),yu=On({batchNorm3d_:cu}),xu=On({batchNorm4d_:lu}),Cu=On({logicalAnd_:function(e,t){var n=wn(e,"a","logicalAnd","bool"),r=wn(t,"b","logicalAnd","bool");return mo(n.shape,r.shape),dt.runKernelFunc((function(e){return e.logicalAnd(n,r)}),{a:n,b:r},null,"LogicalAnd")}}),wu=On({logicalNot_:function(e){var t=wn(e,"x","logicalNot","bool");return dt.runKernelFunc((function(e){return e.logicalNot(t)}),{$x:t})}}),ku=On({logicalOr_:function(e,t){var n=wn(e,"a","logicalOr","bool"),r=wn(t,"b","logicalOr","bool");return mo(n.shape,r.shape),dt.runKernelFunc((function(e){return e.logicalOr(n,r)}),{$a:n,$b:r})}}),_u=On({logicalXor_:function(e,t){var n=wn(e,"a","logicalXor","bool"),r=wn(t,"b","logicalXor","bool");return mo(n.shape,r.shape),ku(e,t).logicalAnd(Cu(e,t).logicalNot())}}),Eu=On({where_:function(e,t,n){var r=wn(t,"a","where"),o=wn(n,"b","where"),i=wn(e,"condition","where","bool");return te(r.shape,o.shape,"Error in where: "),1===i.rank?ee(i.shape[0]===r.shape[0],(function(){return"The first dimension of `a` must match the size of `condition`."})):te(i.shape,o.shape,"Error in where: "),dt.runKernelFunc((function(e,t){var n=e.select(i,r,o);return t([i]),n}),{$condition:i,$a:r,$b:o},(function(e,t){var n=t[0];return{$condition:function(){return $n(n).toFloat()},$a:function(){return e.mul(n.cast(e.dtype))},$b:function(){return e.mul(n.logicalNot().cast(e.dtype))}}}))}}),Iu=function(e){return P(this,void 0,void 0,(function(){var t,n,r;return L(this,(function(o){switch(o.label){case 0:return[4,(t=wn(e,"condition","whereAsync","bool")).data()];case 1:return n=o.sent(),r=qo(t.shape,n),e!==t&&t.dispose(),[2,r]}}))}))},Ru=On({add_:function(e,t){var n,r=wn(e,"a","add"),o=wn(t,"b","add");n=it(r,o),r=n[0],o=n[1];var i=mo(r.shape,o.shape);return dt.runKernelFunc((function(e){return e.add(r,o)}),{a:r,b:o},(function(e){return{a:function(){var t=e,n=fo(r.shape,i);return n.length>0&&(t=t.sum(n)),t.reshape(r.shape)},b:function(){var t=e,n=fo(o.shape,i);return n.length>0&&(t=t.sum(n)),t.reshape(o.shape)}}}),"Add")}}),Su=On({addN_:function(e){ee(Array.isArray(e),(function(){return"The argument passed to tf.addN() must be a list of tensors"})),ee(e.length>=1,(function(){return"Must pass at least one tensor to tf.addN(), but got "+e.length}));var t=e.map((function(e,t){return wn(e,"tensors"+t,"addN")})),n=t[0];t.forEach((function(e){if(e.dtype!==n.dtype)throw new Error("All tensors passed to tf.addN() must have the same dtype")})),t.forEach((function(e){if(!ie(e.shape,n.shape))throw new Error("All tensors passed to tf.addN() must have the same shape")}));var r=t;return dt.runKernelFunc((function(e){return e.addN(t)}),r,(function(e){var n={};return t.forEach((function(t,r){n[r]=function(){return e.clone()}})),n}),"AddN")}}),Tu=On({addStrict_:function(e,t){var n=wn(e,"a","addStrict"),r=wn(t,"b","addStrict");return te(n.shape,r.shape,"Error in addStrict: "),n.add(r)}}),Du=On({atan2_:function(e,t){var n,r=wn(e,"a","atan2"),o=wn(t,"b","atan2");n=it(r,o),r=n[0],o=n[1];var i=mo(r.shape,o.shape);return dt.runKernelFunc((function(e,t){var n=e.atan2(r,o);return t([r,o]),n}),{$a:r,$b:o},(function(e,t){var n=t[0],r=t[1];return{$a:function(){var t=Ru(n.square(),r.square()),o=e.mul(r.div(t)),a=fo(n.shape,i);return a.length>0&&(o=o.sum(a)),o.reshape(n.shape)},$b:function(){var t=Ru(n.square(),r.square()),o=qs(e.mul(n.div(t))),a=fo(r.shape,i);return a.length>0&&(o=o.sum(a)),o.reshape(r.shape)}}}))}}),Fu=On({div_:function(e,t){var n,r=wn(e,"a","div"),o=wn(t,"b","div");if(n=it(r,o),r=n[0],o=n[1],"int32"===r.dtype&&"int32"===o.dtype)return Ou(r,o);var i=mo(r.shape,o.shape);return dt.runKernelFunc((function(e,t){var n=e.realDivide(r,o);return t([r,o]),n}),{a:r,b:o},(function(e,t){var n=t[0],r=t[1];return{a:function(){var t=e.div(r.toFloat()),o=fo(n.shape,i);return o.length>0?t.sum(o).reshape(n.shape):t},b:function(){var t=e.mul(n.toFloat()),o=fo(r.shape,i);o.length>0&&(t=t.sum(o).reshape(r.shape));var a=r.square();return t.div(a.toFloat()).neg()}}}),"Div")}}),Nu=On({divNoNan_:function(e,t){var n,r=wn(e,"a","div"),o=wn(t,"b","div");r=(n=it(r,o))[0],o=n[1];var i=Fu(r,o),a=$n(i),s=o.equal(a);return Eu(s,a,i)}}),Bu=On({divStrict_:function(e,t){var n=wn(e,"a","div"),r=wn(t,"b","div");return te(n.shape,r.shape,"Error in divideStrict: "),n.div(r)}}),Ou=On({floorDiv_:function(e,t){var n,r=wn(e,"a","floorDiv"),o=wn(t,"b","floorDiv");n=it(r,o),r=n[0],o=n[1];var i=mo(r.shape,o.shape);return dt.runKernelFunc((function(e,t){var n=e.floorDiv(r,o);return t([r,o]),n}),{a:r,b:o},(function(e,t){var n=t[0],r=t[1];return{a:function(){var t=e.div(r.toFloat()),o=fo(n.shape,i);return o.length>0?t.sum(o).reshape(n.shape):t},b:function(){var t=e.mul(n.toFloat()),o=fo(r.shape,i);o.length>0&&(t=t.sum(o).reshape(r.shape));var a=r.square();return t.div(a.toFloat()).neg()}}}),"FloorDiv")}}),Mu=On({maximum_:function(e,t){var n,r=wn(e,"a","maximum"),o=wn(t,"b","maximum");return n=it(r,o),r=n[0],o=n[1],"bool"===r.dtype&&(r=r.toInt(),o=o.toInt()),mo(r.shape,o.shape),dt.runKernelFunc((function(e,t){var n=e.maximum(r,o);return t([r,o]),n}),{a:r,b:o},(function(e,t){var n=t[0],r=t[1];return{a:function(){return e.mul(n.greaterEqual(r).toFloat())},b:function(){return e.mul(n.less(r).toFloat())}}}),"Maximum")}}),Pu=On({maximumStrict_:function(e,t){var n=wn(e,"a","maximumStrict"),r=wn(t,"b","maximumStrict");return te(n.shape,r.shape,"Error in maximumStrict: "),n.maximum(r)}}),Lu=On({minimum_:function(e,t){var n,r=wn(e,"a","minimum"),o=wn(t,"b","minimum");return n=it(r,o),r=n[0],o=n[1],"bool"===r.dtype&&(r=r.toInt(),o=o.toInt()),mo(r.shape,o.shape),dt.runKernelFunc((function(e,t){var n=e.minimum(r,o);return t([r,o]),n}),{a:r,b:o},(function(e,t){var n=t[0],r=t[1];return{a:function(){return e.mul(n.lessEqual(r).toFloat())},b:function(){return e.mul(n.greater(r).toFloat())}}}),"Minimum")}}),zu=On({minimumStrict_:function(e,t){var n=wn(e,"a","minimumStrict"),r=wn(t,"b","minimumStrict");return te(n.shape,r.shape,"Error in minimumStrict: "),n.minimum(r)}}),Wu=On({mod_:function(e,t){var n,r=wn(e,"a","mod"),o=wn(t,"b","mod");n=it(r,o),r=n[0],o=n[1];var i=mo(r.shape,o.shape);return dt.runKernelFunc((function(e,t){var n=e.mod(r,o);return t([r,o]),n}),{$a:r,$b:o},(function(e,t){var n=t[0],r=t[1];return{$a:function(){var t=fo(n.shape,i);return t.length>0?e.sum(t).reshape(n.shape):e},$b:function(){var t=e.mul(n.div(r).floor().neg()),o=fo(r.shape,i);return o.length>0?t.sum(o).reshape(r.shape):t}}}))}}),Uu=On({modStrict_:function(e,t){var n=wn(e,"a","modStrict"),r=wn(t,"b","modStrict");return te(n.shape,r.shape,"Error in modStrict: "),n.mod(r)}}),Vu=On({mul_:function(e,t){var n,r=wn(e,"a","mul"),o=wn(t,"b","mul");n=it(r,o),r=n[0],o=n[1];var i=mo(r.shape,o.shape);return dt.runKernelFunc((function(e,t){var n=e.multiply(r,o);return t([r,o]),n}),{a:r,b:o},(function(e,t){var n=t[0],r=t[1];return{a:function(){var t=e.mul(r.toFloat()),o=fo(n.shape,i);return o.length>0?t.sum(o).reshape(n.shape):t},b:function(){var t=e.mul(n.toFloat()),o=fo(r.shape,i);return o.length>0?t.sum(o).reshape(r.shape):t}}}),"Mul")}}),Gu=On({mulStrict_:function(e,t){var n=wn(e,"a","mul"),r=wn(t,"b","mul");return te(n.shape,r.shape,"Error in multiplyStrict: "),n.mul(r)}}),Hu=On({pow_:function(e,t){var n,r=wn(e,"base","pow"),o=wn(t,"exp","pow");n=it(r,o),r=n[0],o=n[1];var i=mo(r.shape,o.shape),a=[r,o];return dt.runKernelFunc((function(e,t){var n=e.pow(r,o);return t([r,o,n]),n}),{a:r,b:o},(function(e,t){var n=t[0],r=t[1],o=t[2];return{a:function(){var t=r.toFloat(),o=e.mul(t.mul(n.pow(t.sub(Un(1))))),a=fo(n.shape,i);return a.length>0&&(o=o.sum(a)),o.reshape(n.shape)},b:function(){var t=n.greater(0),a=n.log().where(t,$n(n)),s=e.mul(o.mul(a)),u=fo(r.shape,i);return u.length>0&&(s=s.sum(u)),s.reshape(r.shape)}}}),"Pow",{},a,[!0])}}),ju=On({powStrict_:function(e,t){return te(e.shape,t.shape,"Error in powStrict: "),e.pow(t)}}),qu=On({squaredDifferenceStrict_:function(e,t){var n=wn(e,"a","squaredDifferenceStrict"),r=wn(t,"b","squaredDifferenceStrict");return te(n.shape,r.shape,"Error in squaredDifferenceStrict: "),n.squaredDifference(r)}}),Ku=On({sub_:function(e,t){var n,r=wn(e,"a","sub"),o=wn(t,"b","sub");n=it(r,o),r=n[0],o=n[1];var i=mo(r.shape,o.shape);return dt.runKernelFunc((function(e){return e.subtract(r,o)}),{a:r,b:o},(function(e){return{a:function(){var t=e,n=fo(r.shape,i);return n.length>0&&(t=t.sum(n)),t.reshape(r.shape)},b:function(){var t=e,n=fo(o.shape,i);return n.length>0&&(t=t.sum(n)),t.neg().reshape(o.shape)}}}),"Sub")}}),Xu=On({subStrict_:function(e,t){var n=wn(e,"a","subStrict"),r=wn(t,"b","subStrict");return te(n.shape,r.shape,"Error in subStrict: "),n.sub(r)}}),Qu=On({equal_:function(e,t){var n,r=wn(e,"a","equal"),o=wn(t,"b","equal");return n=it(r,o),r=n[0],o=n[1],mo(r.shape,o.shape),dt.runKernelFunc((function(e){return e.equal(r,o)}),{$a:r,$b:o})}}),Yu=On({equalStrict_:function(e,t){var n=wn(e,"a","equalStrict"),r=wn(t,"b","equalStrict");return te(n.shape,r.shape,"Error in equalStrict: "),n.equal(r)}}),$u=On({greater_:function(e,t){var n,r=wn(e,"a","greater"),o=wn(t,"b","greater");return n=it(r,o),r=n[0],o=n[1],mo(r.shape,o.shape),dt.runKernelFunc((function(e){return e.greater(r,o)}),{a:r,b:o},null,"Greater")}}),Ju=On({greaterEqual_:function(e,t){var n,r=wn(e,"a","greaterEqual"),o=wn(t,"b","greaterEqual");return n=it(r,o),r=n[0],o=n[1],mo(r.shape,o.shape),dt.runKernelFunc((function(e,t){var n=e.greaterEqual(r,o);return t([r,o]),n}),{a:r,b:o},(function(e,t){var n=t[0],r=t[1];return{a:function(){return $n(n)},b:function(){return $n(r)}}}),"GreaterEqual")}}),Zu=On({greaterEqualStrict_:function(e,t){var n=wn(e,"a","greaterEqualStrict"),r=wn(t,"b","greaterEqualStrict");return te(n.shape,r.shape,"Error in greaterEqualStrict: "),n.greaterEqual(r)}}),ec=On({greaterStrict_:function(e,t){var n=wn(e,"a","greaterStrict"),r=wn(t,"b","greaterStrict");return te(n.shape,r.shape,"Error in greaterStrict: "),n.greater(r)}}),tc=On({less_:function(e,t){var n,r=wn(e,"a","less"),o=wn(t,"b","less");return n=it(r,o),r=n[0],o=n[1],mo(r.shape,o.shape),dt.runKernelFunc((function(e){return e.less(r,o)}),{a:r,b:o},null,"Less")}}),nc=On({lessEqual_:function(e,t){var n,r=wn(e,"a","lessEqual"),o=wn(t,"b","lessEqual");return n=it(r,o),r=n[0],o=n[1],mo(r.shape,o.shape),dt.runKernelFunc((function(e,t){var n=e.lessEqual(r,o);return t([r,o]),n}),{a:r,b:o},null,"LessEqual")}}),rc=On({lessEqualStrict_:function(e,t){var n=wn(e,"a","lessEqualStrict"),r=wn(t,"b","lessEqualStrict");return te(n.shape,r.shape,"Error in lessEqualStrict: "),n.lessEqual(r)}}),oc=On({lessStrict_:function(e,t){var n=wn(e,"a","lessStrict"),r=wn(t,"b","lessStrict");return te(n.shape,r.shape,"Error in lessStrict: "),n.less(r)}}),ic=On({notEqual_:function(e,t){var n,r=wn(e,"a","notEqual"),o=wn(t,"b","notEqual");return n=it(r,o),r=n[0],o=n[1],mo(r.shape,o.shape),dt.runKernelFunc((function(e){return e.notEqual(r,o)}),{a:r,b:o},null,"NotEqual")}}),ac=On({notEqualStrict_:function(e,t){var n=wn(e,"a","notEqualStrict"),r=wn(t,"b","notEqualStrict");return te(n.shape,r.shape,"Error in notEqualStrict: "),n.notEqual(r)}});function sc(e,t){for(var n=[],r=e;r<t;++r)n.push(r);return n}function uc(e){for(var t=[],n=0;n<e.length;++n)for(var r=0;r<e[n].length;++r)t.push(e[n][r]);return t}var cc=On({gather_:function(e,t,n){void 0===n&&(n=0);var r=wn(e,"x","gather"),o=wn(t,"indices","gather","int32");n=he(n,r.shape)[0];var i=function(e,t,n){for(var r=e.shape[n],o=[],i=1,a=1,s=0;s<n;s++)o.push(e.shape[s]),i*=e.shape[s];for(s=0;s<t.rank;s++)o.push(t.shape[s]);for(s=n+1;s<e.rank;s++)o.push(e.shape[s]),a*=e.shape[s];return{batchSize:i,sliceSize:a,dimSize:r,outputShape:o}}(r,o,n);return dt.runKernelFunc((function(e,t){var i=e.gather(r,o.flatten(),n);return t([o]),i}),{x:r,indices:o},(function(e,t){var o=t[0];return{x:function(){var t=r.shape,i=o.size,a=t.slice(0,n),s=a.length,u=t.slice(n,t.length).slice(1),c=u.length,l=sc(0,s),d=sc(s+1,s+1+c),h=uc([a,[i],u]),p=e.reshape(h),f=o.reshape([i]),m=uc([[s],l,d]),v=p.transpose(m),g=lc(v,f,r.shape[n]),b=Dn(m);return g.transpose(b)},indices:function(){return o}}}),"Gather",{axis:n}).reshape(i.outputShape)}}),lc=On({unsortedSegmentSum_:function(e,t,n){var r=wn(e,"x","unsortedSegmentSum"),o=wn(t,"segmentIds","unsortedSegmentSum","int32");return ee(ae(n),(function(){return"numSegments must be of dtype int"})),dt.runKernelFunc((function(e,t){var i=e.unsortedSegmentSum(r,o,n);return t([o]),i}),{$x:r},(function(e,t){var n=t[0];return{$x:function(){return function(e,t){for(var n=Mu(t,$n(t)),r=cc(e,n),o=Ju(t,Un(0,"int32")),i=r.rank-o.rank,a=0;a<i;++a)o=wr(o,a+1);o=Cu(o,qn(r.shape,"bool"));var s=$n(r);return Eu(o,r,s)}(e,n)}}}))}});function dc(e,t,n,r,o,i,a){void 0===i&&(i="NHWC"),ee(e.length===t.rank,(function(){return"Length of inShape ("+e.length+") and rank of dy ("+t.rank+") must match"}));var s=e,u=t,c=!1;3===t.rank&&(c=!0,u=t.as4D(1,t.shape[0],t.shape[1],t.shape[2]),s=[1,e[0],e[1],e[2]]),ee(4===s.length,(function(){return"Error in conv2dDerInput: inShape must be length 4, but got length "+s.length+"."})),ee(4===u.rank,(function(){return"Error in conv2dDerInput: dy must be rank 4, but got rank "+u.rank})),ee(4===n.rank,(function(){return"Error in conv2dDerInput: filter must be rank 4, but got rank "+n.rank}));var l="NHWC"===i?s[3]:s[1],d="NHWC"===i?u.shape[3]:u.shape[1];ee(l===n.shape[2],(function(){return"Error in conv2dDerInput: depth of input ("+l+") must match input depth for filter "+n.shape[2]+"."})),ee(d===n.shape[3],(function(){return"Error in conv2dDerInput: depth of output ("+d+") must match output depth for filter "+n.shape[3]+"."})),null!=a&&ee(ae(o),(function(){return"Error in conv2dDerInput: pad must be an integer when using, dimRoundingMode "+a+" but got pad "+o+"."}));var h=Io(i),p=bo(s,n.shape,r,1,o,a,!1,h),f=dt.runKernelFunc((function(e,t){var r=e.conv2dDerInput(u,n,p);return t([n,u]),r}),{dy4D:u,filter:n},(function(e,t){var n=t[0],s=t[1];return{dy4D:function(){return mc(e,n,r,o,i,1,a)},filter:function(){return gc(e,s,n.shape,r,o,i,a)}}}));return c?f.as3D(f.shape[1],f.shape[2],f.shape[3]):f}function hc(e){var t=function(e){return"number"==typeof e?[e,e,e]:2===e.length?[e[0],e[1],1]:e}(e),n=t[0],r=t[1],o=t[2];return 1===n&&1===r&&1===o}function pc(e,t,n,r,o){ee(e.length===t.rank,(function(){return"Length of inShape ("+e.length+") and rank of dy ("+t.rank+") must match"}));var i=e,a=t,s=!1;4===t.rank&&(s=!0,a=t.as5D(1,t.shape[0],t.shape[1],t.shape[2],t.shape[3]),i=[1,e[0],e[1],e[2],e[3]]);var u=i[4],c=a.shape[4];ee(5===i.length,(function(){return"Error in conv3dDerInput: inShape must be length 5, but got length "+i.length+"."})),ee(5===a.rank,(function(){return"Error in conv3dDerInput: dy must be rank 5, but got rank "+a.rank})),ee(5===n.rank,(function(){return"Error in conv3dDerInput: filter must be rank 5, but got rank "+n.rank})),ee(u===n.shape[3],(function(){return"Error in conv3dDerInput: depth of input ("+u+") must match input depth for filter "+n.shape[3]+"."})),ee(c===n.shape[4],(function(){return"Error in conv3dDerInput: depth of output ("+c+") must match output depth for filter "+n.shape[4]+"."}));var l=Ao(i,n.shape,r,1,o),d=dt.runKernelFunc((function(e){return e.conv3dDerInput(a,n,l)}),{dy5D:a});return s?d.as4D(d.shape[1],d.shape[2],d.shape[3],d.shape[4]):d}var fc=On({conv1d_:function(e,t,n,r,o,i,a){void 0===o&&(o="NWC"),void 0===i&&(i=1);var s=wn(e,"x","conv1d"),u=wn(t,"filter","conv1d"),c=s,l=!1;2===s.rank&&(l=!0,c=s.as3D(1,s.shape[0],s.shape[1])),ee(3===c.rank,(function(){return"Error in conv1d: input must be rank 3, but got rank "+c.rank+"."})),ee(3===u.rank,(function(){return"Error in conv1d: filter must be rank 3, but got rank "+u.rank+"."})),null!=a&&ee(ae(r),(function(){return"Error in conv1d: pad must be an integer when using, dimRoundingMode "+a+" but got pad "+r+"."})),ee(c.shape[2]===u.shape[1],(function(){return"Error in conv1d: depth of input ("+c.shape[2]+") must match input depth for filter "+u.shape[1]+"."})),ee(Eo(n,i),(function(){return"Error in conv1D: Either stride or dilation must be 1. Got stride "+n+" and dilation '"+i+"'"})),ee("NWC"===o,(function(){return"Error in conv1d: got dataFormat of "+o+" but only NWC is currently supported."}));var d=u.as4D(1,u.shape[0],u.shape[1],u.shape[2]),h=c.as4D(c.shape[0],1,c.shape[1],c.shape[2]),p=mc(h,d,[1,n],r,"NHWC",[1,i],a);return l?p.as2D(p.shape[2],p.shape[3]):p.as3D(p.shape[0],p.shape[2],p.shape[3])}}),mc=On({conv2d_:function(e,t,n,r,o,i,a){void 0===o&&(o="NHWC"),void 0===i&&(i=[1,1]);var s=wn(e,"x","conv2d"),u=wn(t,"filter","conv2d"),c=s,l=!1;3===s.rank&&(l=!0,c=s.as4D(1,s.shape[0],s.shape[1],s.shape[2])),ee(4===c.rank,(function(){return"Error in conv2d: input must be rank 4, but got rank "+c.rank+"."})),ee(4===u.rank,(function(){return"Error in conv2d: filter must be rank 4, but got rank "+u.rank+"."})),null!=a&&ee(ae(r),(function(){return"Error in conv2d: pad must be an integer when using, dimRoundingMode "+a+" but got pad "+r+"."}));var d="NHWC"===o?c.shape[3]:c.shape[1];ee(d===u.shape[2],(function(){return"Error in conv2d: depth of input ("+d+") must match input depth for filter "+u.shape[2]+"."})),ee(Eo(n,i),(function(){return"Error in conv2D: Either strides or dilations must be 1. Got strides "+n+" and dilations '"+i+"'"}));var h=Io(o),p=bo(c.shape,u.shape,n,i,r,a,!1,h),f=[u,c],m=dt.runKernelFunc((function(e,t){var n=e.conv2d(c,u,p);return t([u,c]),n}),{x:c,filter:u},(function(e,t){var a=t,s=a[0],u=a[1];return ee(_o(i),(function(){return"Error in gradient of conv2D: dilation rates greater than 1 are not yet supported in gradients. Got dilations '"+i+"'"})),{x:function(){return bc(u.shape,e,s,n,r,o)},filter:function(){return gc(u,e,s.shape,n,r,o)}}}),"Conv2D",p,f);return l?m.as3D(m.shape[1],m.shape[2],m.shape[3]):m}}),vc=On({conv3d_:function(e,t,n,r,o,i){void 0===o&&(o="NDHWC"),void 0===i&&(i=[1,1,1]);var a=wn(e,"x","conv3d"),s=wn(t,"filter","conv3d"),u=a,c=!1;4===a.rank&&(c=!0,u=a.as5D(1,a.shape[0],a.shape[1],a.shape[2],a.shape[3])),ee(5===u.rank,(function(){return"Error in conv3d: input must be rank 5, but got rank "+u.rank+"."})),ee(5===s.rank,(function(){return"Error in conv3d: filter must be rank 5, but got rank "+s.rank+"."})),ee(u.shape[4]===s.shape[3],(function(){return"Error in conv3d: depth of input ("+u.shape[4]+") must match input depth for filter "+s.shape[3]+"."})),ee(function(e,t){return hc(e)||hc(t)}(n,i),(function(){return"Error in conv3D: Either strides or dilations must be 1. Got strides "+n+" and dilations '"+i+"'"})),ee("NDHWC"===o,(function(){return"Error in conv3d: got dataFormat of "+o+" but only NDHWC is currently supported."}));var l=Ao(u.shape,s.shape,n,i,r),d=dt.runKernelFunc((function(e,t){var n=e.conv3d(u,s,l);return t([u,s]),n}),{x:u,$filter:s},(function(e,t){ee(hc(i),(function(){return"Error in gradient of conv3D: dilation rates greater than 1 are not yet supported in gradients. Got dilations '"+i+"'"}));var o=t[0],a=t[1];return{x:function(){return pc(o.shape,e,a,n,r)},$filter:function(){return function(e,t,n,r,o){var i=e;4===e.rank&&(i=e.as5D(1,e.shape[0],e.shape[1],e.shape[2],e.shape[3]));var a=t;4===a.rank&&(a=t.as5D(1,t.shape[0],t.shape[1],t.shape[2],t.shape[3])),ee(5===i.rank,(function(){return"Error in conv3dDerFilter: input must be rank 5, but got shape "+i.shape+"."})),ee(5===a.rank,(function(){return"Error in conv3dDerFilter: dy must be rank 5, but got shape "+a.shape+"."})),ee(5===n.length,(function(){return"Error in conv3dDerFilter: filterShape must be length 5, but got "+n+"."})),ee(i.shape[4]===n[3],(function(){return"Error in conv3dDerFilter: depth of input "+i.shape[4]+") must match input depth in filter ("+n[3]+"."})),ee(a.shape[4]===n[4],(function(){return"Error in conv3dDerFilter: depth of dy ("+a.shape[4]+") must match output depth for filter ("+n[4]+")."}));var s=Ao(i.shape,n,r,1,o);return dt.runKernelFunc((function(e){return e.conv3dDerFilter(i,a,s)}),{x5D:i,dy5D:a})}(o,e,a.shape,n,r)}}}));return c?d.as4D(d.shape[1],d.shape[2],d.shape[3],d.shape[4]):d}}),gc=On({conv2dDerFilter_:function(e,t,n,r,o,i,a){void 0===i&&(i="NHWC");var s=e;3===e.rank&&(s=e.as4D(1,e.shape[0],e.shape[1],e.shape[2]));var u=t;3===u.rank&&(u=t.as4D(1,t.shape[0],t.shape[1],t.shape[2])),ee(4===s.rank,(function(){return"Error in conv2dDerFilter: input must be rank 4, but got shape "+s.shape+"."})),ee(4===u.rank,(function(){return"Error in conv2dDerFilter: dy must be rank 4, but got shape "+u.shape+"."})),ee(4===n.length,(function(){return"Error in conv2dDerFilter: filterShape must be length 4, but got "+n+"."}));var c="NHWC"===i?s.shape[3]:s.shape[1],l="NHWC"===i?u.shape[3]:u.shape[1];ee(c===n[2],(function(){return"Error in conv2dDerFilter: depth of input "+c+") must match input depth in filter ("+n[2]+"."})),ee(l===n[3],(function(){return"Error in conv2dDerFilter: depth of dy ("+l+") must match output depth for filter ("+n[3]+")."})),null!=a&&ee(ae(o),(function(){return"Error in conv2dDerFilter: pad must be an integer when using, dimRoundingMode "+a+" but got pad "+o+"."}));var d=Io(i),h=bo(s.shape,n,r,1,o,a,!1,d);return dt.runKernelFunc((function(e){return e.conv2dDerFilter(s,u,h)}),{x4D:s,dy4D:u})}}),bc=On({conv2dDerInput_:dc}),Ac=On({depthwiseConv2d_:function(e,t,n,r,o,i,a){void 0===o&&(o="NHWC"),void 0===i&&(i=[1,1]);var s=wn(e,"x","depthwiseConv2d"),u=wn(t,"filter","depthwiseConv2d"),c=s,l=!1;3===s.rank&&(l=!0,c=s.as4D(1,s.shape[0],s.shape[1],s.shape[2])),ee(4===c.rank,(function(){return"Error in depthwiseConv2d: input must be rank 4, but got rank "+c.rank+"."})),ee(4===u.rank,(function(){return"Error in depthwiseConv2d: filter must be rank 4, but got rank "+u.rank+"."})),ee(c.shape[3]===u.shape[2],(function(){return"Error in depthwiseConv2d: number of input channels ("+c.shape[3]+") must match the inChannels dimension in filter "+u.shape[2]+"."})),null==i&&(i=[1,1]),ee(Eo(n,i),(function(){return"Error in depthwiseConv2d: Either strides or dilations must be 1. Got strides "+n+" and dilations '"+i+"'"})),null!=a&&ee(ae(r),(function(){return"Error in depthwiseConv2d: pad must be an integer when using, dimRoundingMode "+a+" but got pad "+r+"."}));var d=bo(c.shape,u.shape,n,i,r,a,!0),h=[c,u],p=dt.runKernelFunc((function(e,t){var n=e.depthwiseConv2D(c,u,d);return t([c,u]),n}),{x:c,filter:u},(function(e,t){ee(_o(i),(function(){return"Error in gradient of depthwiseConv2d: dilation rates greater than 1 are not yet supported. Got dilations '"+i+"'"}));var n=t[0],r=t[1];return{x:function(){return yc(n.shape,e,r,d)},filter:function(){return xc(n,e,r.shape,d)}}}),"DepthwiseConv2dNative",d,h);return l?p.as3D(p.shape[1],p.shape[2],p.shape[3]):p}}),yc=On({depthwiseConv2dDerInput_:function(e,t,n,r){var o=t,i=!1;3===t.rank&&(i=!0,o=t.as4D(1,t.shape[0],t.shape[1],t.shape[2]));var a=dt.runKernelFunc((function(e){return e.depthwiseConv2DDerInput(o,n,r)}),{dy4D:o});return i?a.as3D(a.shape[1],a.shape[2],a.shape[3]):a}}),xc=On({depthwiseConv2dDerFilter_:function(e,t,n,r){var o=e;3===e.rank&&(o=e.as4D(1,e.shape[0],e.shape[1],e.shape[2]));var i=t;return 3===i.rank&&(i=t.as4D(1,t.shape[0],t.shape[1],t.shape[2])),dt.runKernelFunc((function(e){return e.depthwiseConv2DDerFilter(o,i,r)}),{x4D:o,dy4D:i})}}),Cc=On({separableConv2d_:function(e,t,n,r,o,i,a){void 0===i&&(i=[1,1]),void 0===a&&(a="NHWC");var s=wn(e,"x","separableConv2d"),u=wn(t,"depthwiseFilter","separableConv2d"),c=wn(n,"pointwiseFilter","separableConv2d"),l=s,d=!1;if(3===s.rank&&(d=!0,l=s.as4D(1,s.shape[0],s.shape[1],s.shape[2])),"NCHW"===a)throw new Error("separableConv2d currently does not support dataFormat NCHW; only NHWC is supported");ee(4===l.rank,(function(){return"Error in separableConv2d: input must be rank 4, but got rank "+l.rank+"."})),ee(4===u.rank,(function(){return"Error in separableConv2d: depthwise filter must be rank 4, but got rank "+u.rank+"."})),ee(4===c.rank,(function(){return"Error in separableConv2d: pointwise filter must be rank 4, but got rank "+u.rank+"."})),ee(1===c.shape[0],(function(){return"Error in separableConv2d: the first dimension of pointwise filter  must be 1, but got "+c.shape[0]+"."})),ee(1===c.shape[1],(function(){return"Error in separableConv2d: the second dimension of pointwise filter must be 1, but got "+c.shape[1]+"."}));var h=u.shape[2],p=u.shape[3];ee(c.shape[2]===h*p,(function(){return"Error in separableConv2d: the third dimension of pointwise filter must be "+h*p+", but got "+c.shape[2]+"."}));var f=Ac(l,u,r,o,a,i),m=mc(f,c,1,"valid",a);return d?m.as3D(m.shape[1],m.shape[2],m.shape[3]):m}}),wc=On({conv2dTranspose_:function(e,t,n,r,o,i){return dc(n,wn(e,"x","conv2dTranspose"),wn(t,"filter","conv2dTranspose"),r,o,"NHWC",i)}}),kc=On({conv3dTranspose_:function(e,t,n,r,o){return pc(n,wn(e,"x","conv3dTranspose"),wn(t,"filter","conv3dTranspose"),r,o)}}),_c=On({matMul_:function(e,t,n,r){var o;void 0===n&&(n=!1),void 0===r&&(r=!1);var i=wn(e,"a","matMul"),a=wn(t,"b","matMul");o=it(i,a),i=o[0],a=o[1];var s=n?i.shape[i.rank-2]:i.shape[i.rank-1],u=r?a.shape[a.rank-1]:a.shape[a.rank-2],c=n?i.shape[i.rank-1]:i.shape[i.rank-2],l=r?a.shape[a.rank-2]:a.shape[a.rank-1],d=i.shape.slice(0,-2),h=a.shape.slice(0,-2),p=oe(d),f=oe(h);ee(i.rank>=2&&a.rank>=2&&i.rank===a.rank,(function(){return"Error in matMul: inputs must have the same rank of at least 2, got ranks "+i.rank+" and "+a.rank+"."})),ee(ie(d,h),(function(){return"Error in matMul: outer dimensions ("+d+") and ("+h+") of Tensors with shapes "+i.shape+" and "+a.shape+" must match."})),ee(s===u,(function(){return"Error in matMul: inner shapes ("+s+") and ("+u+") of Tensors with shapes "+i.shape+" and "+a.shape+" and transposeA="+n+" and transposeB="+r+" must match."}));var m=i.shape.slice(0,-2).concat([c,l]),v=n?i.as3D(p,s,c):i.as3D(p,c,s),g=r?a.as3D(f,l,u):a.as3D(f,u,l),b={transposeA:n,transposeB:r};return dt.runKernelFunc((function(e,t){var o=e.batchMatMul(v,g,n,r);return t([v,g]),o}),{a:v,b:g},(function(e,t){var o=t,i=o[0],a=o[1];return n||r?!n&&r?{a:function(){return e.matMul(a,!1,!1)},b:function(){return e.matMul(i,!0,!1)}}:n&&!r?{a:function(){return a.matMul(e,!1,!0)},b:function(){return i.matMul(e,!1,!1)}}:{a:function(){return a.matMul(e,!0,!0)},b:function(){return e.matMul(i,!0,!0)}}:{a:function(){return e.matMul(a,!1,!0)},b:function(){return i.matMul(e,!0,!1)}}}),"BatchMatMul",b).reshape(m)}}),Ec=On({dot_:function(e,t){var n=wn(e,"t1","dot"),r=wn(t,"t2","dot");ee(!(1!==n.rank&&2!==n.rank||1!==r.rank&&2!==r.rank),(function(){return"Error in dot: inputs must all be rank 1 or 2, but got ranks "+n.rank+" and "+r.rank+"."}));var o=1===n.rank?n.size:n.shape[1],i=1===r.rank?r.size:r.shape[0];return ee(o===i,(function(){return"Error in dot: inner dimensions of inputs must match, but got "+o+" and "+i+"."})),1===n.rank&&1===r.rank?n.as2D(1,-1).matMul(r.as2D(-1,1)).asScalar():1===n.rank&&2===r.rank?n.as2D(1,-1).matMul(r.as2D(r.shape[0],r.shape[1])).as1D():2===n.rank&&1===r.rank?n.matMul(r.as2D(-1,1)).as1D():n.matMul(r.as2D(r.shape[0],r.shape[1]))}}),Ic=On({outerProduct_:function(e,t){var n=wn(e,"v1","outerProduct"),r=wn(t,"v2","outerProduct");return ee(1===n.rank&&1===r.rank,(function(){return"Error in outerProduct: inputs must be rank 1, but got ranks "+n.rank+" and "+r.rank+"."})),n.as2D(-1,1).matMul(r.as2D(1,-1))}}),Rc=On({reverse_:function(e,t){var n=wn(e,"x","reverse");if(0===n.rank)return n.clone();var r=he(t,n.shape);return dt.runKernelFunc((function(e){return e.reverse(n,r)}),{$x:n},(function(e){return{$x:function(){return e.reverse(r)}}})).reshapeAs(n)}}),Sc=On({reverse1d_:function(e){var t=wn(e,"x","reverse");return ee(1===t.rank,(function(){return"Error in reverse1D: x must be rank 1 but got rank "+t.rank+"."})),Rc(t,0)}}),Tc=On({reverse2d_:function(e,t){var n=wn(e,"x","reverse");return ee(2===n.rank,(function(){return"Error in reverse2D: x must be rank 2 but got rank "+n.rank+"."})),Rc(n,t)}}),Dc=On({reverse3d_:function(e,t){var n=wn(e,"x","reverse");return ee(3===n.rank,(function(){return"Error in reverse3D: x must be rank 3 but got rank "+n.rank+"."})),Rc(n,t)}}),Fc=On({reverse4d_:function(e,t){var n=wn(e,"x","reverse");return ee(4===n.rank,(function(){return"Error in reverse4D: x must be rank 4 but got rank "+n.rank+"."})),Rc(n,t)}});function Nc(e,t,n,r,o,i){var a=wn(e,"x","maxPool"),s=a,u=!1;3===a.rank&&(u=!0,s=a.as4D(1,a.shape[0],a.shape[1],a.shape[2])),null==r&&(r=[1,1]),ee(4===s.rank,(function(){return"Error in maxPool: input must be rank 4 but got rank "+s.rank+"."})),ee(Eo(n,r),(function(){return"Error in maxPool: Either strides or dilations must be 1. Got strides "+n+" and dilations '"+r+"'"})),null!=i&&ee(ae(o),(function(){return"Error in maxPool: pad must be an integer when using, dimRoundingMode "+i+" but got pad "+o+"."}));var c=vo(s.shape,t,n,r,o,i);if(1===c.filterWidth&&1===c.filterHeight&&ie(c.inShape,c.outShape))return a.clone();var l=[s],d=dt.runKernelFunc((function(e,t){var n=e.maxPool(s,c);return t([s,n]),n}),{x:s},(function(e,i){var a=i[0],s=i[1];return{x:function(){return function(e,t,n,r,o,i,a,s){var u=wn(e,"dy","maxPoolBackprop"),c=wn(t,"input","maxPoolBackprop"),l=wn(n,"output","maxPoolBackprop");ee(c.rank===u.rank,(function(){return"Rank of input ("+c.rank+") does not match rank of dy ("+u.rank+")"})),null==i&&(i=[1,1]),ee(Eo(o,i),(function(){return"Error in maxPoolBackProp: Either strides or dilations must be 1. Got strides "+o+" and dilations '"+i+"'"})),ee(4===u.rank,(function(){return"Error in maxPoolBackprop: dy must be rank 4 but got rank "+u.rank+"."})),ee(4===c.rank,(function(){return"Error in maxPoolBackprop: input must be rank 4 but got rank "+c.rank+"."}));var d=vo(c.shape,r,o,i,a,s);return dt.runKernelFunc((function(e){return e.maxPoolBackprop(u,c,l,d)}),{$dy:u,$input:c})}(e,a,s,t,n,r,o)}}}),"MaxPool",c,l);return u?d.as3D(d.shape[1],d.shape[2],d.shape[3]):d}function Bc(e,t,n,r,o,i){var a=wn(e,"x","avgPool","float32");null==r&&(r=[1,1]),ee(Eo(n,r),(function(){return"Error in avgPool: Either strides or dilations must be 1. Got strides "+n+" and dilations '"+r+"'"}));var s=a,u=!1;3===a.rank&&(u=!0,s=a.as4D(1,a.shape[0],a.shape[1],a.shape[2])),ee(4===s.rank,(function(){return"Error in avgPool: x must be rank 4 but got rank "+s.rank+"."})),null!=i&&ee(ae(o),(function(){return"Error in avgPool: pad must be an integer when using, dimRoundingMode "+i+" but got pad "+o+"."}));var c=vo(s.shape,t,n,r,o,i);if(1===c.filterWidth&&1===c.filterHeight&&ie(c.inShape,c.outShape))return a.clone();var l=dt.runKernelFunc((function(e){return e.avgPool(s,c)}),{x:s},(function(e){return{x:function(){return function(e,t,n,r,o,i){var a=wn(e,"dy","avgPoolBackprop"),s=wn(t,"input","avgPoolBackprop");ee(s.rank===a.rank,(function(){return"Rank of input ("+s.rank+") does not match rank of dy ("+a.rank+")"})),null==o&&(o=[1,1]),ee(Eo(r,o),(function(){return"Error in avgPoolBackprop: Either strides or dilations must be 1. Got strides "+r+" and dilations '"+o+"'"}));var u=s,c=a,l=!1;3===s.rank&&(l=!0,u=s.as4D(1,s.shape[0],s.shape[1],s.shape[2]),c=a.as4D(1,a.shape[0],a.shape[1],a.shape[2])),ee(4===c.rank,(function(){return"Error in avgPoolBackprop: dy must be rank 4 but got rank "+c.rank+"."})),ee(4===u.rank,(function(){return"Error in avgPoolBackprop: input must be rank 4 but got rank "+u.rank+"."}));var d=vo(u.shape,n,r,o,i),h=dt.runKernelFunc((function(e){return e.avgPoolBackprop(c,u,d)}),{dy4D:c,input4D:u});return l?h.as3D(h.shape[1],h.shape[2],h.shape[3]):h}(e,s,t,n,r,o)}}}),"AvgPool",c);return l=l.cast(a.dtype),u?l.as3D(l.shape[1],l.shape[2],l.shape[3]):l}var Oc=On({maxPool_:function(e,t,n,r,o){return Nc(e,t,n,1,r,o)}}),Mc=On({avgPool_:function(e,t,n,r,o){return Bc(e,t,n,1,r,o)}}),Pc=On({pool_:function(e,t,n,r,o,i){null==o&&(o=[1,1]),null==i&&(i=1),0===r&&(r="valid");var a=wn(e,"x","maxPool"),s=a,u=!1;3===a.rank&&(u=!0,s=a.as4D(1,a.shape[0],a.shape[1],a.shape[2])),ee(Eo(i,o),(function(){return"Error in pool: Either strides or dilations must be 1. Got strides "+i+" and dilations '"+o+"'"}));var c,l=vo(s.shape,t,i,o,r),d=[l.dilationHeight,l.dilationWidth];c="same"===r?function(e,t){var n=e.map((function(e,n){return e+(e-1)*(t[n]-1)})).map((function(e){return e-1})),r=n.map((function(e){return Math.floor(e/2)})),o=n.map((function(e,t){return e-r[t]}));return n.map((function(e,t){return[r[t],o[t]]}))}([l.filterHeight,l.filterWidth],d):[[0,0],[0,0]];var h=1===d[0]&&1===d[1],p=function(e,t,n){var r=n.map((function(e){return e[0]})),o=n.map((function(e){return e[1]})),i=e.concat(r,o),a=t.map((function(e,t){return(e-i[t]%e)%e})),s=o.map((function(e,t){return e+a[t]}));return[t.map((function(e,t){return[r[t],s[t]]})),t.map((function(e,t){return[0,a[t]]}))]}([l.inHeight,l.inWidth],d,c),f=p[0],m=p[1],v=h?r:"valid",g=h?s:Pr(s,d,f),b=("avg"===n?function(){return Bc(g,t,i,1,v)}:function(){return Nc(g,t,i,1,v)})(),A=h?b:gr(b,d,m);return u?A.as3D(A.shape[1],A.shape[2],A.shape[3]):A}}),Lc=On({maxPool3d_:function(e,t,n,r,o,i,a){void 0===i&&(i="NDHWC");var s=wn(e,"x","maxPool3d"),u=s,c=!1;4===s.rank&&(c=!0,u=s.as5D(1,s.shape[0],s.shape[1],s.shape[2],s.shape[3])),null==a&&(a=[1,1,1]),ee(5===u.rank,(function(){return"Error in maxPool3d: x must be rank 5 but got rank "+u.rank+"."})),ee("NDHWC"===i,(function(){return"Error in maxPool3d: Only NDHWC is currently supported, but got dataFormat of "+i})),ee(Eo(n,a),(function(){return"Error in maxPool3d: Either strides or dilations must be 1. Got strides "+n+" and dilations '"+a+"'"})),null!=o&&ee(ae(r),(function(){return"Error in maxPool3d: pad must be an integer when using, dimRoundingMode "+o+" but got pad "+r+"."}));var l=go(u.shape,t,n,a,r,o,i),d=dt.runKernelFunc((function(e,t){var n=e.maxPool3d(u,l);return t([u,n]),n}),{x:u},(function(e,i){var s=i[0],u=i[1];return{x:function(){return function(e,t,n,r,o,i,a,s){var u=wn(e,"dy","maxPool3dBackprop"),c=wn(t,"input","maxPool3dBackprop"),l=wn(n,"output","maxPool3dBackprop"),d=u,h=c,p=l,f=!1;4===c.rank&&(f=!0,d=u.as5D(1,u.shape[0],u.shape[1],u.shape[2],u.shape[3]),h=c.as5D(1,c.shape[0],c.shape[1],c.shape[2],c.shape[3]),p=l.as5D(1,l.shape[0],l.shape[1],l.shape[2],l.shape[3])),ee(5===d.rank,(function(){return"Error in maxPool3dBackprop: dy must be rank 5 but got rank "+d.rank+"."})),ee(5===h.rank,(function(){return"Error in maxPool3dBackprop: input must be rank 5 but got rank "+h.rank+"."})),ee(5===p.rank,(function(){return"Error in maxPool3dBackprop: output must be rank 5 but got rank "+p.rank+"."})),null==i&&(i=[1,1,1]),ee(Eo(o,i),(function(){return"Error in maxPool3dBackprop: Either strides or dilations must be 1. Got strides "+o+" and dilations '"+i+"'"})),null!=s&&ee(ae(a),(function(){return"Error in maxPool3dBackprop: pad must be an integer when using, dimRoundingMode "+s+" but got pad "+a+"."}));var m=go(h.shape,r,o,i,a,s),v=dt.runKernelFunc((function(e){return e.maxPool3dBackprop(d,h,p,m)}),{dy5D:d,input5D:h});return f?v.as4D(v.shape[1],v.shape[2],v.shape[3],v.shape[4]):v}(e,s,u,t,n,a,r,o)}}}));return c?d.as4D(d.shape[1],d.shape[2],d.shape[3],d.shape[4]):d}}),zc=On({avgPool3d_:function(e,t,n,r,o,i,a){void 0===i&&(i="NDHWC");var s=wn(e,"x","avgPool3d","float32"),u=s,c=!1;4===s.rank&&(c=!0,u=s.as5D(1,s.shape[0],s.shape[1],s.shape[2],s.shape[3])),null==a&&(a=[1,1,1]),ee(5===u.rank,(function(){return"Error in avgPool3d: x must be rank 5 but got rank "+u.rank+"."})),ee("NDHWC"===i,(function(){return"Error in avgPool3d: Only NDHWC is currently supported, but got dataFormat of "+i})),ee(Eo(n,a),(function(){return"Error in avgPool3d: Either strides or dilations must be 1. Got strides "+n+" and dilations '"+a+"'"})),null!=o&&ee(ae(r),(function(){return"Error in avgPool3d: pad must be an integer when using, dimRoundingMode "+o+" but got pad "+r+"."}));var l=go(u.shape,t,n,a,r,o,i),d=dt.runKernelFunc((function(e){return e.avgPool3d(u,l)}),{x:u},(function(e){return{x:function(){return function(e,t,n,r,o,i,a){var s=wn(e,"dy","avgPool3dBackprop"),u=wn(t,"input","avgPool3dBackprop"),c=s,l=u,d=!1;4===u.rank&&(d=!0,c=s.as5D(1,s.shape[0],s.shape[1],s.shape[2],s.shape[3]),l=u.as5D(1,u.shape[0],u.shape[1],u.shape[2],u.shape[3])),ee(5===c.rank,(function(){return"Error in avgPool3dBackprop: dy must be rank 5 but got rank "+c.rank+"."})),ee(5===l.rank,(function(){return"Error in avgPool3dBackprop: input must be rank 5 but got rank "+l.rank+"."})),null==o&&(o=[1,1,1]),ee(Eo(r,o),(function(){return"Error in avgPool3dBackprop: Either strides or dilations must be 1. Got strides "+r+" and dilations '"+o+"'"})),null!=a&&ee(ae(i),(function(){return"Error in maxPool3dBackprop: pad must be an integer when using, dimRoundingMode "+a+" but got pad "+i+"."}));var h=go(l.shape,n,r,o,i,a),p=dt.runKernelFunc((function(e){return e.avgPool3dBackprop(c,l,h)}),{dy5D:c,input5D:l});return d?p.as4D(p.shape[1],p.shape[2],p.shape[3],p.shape[4]):p}(e,u,t,n,a,r,o)}}}));return d=d.cast(u.dtype),c?d.as4D(d.shape[1],d.shape[2],d.shape[3],d.shape[4]):d}}),Wc=On({slice_:function(e,t,n){var r,o,i=wn(e,"x","slice");if(0===i.rank)throw new Error("Slicing scalar is not possible");(r="number"==typeof t?[t].concat(new Array(i.rank-1).fill(0)):t.length<i.rank?t.concat(new Array(i.rank-t.length).fill(0)):t.slice()).forEach((function(e){ee(-1!==e,(function(){return"slice() does not support negative begin indexing."}))})),o=(o=null==n?new Array(i.rank).fill(-1):"number"==typeof n?[n].concat(new Array(i.rank-1).fill(-1)):n.length<i.rank?n.concat(new Array(i.rank-n.length).fill(-1)):n).map((function(e,t){return e>=0?e:(ee(-1===e,(function(){return"Negative size values should be exactly -1 but got "+e+" for the slice() size at index "+t+"."})),i.shape[t]-r[t])})),Zr(i,r,o);var a=i.shape,s={begin:r,size:o};return dt.runKernelFunc((function(e){return e.slice(i,r,o)}),{x:i},(function(e){for(var t=[],n=0;n<e.rank;n++)t.push([r[n],a[n]-r[n]-o[n]]);return{x:function(){return e.pad(t)}}}),"Slice",s)}}),Uc=On({slice1d_:function(e,t,n){var r=wn(e,"x","slice1d");return ee(1===r.rank,(function(){return"slice1d expects a rank-1 tensor, but got a rank-"+r.rank+" tensor"})),Wc(r,[t],[n])}}),Vc=On({slice2d_:function(e,t,n){var r=wn(e,"x","slice2d");return ee(2===r.rank,(function(){return"slice2d expects a rank-2 tensor, but got a rank-"+r.rank+" tensor"})),Wc(r,t,n)}}),Gc=On({slice3d_:function(e,t,n){var r=wn(e,"x","slice3d");return ee(3===r.rank,(function(){return"slice3d expects a rank-3 tensor, but got a rank-"+r.rank+" tensor"})),Wc(r,t,n)}}),Hc=On({slice4d_:function(e,t,n){var r=wn(e,"x","slice4d");return ee(4===r.rank,(function(){return"slice4d expects a rank-4 tensor, but got a rank-"+r.rank+" tensor"})),Wc(r,t,n)}});function jc(e,t,n,r,o){return t.rank<n.rank&&(t=t.reshape(Rn(t.shape,r))),e.rank<n.rank&&(e=e.reshape(Rn(e.shape,r))),{x:function(){var r=e.mul(n.equal(t).cast(e.dtype));return null==o?r:r.transpose(o)}}}var qc=On({all_:function(e,t,n){void 0===t&&(t=null),void 0===n&&(n=!1);var r=wn(e,"x","all","bool"),o=he(t,r.shape),i=o,a=Tn(i,r.rank);null!=a&&(r=r.transpose(a),i=Fn(i.length,r.rank));var s=dt.runKernelFunc((function(e){return e.all(r,i)}),{$x:r});if(n){var u=Rn(s.shape,o);return s.reshape(u)}return s}}),Kc=On({any_:function(e,t,n){void 0===t&&(t=null),void 0===n&&(n=!1);var r=wn(e,"x","any","bool"),o=he(t,r.shape),i=o,a=Tn(i,r.rank);null!=a&&(r=r.transpose(a),i=Fn(i.length,r.rank));var s=dt.runKernelFunc((function(e){return e.any(r,i)}),{$x:r});if(n){var u=Rn(s.shape,o);return s.reshape(u)}return s}}),Xc=On({argMax_:function(e,t){void 0===t&&(t=0);var n=wn(e,"x","argMax");null==t&&(t=0);var r=he(t,n.shape),o=Tn(r,n.rank);null!=o&&(n=n.transpose(o),r=Fn(r.length,n.rank));var i={axis:r[0]},a=[n];return dt.runKernelFunc((function(e,t){var o=e.argMax(n,r[0]);return t([n]),o}),{x:n},(function(e,t){var n=t[0];return{x:function(){return $n(n)}}}),"ArgMax",i,a)}}),Qc=On({argMin_:function(e,t){void 0===t&&(t=0);var n=wn(e,"x","argMin");null==t&&(t=0);var r=he(t,n.shape),o=Tn(r,n.rank);return null!=o&&(n=n.transpose(o),r=Fn(r.length,n.rank)),dt.runKernelFunc((function(e,t){var o=e.argMin(n,r[0]);return t([n]),o}),{$x:n},(function(e,t){var n=t[0];return{$x:function(){return $n(n)}}}))}}),Yc=On({logSumExp_:function(e,t,n){void 0===t&&(t=null),void 0===n&&(n=!1);var r=wn(e,"x","logSumExp"),o=he(t,r.shape),i=r.max(o,!0),a=r.sub(i).exp().sum(o).log(),s=i.reshape(a.shape).add(a);if(n){var u=Rn(s.shape,o);return s.reshape(u)}return s}}),$c=On({max_:function(e,t,n){void 0===t&&(t=null),void 0===n&&(n=!1);var r=wn(e,"x","max"),o=r,i=he(t,r.shape),a=i,s=Tn(a,r.rank);null!=s&&(r=r.transpose(s),a=Fn(a.length,r.rank));var u=[r],c=dt.runKernelFunc((function(e,t){var n=e.max(r,a);return t([o,n]),n}),{x:r},(function(e,t){return jc(e,t[1],t[0],i,s)}),"Max",{axes:a},u,[!0]);if(n){var l=Rn(c.shape,i);c=c.reshape(l)}return c}}),Jc=On({mean_:function(e,t,n){void 0===t&&(t=null),void 0===n&&(n=!1);var r=wn(e,"x","mean"),o=he(t,r.shape),i=oe(In(r.shape,o)[1]);return ao((function(e){var r=Un(i);return{value:(r.dtype===e.dtype?e:e.cast(r.dtype)).div(r).sum(t,n),gradFunc:function(t){var n=e.shape.slice();return o.forEach((function(e){n[e]=1})),t.reshape(n).mul(qn(e.shape,"float32")).div(i)}}}))(r)}}),Zc=On({min_:function(e,t,n){void 0===t&&(t=null),void 0===n&&(n=!1);var r=wn(e,"x","min"),o=r,i=he(t,r.shape),a=i,s=Tn(a,r.rank);null!=s&&(r=r.transpose(s),a=Fn(a.length,r.rank));var u=[r],c=dt.runKernelFunc((function(e,t){var n=e.min(r,a);return t([o,n]),n}),{x:r},(function(e,t){return jc(e,t[1],t[0],i,s)}),"Min",{axes:a},u,[!0]);if(n){var l=Rn(c.shape,i);c=c.reshape(l)}return c}}),el=On({moments_:function(e,t,n){void 0===t&&(t=null),void 0===n&&(n=!1);var r=he(t,(e=wn(e,"x","moments")).shape),o=e.mean(r,n),i=o.shape;n||(i=Rn(o.shape,r));var a=e.toFloat().sub(o.reshape(i)).square();return{mean:o,variance:a.mean(r,n)}}}),tl=On({sum_:function(e,t,n){void 0===t&&(t=null),void 0===n&&(n=!1);var r=wn(e,"x","sum");"bool"===r.dtype&&(r=r.toInt());var o=he(t,r.shape);return ao((function(e){var t=Tn(o,e.rank),r=o,i=e;null!=t&&(i=e.transpose(t),r=Fn(r.length,e.rank));var a=function(t){var n=e.shape.slice();return o.forEach((function(e){n[e]=1})),t.reshape(n).mul(qn(e.shape,"float32"))},s={axes:r},u=dt.runKernelFunc((function(e){return e.sum(i,r)}),{x:i},(function(e){return{x:function(){return a(e)}}}),"Sum",s);if(n){var c=Rn(u.shape,o);u=u.reshape(c)}return{value:u,gradFunc:a}}))(r)}}),nl=On({prod_:function(e,t,n){void 0===t&&(t=null),void 0===n&&(n=!1);var r=wn(e,"x","prod");"bool"===r.dtype&&(r=r.toInt());var o=he(t,r.shape),i=Tn(o,r.rank),a=o,s=r;null!=i&&(s=r.transpose(i),a=Fn(a.length,r.rank));var u=dt.runKernelFunc((function(e){return e.prod(s,a)}),{permutedX:s});if(n){var c=Rn(u.shape,o);u=u.reshape(c)}return u}}),rl=On({elu_:function(e){var t=wn(e,"x","elu");return dt.runKernelFunc((function(e,n){var r=e.elu(t);return n([r]),r}),{$x:t},(function(e,t){var n=t[0];return{$x:function(){return dt.runKernelFunc((function(t){return t.eluDer(e,n)}),{dy:e,y:n})}}}))}}),ol=On({leakyRelu_:function(e,t){void 0===t&&(t=.2);var n=wn(e,"x","leakyRelu");return Mu(Un(t).mul(n),n)}}),il=On({prelu_:function(e,t){var n=wn(e,"x","prelu"),r=wn(t,"alpha","prelu");return dt.runKernelFunc((function(e,t){var o=e.prelu(n,r);return t([n,r]),o}),{x:n,alpha:r},(function(e,t){var n=t[0],r=t[1],o=n.greater(0);return{x:function(){return Eu(o,e,e.mul(r))},alpha:function(){var t=Eu(o,$n(e),e.mul(n)),i=fo(r.shape,e.shape);return i.length>0&&(t=t.sum(i)),t.reshape(r.shape)}}}),"Prelu")}}),al=On({relu_:function(e){var t=wn(e,"x","relu");return"bool"===t.dtype?t.toInt():dt.runKernelFunc((function(e,n){var r=e.relu(t);return n([t]),r}),{x:t},(function(e,t){var n=t[0];return{x:function(){return e.mulStrict(n.step().toFloat())}}}),"Relu")}}),sl=On({relu6_:function(e){var t=wn(e,"x","relu6");return"bool"===t.dtype?t.toInt():dt.runKernelFunc((function(e,n){var r=e.relu6(t);return n([t]),r}),{x:t},(function(e,t){var n=t[0],r=n.lessEqual(6).mul(n.step());return{x:function(){return e.mulStrict(r.toFloat())}}}),"Relu6")}}),ul=On({selu_:function(e){var t=wn(e,"x","selu");return dt.runKernelFunc((function(e,n){var r=e.selu(t);return n([t]),r}),{$x:t},(function(e,t){var n=t[0];return{$x:function(){var t=n.greater(Un(0)),r=Un(rs),o=Un(os),i=e.mul(o),a=e.mul(r).mul(n.toFloat().exp());return Eu(t,i,a)}}}))}}),cl=On({transpose_:function(e,t){var n=wn(e,"x","transpose");if(null==t&&(t=n.shape.map((function(e,t){return t})).reverse()),ee(n.rank===t.length,(function(){return"Error in transpose: rank of input "+n.rank+" must match length of perm "+t+"."})),t.forEach((function(e){ee(e>=0&&e<n.rank,(function(){return"All entries in 'perm' must be between 0 and "+(n.rank-1)+" but got "+t}))})),n.rank<=1)return n.clone();var r={perm:t};return dt.runKernelFunc((function(e){return e.transpose(n,t)}),{x:n},(function(e){var n=Dn(t);return{x:function(){return e.transpose(n)}}}),"Transpose",r)}}),ll=On({localResponseNormalization_:function(e,t,n,r,o){void 0===t&&(t=5),void 0===n&&(n=1),void 0===r&&(r=1),void 0===o&&(o=.5);var i=wn(e,"x","localResponseNormalization");ee(4===i.rank||3===i.rank,(function(){return"Error in localResponseNormalization: x must be rank 3 or 4 but got\n               rank "+i.rank+"."})),ee(ae(t),(function(){return"Error in localResponseNormalization: depthRadius must be an integer but got depthRadius "+t+"."}));var a=i,s=!1;3===i.rank&&(s=!0,a=i.as4D(1,i.shape[0],i.shape[1],i.shape[2]));var u=dt.runKernelFunc((function(e,i){var s=e.localResponseNormalization4D(a,t,n,r,o);return i([a,s]),s}),{x4D:a},(function(e,i){var a=i[0],s=i[1];return{x4D:function(){return dt.runKernelFunc((function(i){return i.LRNGrad(e,a,s,t,n,r,o)}),{})}}}));return s?u.as3D(u.shape[1],u.shape[2],u.shape[3]):u}}),dl=On({norm_:function(e,t,n,r){void 0===t&&(t="euclidean"),void 0===n&&(n=null),void 0===r&&(r=!1);var o=function e(t,n,r){if(void 0===r&&(r=null),0===t.rank)return t.abs();if(1!==t.rank&&null===r)return e(t.reshape([-1]),n,r);if(1===t.rank||"number"==typeof r||Array.isArray(r)&&1===r.length){if(1===n)return t.abs().sum(r);if(n===1/0)return t.abs().max(r);if(n===-1/0)return t.abs().min(r);if("euclidean"===n||2===n)return t.abs().pow(Un(2,"int32")).sum(r).sqrt();throw new Error("Error in norm: invalid ord value: "+n)}if(Array.isArray(r)&&2===r.length){if(1===n)return t.abs().sum(r[0]).max(r[1]-1);if(n===1/0)return t.abs().sum(r[1]).max(r[0]);if(n===-1/0)return t.abs().sum(r[1]).min(r[0]);if("fro"===n||"euclidean"===n)return t.square().sum(r).sqrt();throw new Error("Error in norm: invalid ord value: "+n)}throw new Error("Error in norm: invalid axis: "+r)}(e=wn(e,"x","norm"),t,n),i=o.shape;if(r){var a=he(n,e.shape);i=Rn(o.shape,a)}return o.reshape(i)}}),hl=On({basicLSTMCell_:function(e,t,n,r,o,i){var a=wn(e,"forgetBias","basicLSTMCell"),s=wn(t,"lstmKernel","basicLSTMCell"),u=wn(n,"lstmBias","basicLSTMCell"),c=wn(r,"data","basicLSTMCell"),l=wn(o,"c","basicLSTMCell"),d=wn(i,"h","basicLSTMCell"),h=c.concat(d,1).matMul(s).add(u),p=h.shape[0],f=h.shape[1]/4,m=[p,f],v=h.slice([0,0],m),g=h.slice([0,f],m),b=h.slice([0,2*f],m),A=h.slice([0,3*f],m),y=v.sigmoid().mulStrict(g.tanh()).addStrict(l.mulStrict(a.add(b).sigmoid())),x=y.tanh().mulStrict(A.sigmoid());return[y,x]}}),pl=On({multiRNNCell_:function(e,t,n,r){for(var o=wn(t,"data","multiRNNCell"),i=kn(n,"c","multiRNNCell"),a=kn(r,"h","multiRNNCell"),s=o,u=[],c=0;c<e.length;c++){var l=e[c](s,i[c],a[c]);u.push(l[0]),u.push(l[1]),s=l[1]}var d=[],h=[];for(c=0;c<u.length;c+=2)d.push(u[c]),h.push(u[c+1]);return[d,h]}}),fl=On({movingAverage_:function(e,t,n,r,o){void 0===o&&(o=!0);var i=wn(e,"v","movingAverage"),a=wn(t,"x","movingAverage"),s=wn(n,"decay","movingAverage");at(i,a),ee(ie(i.shape,a.shape),(function(){return"Shape mismatch in v and x"}));var u=Un(1),c=u.sub(s),l=a.sub(i).mul(c);if(o){ee(null!=r,(function(){return"When using zeroDebias: true, step is required."}));var d=wn(r,"step","movingAverage");l=l.div(u.sub(Hu(s,d)))}return i.add(l)}}),ml=On({stridedSlice_:function(e,t,n,r,o,i,a,s,u){if(void 0===o&&(o=0),void 0===i&&(i=0),void 0===a&&(a=0),void 0===s&&(s=0),void 0===u&&(u=0),null==r&&(r=new Array(t.length)),0!==a)throw new Error("ellipsis mask is not yet supported");var c=wn(e,"x","stridedSlice"),l=eo(s),d=c.shape.slice();l.forEach((function(e){t[e]=0,n[e]=1,d.splice(e,0,1)})),c=c.reshape(d);for(var h=0;h<c.rank;h++)t[h]=no(o,t,r,c.shape,h),n[h]=ro(i,n,r,c.shape,h),r[h]=r[h]||1;var p=eo(u);p.forEach((function(e){n[e]=t[e]+1,r[e]=1}));var f=to(t,n,r),m=f.filter((function(e,t){return-1===p.indexOf(t)}));return r.every((function(e){return 1===e}))?Wc(c,t,f).reshape(m):dt.runKernelFunc((function(e){return e.stridedSlice(c,t,n,r)}),{$x:c}).reshape(m)}}),vl=On({topk_:function(e,t,n){void 0===t&&(t=1),void 0===n&&(n=!0);var r=wn(e,"x","topk");if(0===r.rank)throw new Error("topk() expects the input to be of rank 1 or higher");var o=r.shape[r.shape.length-1];if(t>o)throw new Error("'k' passed to topk() must be <= the last dimension ("+o+") but got "+t);var i=dt.runKernelFunc((function(e){return e.topk(r,t,n)}),{$x:r});return{values:i[0],indices:i[1]}}}),gl=On({scatterND_:function(e,t,n){var r=wn(e,"indices","scatterND","int32"),o=wn(t,"updates","scatterND");return $r(o,r,n),dt.runKernelFunc((function(e){return e.scatterND(r,o,n)}),{indices:r,updates:o},null,"ScatterNd",{shape:n})}}),bl=On({fft_:function(e){ee("complex64"===e.dtype,(function(){return"The dtype for tf.spectral.fft() must be complex64 but got "+e.dtype+"."}));var t=e.shape[e.shape.length-1],n=e.size/t,r=e.as2D(n,t);return dt.runKernelFunc((function(e){return e.fft(r)}),{input:e}).reshape(e.shape)}}),Al=On({ifft_:function(e){ee("complex64"===e.dtype,(function(){return"The dtype for tf.spectral.ifft() must be complex64 but got "+e.dtype+"."}));var t=e.shape[e.shape.length-1],n=e.size/t,r=e.as2D(n,t);return dt.runKernelFunc((function(e){return e.ifft(r)}),{input:e}).reshape(e.shape)}}),yl=On({rfft_:function(e,t){ee("float32"===e.dtype,(function(){return"The dtype for rfft() must be real value but got "+e.dtype}));var n,r=e.shape[e.shape.length-1],o=e.size/r;if(null!=t&&t<r){var i=e.shape.map((function(e){return 0})),a=e.shape.map((function(e){return e}));a[e.shape.length-1]=t,n=e.slice(i,a),r=t}else if(null!=t&&t>r){var s=e.shape.map((function(e){return e}));s[e.shape.length-1]=t-r,n=e.concat(Kn(s),e.shape.length-1),r=t}else n=e;var u=n.zerosLike(),c=Mn(n,u).as2D(o,r),l=bl(c),d=Math.floor(r/2)+1,h=Pn(l),p=Ln(l),f=h.split([d,r-d],h.shape.length-1),m=p.split([d,r-d],p.shape.length-1),v=n.shape.slice();return v[n.shape.length-1]=d,Mn(f[0],m[0]).reshape(v)}}),xl=On({irfft_:function(e){var t=e.shape[e.shape.length-1],n=e.size/t;if(t<=2){var r=e.as2D(n,t),o=Al(r);return Pn(o)}var i=[n,2*(t-1)],a=Pn(e).as2D(n,t),s=Ln(e).as2D(n,t),u=a.slice([0,1],[n,t-2]).reverse(1),c=s.slice([0,1],[n,t-2]).reverse(1).mul(Un(-1)),l=a.concat(u,1),d=s.concat(c,1);return r=Mn(l,d).as2D(i[0],i[1]),o=Al(r),Pn(o)}}),Cl=Object.freeze({fft:bl,ifft:Al,rfft:yl,irfft:xl}),wl=On({sparseToDense_:function(e,t,n,r){void 0===r&&(r=0);var o=wn(e,"sparseIndices","sparseToDense","int32"),i=wn(t,"sparseValues","sparseToDense"),a=wn(r,"defaultValue","sparseToDense",i.dtype);return function(e,t,n,r){if("int32"!==e.dtype)throw new Error("tf.sparseToDense() expects the indices to be int32 type, but the dtype was "+e.dtype+".");if(e.rank>2)throw new Error("sparseIndices should be a scalar, vector, or matrix, but got shape "+e.shape+".");var o=e.rank>0?e.shape[0]:1,i=e.rank>1?e.shape[1]:1;if(n.length!==i)throw new Error("outputShape has incorrect number of elements:, "+n.length+", should be: "+i+".");var a=t.size;if(0!==t.rank&&(1!==t.rank||a!==o))throw new Error("sparseValues has incorrect shape "+t.shape+", should be [] or ["+o+"]");if(t.dtype!==r.dtype)throw new Error("sparseValues.dtype must match defaultValues.dtype")}(o,i,n,a),dt.runKernelFunc((function(e){return e.sparseToDense(o,i,n,a)}),{$sparseIndices:o,$sparseValues:i,$defaultValue:a})}}),kl=On({gatherND_:function(e,t){var n=wn(t,"indices","gatherND","int32"),r=wn(e,"x","gatherND");return dt.runKernelFunc((function(e){return e.gatherND(r,n)}),{x:r,indices:n},null,"GatherNd")}}),_l=On({diag_:function(e){var t=wn(e,"x","diag").flatten(),n=e.shape.concat(e.shape);return dt.runKernelFunc((function(e){return e.diag(t)}),{$x:t}).reshape(n)}}),El=On({dropout_:function(e,t,n,r){var o=wn(e,"x","dropout");if(ee("float32"===o.dtype,(function(){return"x has to be a floating point tensor since it's going to be scaled, but got a "+o.dtype+" tensor instead."})),ee(t>=0&&t<1,(function(){return"rate must be a float in the range [0, 1), but got "+t+"."})),0===t)return e instanceof Xe?o.clone():o;var i=function(e,t){if(null==t)return e.shape.slice();if(ie(e.shape,t))return t;if(e.shape.length===t.length){for(var n=[],r=0;r<e.shape.length;r++)null==t[r]&&null!=e.shape[r]?n.push(e.shape[r]):n.push(t[r]);return n}return t}(o,n),a=1-t,s=Or(i,0,1,"float32",r).add(a).floor().div(a);return o.mul(s)}});function Il(e,t,n){for(var r=1-e%2,o=new Float32Array(e),i=0;i<e;++i){var a=2*Math.PI*i/(e+r-1);o[i]=t-n*Math.cos(a)}return Vn(o,"float32")}var Rl,Sl=On({hannWindow_:function(e){return Il(e,.5,.5)}}),Tl=On({hammingWindow_:function(e){return Il(e,.54,.46)}}),Dl=On({frame_:function(e,t,n,r,o){void 0===r&&(r=!1),void 0===o&&(o=0);for(var i=0,a=[];i+t<=e.size;)a.push(Wc(e,i,t)),i+=n;if(r)for(;i<e.size;){var s=i+t-e.size,u=Jn([Wc(e,i,t-s),Xn([s],o)]);a.push(u),i+=n}return 0===a.length?Gn([],[0,t]):Jn(a).as2D(a.length,t)}}),Fl=On({stft_:function(e,t,n,r,o){var i;void 0===o&&(o=Sl),null==r&&(i=t,r=Math.floor(Math.pow(2,Math.ceil(Math.log(i)/Math.log(2)))));for(var a=Dl(e,t,n),s=Vu(a,o(t)),u=[],c=0;c<a.shape[0];c++)u.push(yl(s.slice([c,0],[1,t]),r));return Jn(u)}}),Nl=Object.freeze({hannWindow:Sl,hammingWindow:Tl,frame:Dl,stft:Fl});!function(e){e[e.NONE=0]="NONE",e[e.MEAN=1]="MEAN",e[e.SUM=2]="SUM",e[e.SUM_BY_NONZERO_WEIGHTS=3]="SUM_BY_NONZERO_WEIGHTS"}(Rl||(Rl={}));var Bl=On({absoluteDifference_:function(e,t,n,r){void 0===r&&(r=Rl.SUM_BY_NONZERO_WEIGHTS);var o=wn(e,"labels","absoluteDifference"),i=wn(t,"predictions","absoluteDifference"),a=null;null!=n&&(a=wn(n,"weights","absoluteDifference")),te(o.shape,i.shape,"Error in absoluteDifference: ");var s=o.sub(i).abs();return Ol(s,a,r)}}),Ol=On({computeWeightedLoss_:function(e,t,n){void 0===n&&(n=Rl.SUM_BY_NONZERO_WEIGHTS);var r=wn(e,"losses","computeWeightedLoss"),o=null;null!=t&&(o=wn(t,"weights","computeWeightedLoss"));var i=null==o?r:r.mul(o);if(n===Rl.NONE)return i;if(n===Rl.SUM)return i.sum();if(n===Rl.MEAN){if(null==o)return i.mean();var a=r.size/o.size,s=i.sum().div(o.sum());return a>1?s.div(Un(a)):s}if(n===Rl.SUM_BY_NONZERO_WEIGHTS){if(null==o)return i.sum().div(Un(r.size));var u=o.mul(qn(r.shape)).notEqual(Un(0)).sum().toFloat();return i.sum().div(u)}throw Error("Unknown reduction: "+n)}}),Ml=On({cosineDistance_:function(e,t,n,r,o){void 0===o&&(o=Rl.SUM_BY_NONZERO_WEIGHTS);var i=wn(e,"labels","cosineDistance"),a=wn(t,"predictions","cosineDistance"),s=null;null!=r&&(s=wn(r,"weights","cosineDistance")),te(i.shape,a.shape,"Error in cosineDistance: ");var u=Un(1).sub(i.mul(a).sum(n,!0));return Ol(u,s,o)}}),Pl=On({hingeLoss_:function(e,t,n,r){void 0===r&&(r=Rl.SUM_BY_NONZERO_WEIGHTS);var o=wn(e,"labels","hingeLoss"),i=wn(t,"predictions","hingeLoss"),a=null;null!=n&&(a=wn(n,"weights","hingeLoss")),te(o.shape,i.shape,"Error in hingeLoss: ");var s=Un(1);o=Un(2).mul(o).sub(s);var u=s.sub(o.mul(i)).relu();return Ol(u,a,r)}}),Ll=On({huberLoss_:function(e,t,n,r,o){void 0===r&&(r=1),void 0===o&&(o=Rl.SUM_BY_NONZERO_WEIGHTS);var i=wn(e,"labels","huberLoss"),a=wn(t,"predictions","huberLoss"),s=null;null!=n&&(s=wn(n,"weights","huberLoss")),te(i.shape,a.shape,"Error in huberLoss: ");var u=Un(r),c=a.sub(i).abs(),l=Lu(c,u),d=c.sub(l),h=Un(.5).mul(l.square()).add(u.mul(d));return Ol(h,s,o)}}),zl=On({logLoss_:function(e,t,n,r,o){void 0===r&&(r=1e-7),void 0===o&&(o=Rl.SUM_BY_NONZERO_WEIGHTS);var i=wn(e,"labels","logLoss"),a=wn(t,"predictions","logLoss"),s=null;null!=n&&(s=wn(n,"weights","logLoss")),te(i.shape,a.shape,"Error in logLoss: ");var u=Un(1),c=Un(r),l=i.mul(a.add(c).log()).neg().sub(u.sub(i).mul(u.sub(a).add(c).log()));return Ol(l,s,o)}}),Wl=On({meanSquaredError_:function(e,t,n,r){void 0===r&&(r=Rl.SUM_BY_NONZERO_WEIGHTS);var o=wn(e,"labels","meanSquaredError"),i=wn(t,"predictions","meanSquaredError"),a=null;null!=n&&(a=wn(n,"weights","meanSquaredError")),te(o.shape,i.shape,"Error in meanSquaredError: ");var s=o.squaredDifference(i);return Ol(s,a,r)}}),Ul=On({sigmoidCrossEntropy_:function(e,t,n,r,o){void 0===r&&(r=0),void 0===o&&(o=Rl.SUM_BY_NONZERO_WEIGHTS);var i=wn(e,"multiClassLabels","sigmoidCrossEntropy"),a=wn(t,"logits","sigmoidCrossEntropy"),s=null;if(null!=n&&(s=wn(n,"weights","sigmoidCrossEntropy")),te(i.shape,a.shape,"Error in sigmoidCrossEntropy: "),r>0){var u=Un(r),c=Un(1),l=Un(.5);i=i.mul(c.sub(u)).add(l.mul(u))}var d=function(e,t){var n=wn(e,"labels","sigmoidCrossEntropyWithLogits"),r=wn(t,"logits","sigmoidCrossEntropyWithLogits");te(n.shape,r.shape,"Error in sigmoidCrossEntropyWithLogits: ");var o=r.relu(),i=r.mul(n),a=r.abs().neg().exp().log1p();return o.sub(i).add(a)}(i,a);return Ol(d,s,o)}}),Vl=On({softmaxCrossEntropy_:function(e,t,n,r,o){void 0===r&&(r=0),void 0===o&&(o=Rl.SUM_BY_NONZERO_WEIGHTS);var i=wn(e,"onehotLabels","softmaxCrossEntropy"),a=wn(t,"logits","softmaxCrossEntropy"),s=null;if(null!=n&&(s=wn(n,"weights","softmaxCrossEntropy")),te(i.shape,a.shape,"Error in softmaxCrossEntropy: "),r>0){var u=Un(r),c=Un(1),l=Un(i.shape[1]);i=i.mul(c.sub(u)).add(u.div(l))}var d=function(e,t,n){if(void 0===n&&(n=-1),-1===n&&(n=t.rank-1),n!==t.rank-1)throw Error("Softmax cross entropy along a non-last dimension is not yet supported. Labels / logits was rank "+t.rank+" and dim was "+n);return ao((function(e,t,r){var o=t.logSumExp([n],!0),i=t.toFloat().sub(o);return r([e,i]),{value:i.mul(e).neg().sum([n]),gradFunc:function(e,t){var r=t[0],o=t[1],i=Rn(e.shape,[n]);return[e.reshape(i).mul(r.toFloat().sub(o.exp())),e.reshape(i).mul(o.exp().sub(r.toFloat()))]}}}))(e,t)}(i,a);return Ol(d,s,o)}}),Gl=Object.freeze({get Reduction(){return Rl},absoluteDifference:Bl,computeWeightedLoss:Ol,cosineDistance:Ml,hingeLoss:Pl,huberLoss:Ll,logLoss:zl,meanSquaredError:Wl,sigmoidCrossEntropy:Ul,softmaxCrossEntropy:Vl});function Hl(e,t){return void 0===t&&(t=!1),dt.tidy((function(){if(2!==e.shape.length)throw new Error("qr2d() requires a 2D Tensor, but got a "+e.shape.length+"D Tensor.");for(var n=e.shape[0],r=e.shape[1],o=kr(n),i=e.clone(),a=Gn([[1]],[1,1]),s=a.clone(),u=n>=r?r:n,c=function(e){var t,u=i,c=s,l=o;t=dt.tidy((function(){var t=i.slice([e,e],[n-e,1]),u=t.norm(),c=i.slice([e,e],[1,1]),l=Gn([[-1]]).where(c.greater(0),Gn([[1]])),d=c.sub(l.mul(u)),h=t.div(d);s=1===h.shape[0]?a.clone():a.concat(h.slice([1,0],[h.shape[0]-1,h.shape[1]]),0);var p=l.matMul(d).div(u).neg(),f=i.slice([e,0],[n-e,r]),m=p.mul(s);if(0===e)i=f.sub(m.matMul(s.transpose().matMul(f)));else{var v=f.sub(m.matMul(s.transpose().matMul(f)));i=i.slice([0,0],[e,r]).concat(v,0)}var g=o.slice([0,e],[n,o.shape[1]-e]);if(0===e)o=g.sub(g.matMul(s).matMul(m.transpose()));else{var b=g.sub(g.matMul(s).matMul(m.transpose()));o=o.slice([0,0],[n,e]).concat(b,1)}return[s,i,o]})),s=t[0],i=t[1],o=t[2],An([u,c,l])},l=0;l<u;++l)c(l);return!t&&n>r&&(o=o.slice([0,0],[n,r]),i=i.slice([0,0],[r,r])),[o,i]}))}var jl=On({bandPart_:function(e,t,n){if(t%1!=0)throw new Error("bandPart(): numLower must be an integer, got "+t+".");if(n%1!=0)throw new Error("bandPart(): numUpper must be an integer, got "+n+".");var r=wn(e,"a","bandPart");if(r.rank<2)throw new Error("bandPart(): Rank must be at least 2, got "+r.rank+".");var o=r.shape,i=r.shape.slice(-2),a=i[0],s=i[1];if(!(t<=a))throw new Error("bandPart(): numLower ("+t+") must not be greater than the number of rows ("+a+").");if(!(n<=s))throw new Error("bandPart(): numUpper ("+n+") must not be greater than the number of columns ("+s+").");t<0&&(t=a),n<0&&(n=s);var u=Qn(0,a,1,"int32").reshape([-1,1]),c=Qn(0,s,1,"int32"),l=Ku(u,c),d=Cu(l.lessEqual(Un(+t,"int32")),l.greaterEqual(Un(-n,"int32"))),h=Kn([a,s],r.dtype);return zr(Vr(r.reshape([-1,a,s])).map((function(e){return Eu(d,e,h)}))).reshape(o)}}),ql=On({gramSchmidt_:function(e){var t;if(Array.isArray(e)){t=!1,ee(null!=e&&e.length>0,(function(){return"Gram-Schmidt process: input must not be null, undefined, or empty"}));for(var n=e[0].shape[0],r=function(t){ee(e[t].shape[0]===n,(function(){return"Gram-Schmidt: Non-unique lengths found in the input vectors: ("+e[t].shape[0]+" vs. "+n+")"}))},o=1;o<e.length;++o)r(o)}else t=!0,e=rr(e,e.shape[0],0).map((function(e){return Lr(e,[0])}));ee(e.length<=e[0].shape[0],(function(){return"Gram-Schmidt: Number of vectors ("+e.length+") exceeds number of dimensions ("+e[0].shape[0]+")."}));var i=[],a=e,s=function(e){i.push(dt.tidy((function(){var t=a[e];if(e>0)for(var n=0;n<e;++n){var r=tl(i[n].mulStrict(t)).mul(i[n]);t=t.sub(r)}return t.div(dl(t,"euclidean"))})))};for(o=0;o<e.length;++o)s(o);return t?zr(i,0):i}}),Kl=On({qr_:function(e,t){if(void 0===t&&(t=!1),e.rank<2)throw new Error("qr() requires input tensor to have a rank >= 2, but got rank "+e.rank);if(2===e.rank)return Hl(e,t);var n=e.shape.slice(0,e.shape.length-2).reduce((function(e,t){return e*t})),r=Vr(e.reshape([n,e.shape[e.shape.length-2],e.shape[e.shape.length-1]]),0),o=[],i=[];return r.forEach((function(e){var n=Hl(e,t),r=n[0],a=n[1];o.push(r),i.push(a)})),[zr(o,0).reshape(e.shape),zr(i,0).reshape(e.shape)]}}),Xl=Object.freeze({bandPart:jl,gramSchmidt:ql,qr:Kl});function Ql(e,t,n,r,o,i){null==r&&(r=.5),null==o&&(o=Number.NEGATIVE_INFINITY),null==i&&(i=0);var a=e.shape[0];return n=Math.min(n,a),ee(0<=r&&r<=1,(function(){return"iouThreshold must be in [0, 1], but was '"+r+"'"})),ee(2===e.rank,(function(){return"boxes must be a 2D tensor, but was of rank '"+e.rank+"'"})),ee(4===e.shape[1],(function(){return"boxes must have 4 columns, but 2nd dimension was "+e.shape[1]})),ee(1===t.rank,(function(){return"scores must be a 1D tensor"})),ee(t.shape[0]===a,(function(){return"scores has incompatible shape with boxes. Expected "+a+", but was "+t.shape[0]})),ee(0<=i&&i<=1,(function(){return"softNmsSigma must be in [0, 1], but was '"+i+"'"})),{maxOutputSize:n,iouThreshold:r,scoreThreshold:o,softNmsSigma:i}}var Yl=On({resizeBilinear_:function(e,t,n){void 0===n&&(n=!1);var r=wn(e,"images","resizeBilinear");ee(3===r.rank||4===r.rank,(function(){return"Error in resizeBilinear: x must be rank 3 or 4, but got rank "+r.rank+"."})),ee(2===t.length,(function(){return"Error in resizeBilinear: new shape must 2D, but got shape "+t+"."}));var o=r,i=!1;3===r.rank&&(i=!0,o=r.as4D(1,r.shape[0],r.shape[1],r.shape[2]));var a=t[0],s=t[1],u=dt.runKernelFunc((function(e,t){return t([o]),e.resizeBilinear(o,a,s,n)}),{x:o},(function(e,t){return{x:function(){return dt.runKernelFunc((function(r){return r.resizeBilinearBackprop(e,t[0],n)}),{})}}}),"ResizeBilinear",{alignCorners:n,newHeight:a,newWidth:s});return i?u.as3D(u.shape[1],u.shape[2],u.shape[3]):u}}),$l=On({resizeNearestNeighbor_:function(e,t,n){void 0===n&&(n=!1);var r=wn(e,"images","resizeNearestNeighbor");ee(3===r.rank||4===r.rank,(function(){return"Error in resizeNearestNeighbor: x must be rank 3 or 4, but got rank "+r.rank+"."})),ee(2===t.length,(function(){return"Error in resizeNearestNeighbor: new shape must 2D, but got shape "+t+"."})),ee("float32"===r.dtype||"int32"===r.dtype,(function(){return"`images` must have `int32` or `float32` as dtype"}));var o=r,i=!1;3===r.rank&&(i=!0,o=r.as4D(1,r.shape[0],r.shape[1],r.shape[2]));var a=t[0],s=t[1],u=dt.runKernelFunc((function(e,t){return t([o]),e.resizeNearestNeighbor(o,a,s,n)}),{batchImages:o},(function(e,t){return{batchImages:function(){return dt.runKernelFunc((function(r){return r.resizeNearestNeighborBackprop(e,t[0],n)}),{})}}}));return i?u.as3D(u.shape[1],u.shape[2],u.shape[3]):u}}),Jl=On({nonMaxSuppression_:function(e,t,n,r,o){void 0===r&&(r=.5),void 0===o&&(o=Number.NEGATIVE_INFINITY);var i=wn(e,"boxes","nonMaxSuppression"),a=wn(t,"scores","nonMaxSuppression"),s=Ql(i,a,n,r,o);n=s.maxOutputSize,r=s.iouThreshold,o=s.scoreThreshold;var u={maxOutputSize:n,iouThreshold:r,scoreThreshold:o};return dt.runKernelFunc((function(e){return e.nonMaxSuppression(i,a,n,r,o)}),{boxes:i,scores:a},null,"NonMaxSuppressionV3",u)}}),Zl=On({nonMaxSuppressionWithScore_:function(e,t,n,r,o,i){void 0===r&&(r=.5),void 0===o&&(o=Number.NEGATIVE_INFINITY),void 0===i&&(i=0);var a=wn(e,"boxes","nonMaxSuppression"),s=wn(t,"scores","nonMaxSuppression"),u=Ql(a,s,n,r,o,i),c={maxOutputSize:n=u.maxOutputSize,iouThreshold:r=u.iouThreshold,scoreThreshold:o=u.scoreThreshold,softNmsSigma:i=u.softNmsSigma},l=dt.runKernel("NonMaxSuppressionV5",{boxes:a,scores:s},c);return{selectedIndices:l[0],selectedScores:l[1]}}}),ed=On({cropAndResize_:function(e,t,n,r,o,i){var a=wn(e,"image","cropAndResize"),s=wn(t,"boxes","cropAndResize","float32"),u=wn(n,"boxInd","cropAndResize","int32");o=o||"bilinear",i=i||0;var c=s.shape[0];return ee(4===a.rank,(function(){return"Error in cropAndResize: image must be rank 4,but got rank "+a.rank+"."})),ee(2===s.rank&&4===s.shape[1],(function(){return"Error in cropAndResize: boxes must be have size ["+c+",4] but had shape "+s.shape+"."})),ee(1===u.rank&&u.shape[0]===c,(function(){return"Error in cropAndResize: boxInd must be have size ["+c+"] but had shape "+s.shape+"."})),ee(2===r.length,(function(){return"Error in cropAndResize: cropSize must be of length 2, but got length "+r.length+"."})),ee(r[0]>=1&&r[1]>=1,(function(){return"cropSize must be atleast [1,1], but was "+r})),ee("bilinear"===o||"nearest"===o,(function(){return"method must be bilinear or nearest, but was "+o})),dt.runKernelFunc((function(e,t){return e.cropAndResize(a,s,u,r,o,i)}),{images:a,boxes:s,boxInd:u},null,"CropAndResize",{method:o,extrapolationValue:i,cropSize:r})}}),td=Object.freeze({resizeBilinear:Yl,resizeNearestNeighbor:$l,nonMaxSuppression:Jl,nonMaxSuppressionAsync:function(e,t,n,r,o){return void 0===r&&(r=.5),void 0===o&&(o=Number.NEGATIVE_INFINITY),P(this,void 0,void 0,(function(){var i,a,s,u,c,l,d;return L(this,(function(h){switch(h.label){case 0:return i=wn(e,"boxes","nonMaxSuppressionAsync"),a=wn(t,"scores","nonMaxSuppressionAsync"),s=Ql(i,a,n,r,o),n=s.maxOutputSize,r=s.iouThreshold,o=s.scoreThreshold,[4,Promise.all([i.data(),a.data()])];case 1:return u=h.sent(),c=u[0],l=u[1],d=Po(c,l,n,r,o),i!==e&&i.dispose(),a!==t&&a.dispose(),[2,d]}}))}))},nonMaxSuppressionWithScore:Zl,nonMaxSuppressionWithScoreAsync:function(e,t,n,r,o,i){return void 0===r&&(r=.5),void 0===o&&(o=Number.NEGATIVE_INFINITY),void 0===i&&(i=0),P(this,void 0,void 0,(function(){var a,s,u,c,l,d,h;return L(this,(function(p){switch(p.label){case 0:return a=wn(e,"boxes","nonMaxSuppressionAsync"),s=wn(t,"scores","nonMaxSuppressionAsync"),u=Ql(a,s,n,r,o,i),n=u.maxOutputSize,r=u.iouThreshold,o=u.scoreThreshold,i=u.softNmsSigma,[4,Promise.all([a.data(),s.data()])];case 1:return c=p.sent(),l=c[0],d=c[1],h=Lo(l,d,n,r,o,i),a!==e&&a.dispose(),s!==t&&s.dispose(),[2,h]}}))}))},cropAndResize:ed}),nd=function(e,t){return!(e>0)||"linear"===t},rd=function(e,t,n){if(null==n||"linear"===n)return e;if("relu"===n)return e.mul(t.step());throw new Error("Gradient for activation "+n+" has not been implemented yet.")},od=function(e,t){var n=t,r=fo(e.shape,t.shape);return r.length>0&&(n=n.sum(r)),n.reshape(e.shape)},id=function(e,t,n){if("linear"===t)return e;if("relu"===t)return al(e);if("elu"===t)return rl(e);if("relu6"===t)return sl(e);if("prelu"===t)return il(e,n);throw new Error("Unknown fused activation "+t+".")},ad=On({fusedMatMul_:function(e){var t,n=e.a,r=e.b,o=e.transposeA,i=void 0!==o&&o,a=e.transposeB,s=void 0!==a&&a,u=e.bias,c=e.activation,l=void 0===c?"linear":c,d=e.preluActivationWeights;if(!1===nd(dt.state.gradientDepth,l)){var h=_c(n,r,i,s);return null!=u&&(h=Ru(h,u)),id(h,l,d)}var p=wn(n,"a","fused matMul"),f=wn(r,"b","fused matMul");t=it(p,f),p=t[0],f=t[1];var m=i?p.shape[p.rank-2]:p.shape[p.rank-1],v=s?f.shape[f.rank-1]:f.shape[f.rank-2],g=i?p.shape[p.rank-1]:p.shape[p.rank-2],b=s?f.shape[f.rank-2]:f.shape[f.rank-1],A=p.shape.slice(0,-2),y=f.shape.slice(0,-2),x=oe(A),C=oe(y);ee(p.rank>=2&&f.rank>=2&&p.rank===f.rank,(function(){return"Error in fused matMul: inputs must have the same rank of at least 2, got ranks "+p.rank+" and "+f.rank+"."})),ee(ie(A,y),(function(){return"Error in fused matMul: outer dimensions ("+A+") and ("+y+") of Tensors with shapes "+p.shape+" and "+f.shape+" must match."})),ee(m===v,(function(){return"Error in fused matMul: inner shapes ("+m+") and ("+v+") of Tensors with shapes "+p.shape+" and "+f.shape+" and transposeA="+i+" and transposeB="+s+" must match."}));var w,k,_=p.shape.slice(0,-2).concat([g,b]),E=i?p.as3D(x,m,g):p.as3D(x,g,m),I=s?f.as3D(C,b,v):f.as3D(C,v,b);null!=u&&mo(_,(w=it(w=wn(u,"bias","fused matMul"),p)[0]).shape),null!=d&&(k=wn(d,"prelu weights","fused matMul"));var R={a:E,b:I};null!=u&&(R.bias=w),null!=d&&(R.preluActivationWeights=k);var S=[E,I];return dt.runKernelFunc((function(e,t){var n=e.fusedBatchMatMul({a:E,b:I,transposeA:i,transposeB:s,bias:w,activation:l,preluActivationWeights:k});return t([E,I,n]),n}),R,(function(e,t){var n=t[0],r=t[1],o=t[2],a=rd(e,o,l),c={};return null!=u&&(c={bias:function(){return od(w,a)}}),i||s?!i&&s?Object.assign({a:function(){return a.matMul(r,!1,!1)},b:function(){return a.matMul(n,!0,!1)}},c):i&&!s?Object.assign({a:function(){return r.matMul(a,!1,!0)},b:function(){return n.matMul(a,!1,!1)}},c):Object.assign({a:function(){return r.matMul(a,!0,!0)},b:function(){return a.matMul(n,!0,!0)}},c):Object.assign({a:function(){return a.matMul(r,!1,!0)},b:function(){return n.matMul(a,!0,!1)}},c)}),"_FusedMatMul",{transposeA:i,transposeB:s,activation:l},S,[!0]).reshape(_)}}),sd=On({fusedConv2d_:function(e){var t=e.x,n=e.filter,r=e.strides,o=e.pad,i=e.dataFormat,a=void 0===i?"NHWC":i,s=e.dilations,u=void 0===s?[1,1]:s,c=e.dimRoundingMode,l=e.bias,d=e.activation,h=void 0===d?"linear":d,p=e.preluActivationWeights;if(h=h||"linear",!1===nd(dt.state.gradientDepth,h)){var f=mc(t,n,r,o,a,u,c);return null!=l&&(f=Ru(f,l)),id(f,h,p)}var m=wn(t,"x","conv2d"),v=wn(n,"filter","conv2d"),g=m,b=!1;3===m.rank&&(b=!0,g=m.as4D(1,m.shape[0],m.shape[1],m.shape[2])),ee(4===g.rank,(function(){return"Error in fused conv2d: input must be rank 4, but got rank "+g.rank+"."})),ee(4===v.rank,(function(){return"Error in fused conv2d: filter must be rank 4, but got rank "+v.rank+"."})),null!=c&&ee(ae(o),(function(){return"Error in fused conv2d: pad must be an integer when using, dimRoundingMode "+c+" but got pad "+o+"."})),ee(g.shape[3]===v.shape[2],(function(){return"Error in conv2d: depth of input ("+g.shape[3]+") must match input depth for filter "+v.shape[2]+"."})),ee(Eo(r,u),(function(){return"Error in conv2D: Either strides or dilations must be 1. Got strides "+r+" and dilations '"+u+"'"})),ee("NHWC"===a,(function(){return"Error in conv2d: got dataFormat of "+a+" but only NHWC is currently supported."}));var A,y,x=bo(g.shape,v.shape,r,u,o,c);null!=l&&(A=it(A=wn(l,"bias","fused conv2d"),m)[0],mo(x.outShape,A.shape)),null!=p&&(y=wn(p,"prelu weights","fused conv2d"));var C={x:g,filter:v};null!=l&&(C.bias=A),null!=p&&(C.preluActivationWeights=y);var w=[v,g],k=dt.runKernelFunc((function(e,t){var n=e.fusedConv2d({input:g,filter:v,convInfo:x,bias:A,activation:h,preluActivationWeights:y});return t([v,g,n]),n}),C,(function(e,t){var n=t,i=n[0],a=n[1],s=n[2],c=rd(e,s,h);ee(_o(u),(function(){return"Error in gradient of fused conv2D: dilation rates greater than 1 are not yet supported in gradients. Got dilations '"+u+"'"}));var d={};return null!=l&&(d={bias:function(){return od(A,c)}}),Object.assign({x:function(){return bc(a.shape,c,i,r,o)},filter:function(){return gc(a,c,i.shape,r,o)}},d)}),"FusedConv2D",{convInfo:x,activation:h},w,[!0]);return b?k.as3D(k.shape[1],k.shape[2],k.shape[3]):k}}),ud=On({fusedDepthwiseConv2d_:function(e){var t=e.x,n=e.filter,r=e.strides,o=e.pad,i=e.dataFormat,a=void 0===i?"NHWC":i,s=e.dilations,u=void 0===s?[1,1]:s,c=e.dimRoundingMode,l=e.bias,d=e.activation,h=void 0===d?"linear":d,p=e.preluActivationWeights;if(!1===nd(dt.state.gradientDepth,h)){var f=Ac(t,n,r,o,a,u,c);return null!=l&&(f=Ru(f,l)),id(f,h,p)}var m=wn(t,"x","depthwiseConv2d"),v=wn(n,"filter","depthwiseConv2d"),g=m,b=!1;3===m.rank&&(b=!0,g=m.as4D(1,m.shape[0],m.shape[1],m.shape[2])),ee(4===g.rank,(function(){return"Error in fused depthwiseConv2d: input must be rank 4, but got rank "+g.rank+"."})),ee(4===v.rank,(function(){return"Error in fused depthwiseConv2d: filter must be rank 4, but got rank "+v.rank+"."})),ee(g.shape[3]===v.shape[2],(function(){return"Error in fused depthwiseConv2d: number of input channels ("+g.shape[3]+") must match the inChannels dimension in filter "+v.shape[2]+"."})),null==u&&(u=[1,1]),ee(Eo(r,u),(function(){return"Error in fused depthwiseConv2d: Either strides or dilations must be 1. Got strides "+r+" and dilations '"+u+"'"})),null!=c&&ee(ae(o),(function(){return"Error in fused depthwiseConv2d: pad must be an integer when using dimRoundingMode "+c+" but got pad "+o+"."}));var A,y,x=bo(g.shape,v.shape,r,u,o,c,!0);null!=l&&(A=it(A=wn(l,"bias","fused conv2d"),m)[0],mo(x.outShape,A.shape)),null!=p&&(y=wn(p,"prelu weights","fused depthwiseConv2d"));var C={x:g,filter:v};null!=l&&(C.bias=A),null!=p&&(C.preluActivationWeights=y);var w=[v,g],k=dt.runKernelFunc((function(e,t){var n=e.fusedDepthwiseConv2D({input:g,filter:v,convInfo:x,bias:A,activation:h,preluActivationWeights:y});return t([v,g,n]),n}),C,(function(e,t){ee(_o(u),(function(){return"Error in gradient of fused depthwiseConv2d: dilation rates greater than 1 are not yet supported. Got dilations '"+u+"'"}));var n=t[0],r=t[1],o=t[2],i=rd(e,o,h),a={};return null!=l&&(a={bias:function(){return od(A,i)}}),Object.assign({x:function(){return yc(r.shape,i,n,x)},filter:function(){return xc(r,i,n.shape,x)}},a)}),"FusedDepthwiseConv2D",{convInfo:x,activation:h},w,[!0]);return b?k.as3D(k.shape[1],k.shape[2],k.shape[3]):k}}),cd=Object.freeze({matMul:ad,conv2d:sd,depthwiseConv2d:ud}),ld=Object.freeze({image:td,linalg:Xl,losses:Gl,spectral:Cl,fused:cd,signal:Nl,square:_s,squaredDifference:Is,conv1d:fc,conv2d:mc,conv3d:vc,depthwiseConv2d:Ac,separableConv2d:Cc,conv2dTranspose:wc,conv3dTranspose:kc,op:On,batchNormalization2d:fu,batchNormalization3d:mu,batchNormalization4d:vu,batchNormalization:gu,batchNorm:bu,batchNorm2d:Au,batchNorm3d:yu,batchNorm4d:xu,booleanMaskAsync:function(e,t,n){return P(this,void 0,void 0,(function(){var r,o,i,a,s,u,c,l,d,h,p,f,m;return L(this,(function(v){switch(v.label){case 0:for(r=wn(e,"tensor","boolMask"),o=wn(t,"mask","boolMask","bool"),i=null==n?0:n,a=o.rank,s=r.shape,ee(a>0,(function(){return"mask cannot be scalar"})),te(s.slice(i,i+a),o.shape,"mask's shape must match the first K dimensions of tensor's shape,"),u=1,c=i;c<i+a;c++)u*=s[c];return l=s.slice(0,i).concat([u],s.slice(i+a)),d=r.reshape(l),h=o.reshape([-1]),[4,Iu(h)];case 1:return p=v.sent(),f=p.squeeze([1]),m=cc(d,f,i),e!==r&&r.dispose(),t!==o&&o.dispose(),f.dispose(),d.dispose(),h.dispose(),p.dispose(),[2,m]}}))}))},complex:Mn,real:Pn,imag:Ln,concat:Jn,concat1d:Zn,concat2d:er,concat3d:tr,concat4d:nr,split:rr,matMul:_c,dot:Ec,outerProduct:Ic,reverse:Rc,reverse1d:Sc,reverse2d:Tc,reverse3d:Dc,reverse4d:Fc,maxPool:Oc,avgPool:Mc,pool:Pc,maxPool3d:Lc,avgPool3d:zc,slice:Wc,slice1d:Uc,slice2d:Vc,slice3d:Gc,slice4d:Hc,abs:Rs,acos:Ss,acosh:Ts,asin:Ds,asinh:Fs,atan:Ns,atanh:Bs,ceil:Os,clipByValue:Ms,cos:Ps,cosh:Ls,erf:zs,exp:Ws,expm1:Us,floor:Vs,log:Gs,log1p:Hs,logSigmoid:js,neg:qs,reciprocal:Ks,round:Xs,rsqrt:Qs,sigmoid:Ys,sign:$s,isNaN:Js,isInf:Zs,isFinite:eu,sin:tu,sinh:nu,softplus:ru,sqrt:ou,step:iu,tan:au,tanh:su,all:qc,any:Kc,argMax:Xc,argMin:Qc,logSumExp:Yc,max:$c,mean:Jc,min:Zc,moments:el,sum:tl,prod:nl,equal:Qu,equalStrict:Yu,greater:$u,greaterEqual:Ju,greaterEqualStrict:Zu,greaterStrict:ec,less:tc,lessEqual:nc,lessEqualStrict:rc,lessStrict:oc,notEqual:ic,notEqualStrict:ac,add:Ru,addN:Su,addStrict:Tu,atan2:Du,div:Fu,divNoNan:Nu,divStrict:Bu,floorDiv:Ou,maximum:Mu,maximumStrict:Pu,minimum:Lu,minimumStrict:zu,mod:Wu,modStrict:Uu,mul:Vu,mulStrict:Gu,pow:Hu,powStrict:ju,squaredDifferenceStrict:qu,sub:Ku,subStrict:Xu,elu:rl,leakyRelu:ol,prelu:il,relu:al,relu6:sl,selu:ul,logicalAnd:Cu,logicalNot:wu,logicalOr:ku,logicalXor:_u,where:Eu,whereAsync:Iu,buffer:vr,print:function(e,t){void 0===t&&(t=!1),console.log(e.toString(t))},batchToSpaceND:gr,broadcastTo:br,cast:Ar,clone:yr,cumsum:xr,depthToSpace:Cr,expandDims:wr,eye:kr,multinomial:_r,oneHot:Er,pad:Ir,pad1d:Rr,pad2d:Sr,pad3d:Tr,pad4d:Dr,rand:Fr,randomNormal:Nr,randomGamma:Br,randomUniform:Or,reshape:Mr,spaceToBatchND:Pr,squeeze:Lr,stack:zr,tile:Wr,truncatedNormal:Ur,unstack:Vr,setdiff1dAsync:function(e,t){return P(this,void 0,void 0,(function(){var n,r,o,i,a,s,u,c,l,d;return L(this,(function(h){switch(h.label){case 0:return n=wn(e,"x","setdiff1d"),r=wn(t,"y","setdiff1d"),ee(n.dtype===r.dtype,(function(){return"x and y should have the same dtype, but got x ("+n.dtype+") and y ("+r.dtype+")."})),ee(1===n.rank,(function(){return"x should be 1D tensor, but got x ("+n.shape+")."})),ee(1===r.rank,(function(){return"y should be 1D tensor, but got y ("+r.shape+")."})),[4,n.data()];case 1:return o=h.sent(),[4,r.data()];case 2:for(i=h.sent(),a=new Set(i),s=0,l=0;l<o.length;l++)a.has(o[l])||s++;for(u=new He([s],n.dtype),c=new He([s],"int32"),l=0,d=0;l<o.length;l++)a.has(o[l])||(u.values[d]=o[l],c.values[d]=l,d++);return[2,[u.toTensor(),c.toTensor()]]}}))}))},fill:Xn,linspace:function(e,t,n){if(n<=0)throw new Error("The number of values should be positive.");return dt.runKernelFunc((function(r){return r.linspace(e,t,n)}),{})},ones:qn,range:Qn,scalar:Un,tensor:zn,tensor1d:Vn,tensor2d:Gn,tensor3d:Hn,tensor4d:jn,tensor5d:function(e,t,n){if(ne(e),null!=t&&5!==t.length)throw new Error("tensor5d() requires shape to have five numbers");var r=xn(e,n);if(5!==r.length&&1!==r.length)throw new Error("tensor5d() requires values to be number[][][][][] or flat/TypedArray");if(1===r.length&&null==t)throw new Error("tensor5d() requires shape to be provided when `values` are a flat array");return Wn(e,t,r,n)},tensor6d:function(e,t,n){if(ne(e),null!=t&&6!==t.length)throw new Error("tensor6d() requires shape to have six numbers");var r=xn(e,n);if(6!==r.length&&1!==r.length)throw new Error("tensor6d() requires values to be number[][][][][][] or flat/TypedArray");if(1===r.length&&null==t)throw new Error("tensor6d() requires shape to be provided when `values` are a flat array");return Wn(e,t=t||r,r,n)},variable:function(e,t,n,r){return void 0===t&&(t=!0),dt.makeVariable(e,t,n,r)},zeros:Kn,onesLike:Yn,zerosLike:$n,transpose:cl,softmax:so,logSoftmax:uo,localResponseNormalization:ll,norm:dl,gather:cc,unsortedSegmentSum:lc,basicLSTMCell:hl,multiRNNCell:pl,movingAverage:fl,stridedSlice:ml,topk:vl,scatterND:gl,fft:bl,ifft:Al,rfft:yl,irfft:xl,sparseToDense:wl,gatherND:kl,diag:_l,dropout:El,hannWindow:Sl,hammingWindow:Tl,frame:Dl,stft:Fl,inTopKAsync:function(e,t,n){return void 0===n&&(n=1),P(this,void 0,void 0,(function(){var r,o,i,a,s,u,c,l,d,h,p,f,m,v;return L(this,(function(g){switch(g.label){case 0:return r=wn(e,"predictions","inTopK"),o=wn(t,"targets","inTopK"),ee(r.rank>1,(function(){return"inTopK() expects the predictions to be of rank 2 or higher, but got "+r.rank})),ee(r.rank-1===o.rank,(function(){return"predictions rank should be 1 larger than targets rank, but got predictions rank "+r.rank+" and targets rank "+o.rank})),te(r.shape.slice(0,r.shape.length-1),o.shape,"predictions's shape should be align with the targets' shape, except the last dimension."),i=r.shape[r.shape.length-1],ee(n>0&&n<=i,(function(){return"'k' passed to inTopK() must be > 0 && <= the predictions last dimension ("+i+"), but got "+n})),[4,r.data()];case 1:return a=g.sent(),[4,o.data()];case 2:for(s=g.sent(),u=[a.length/i,i],l=u[1],d=fe("bool",c=u[0]),h=0;h<c;h++){for(p=h*l,f=a.subarray(p,p+l),m=[],v=0;v<f.length;v++)m.push({value:f[v],index:v});for(m.sort((function(e,t){return t.value-e.value})),d[h]=0,v=0;v<n;v++)if(m[v].index===s[h]){d[h]=1;break}}return e!==r&&r.dispose(),t!==o&&o.dispose(),[2,zn(d,o.shape,"bool")]}}))}))}});function dd(e,t){Array.isArray(e)||(e=[e]),e.forEach((function(e){null!=e&&ee("complex64"!==e.dtype,(function(){return t+" does not support complex64 tensors."}))}))}function hd(e,t,n,r){if("linear"===n)return e.linear(t);if("relu"===n)return e.relu(t);if("elu"===n)return e.elu(t);if("relu6"===n)return e.relu6(t);if("prelu"===n)return e.prelu(t,r);throw new Error("Activation "+n+" has not been implemented for the CPU backend.")}var pd=function(e){function t(){var t=e.call(this)||this;return t.blockSize=48,t.firstUse=!0,t.data=new co(t,dt),t}return M(t,e),t.prototype.write=function(e,t,n){this.firstUse&&(this.firstUse=!1,U().get("IS_NODE")&&yn("\n============================\nHi there 👋. Looks like you are running TensorFlow.js in Node.js. To speed things up dramatically, install our node backend, which binds to TensorFlow C++, by running npm i @tensorflow/tfjs-node, or npm i @tensorflow/tfjs-node-gpu if you have CUDA. Then call require('@tensorflow/tfjs-node'); (-gpu suffix for CUDA) at the start of your program. Visit https://github.com/tensorflow/tfjs-node for more details.\n============================"));var r={};return this.data.set(r,{values:e,dtype:n}),r},t.prototype.move=function(e,t,n,r){this.data.set(e,{values:t,dtype:r})},t.prototype.numDataIds=function(){return this.data.numDataIds()},t.prototype.read=function(e){return P(this,void 0,void 0,(function(){return L(this,(function(t){return[2,this.readSync(e)]}))}))},t.prototype.readSync=function(e){var t=this.data.get(e),n=t.dtype,r=t.complexTensors;return"complex64"===n?Do(this.readSync(r.real.dataId),this.readSync(r.imag.dataId)):this.data.get(e).values},t.prototype.bufferSync=function(e){var t=this.readSync(e.dataId),n=t;if("string"===e.dtype)try{n=t.map((function(e){return Me(e)}))}catch(e){throw new Error("Failed to decode encoded string bytes into utf-8")}return vr(e.shape,e.dtype,n)},t.prototype.makeOutput=function(e,t,n){var r=this.write(e,t,n);return dt.makeTensorFromDataId(r,t,n,this)},t.prototype.disposeData=function(e){if(this.data.has(e)){var t=this.data.get(e).complexTensors;null!=t&&(t.real.dispose(),t.imag.dispose()),this.data.delete(e)}},t.prototype.time=function(e){return P(this,void 0,void 0,(function(){var t;return L(this,(function(n){return t=Ne(),e(),[2,{kernelMs:Ne()-t}]}))}))},t.prototype.memory=function(){return{unreliable:!0,reasons:["The reported memory is an upper bound. Due to automatic garbage collection, the true allocated memory may be less."]}},t.prototype.complex=function(e,t){var n=this.makeOutput(null,e.shape,"complex64");return this.data.get(n.dataId).complexTensors={real:dt.keep(e.clone()),imag:dt.keep(t.clone())},n},t.prototype.real=function(e){return this.data.get(e.dataId).complexTensors.real.clone()},t.prototype.imag=function(e){return this.data.get(e.dataId).complexTensors.imag.clone()},t.prototype.slice=function(e,t,n){if(dd(e,"slice"),oo(e.shape,t,n)){var r=io(t,e.strides),o=oe(n);return zn(this.readSync(e.dataId).subarray(r,r+o),n,e.dtype)}for(var i=vr(n,e.dtype),a=this.bufferSync(e),s=0;s<i.size;++s){var u=i.indexToLoc(s).map((function(e,n){return e+t[n]}));i.values[s]=a.get.apply(a,u)}return i.toTensor()},t.prototype.stridedSlice=function(e,t,n,r){dd(e,"stridedSlice");var o=to(t,n,r);if(o.some((function(e){return 0===e})))return zn([],o);for(var i=vr(o,e.dtype),a=this.bufferSync(e),s=0;s<i.size;s++){for(var u=i.indexToLoc(s),c=new Array(u.length),l=0;l<c.length;l++)c[l]=u[l]*r[l]+t[l];i.set.apply(i,[a.get.apply(a,c)].concat(u))}return i.toTensor()},t.prototype.diag=function(e){for(var t=this.readSync(e.dataId),n=vr([e.size,e.size],e.dtype),r=n.values,o=0;o<t.length;o++)r[o*e.size+o]=t[o];return n.toTensor()},t.prototype.unstack=function(e,t){for(var n=e.shape[t],r=new Array(e.rank-1),o=0,i=0;i<e.rank;i++)i!==t&&(r[o++]=e.shape[i]);var a=new Array(e.rank).fill(0),s=e.shape.slice();s[t]=1;var u=new Array(n);for(i=0;i<u.length;i++)a[t]=i,u[i]=this.slice(e,a,s).reshape(r);return u},t.prototype.reverse=function(e,t){dd(e,"reverse");for(var n=vr(e.shape,e.dtype),r=this.bufferSync(e),o=function(o){var i=n.indexToLoc(o),a=i.slice();t.forEach((function(t){return a[t]=e.shape[t]-1-a[t]})),n.set.apply(n,[r.get.apply(r,a)].concat(i))},i=0;i<n.size;i++)o(i);return n.toTensor()},t.prototype.concat=function(e,t){var n=this;if("complex64"===e[0].dtype){var r=e.map((function(e){return Pn(e)})),o=e.map((function(e){return Ln(e)}));return Mn(this.concat(r,t),this.concat(o,t))}var i=e.map((function(e){var n=oe(e.shape.slice(t));return e.as2D(-1,n)})),a=Bn(i.map((function(e){return e.shape})),1),s=vr(a,e[0].dtype).values;if(1===i[0].shape[0]){var u=0;i.forEach((function(e){s.set(n.readSync(e.dataId),u),u+=e.size}))}else{var c=0;i.forEach((function(e){for(var t=n.readSync(e.dataId),r=0,o=0;o<e.shape[0];++o)for(var i=o*a[1]+c,u=0;u<e.shape[1];++u)s[i+u]=t[r++];c+=e.shape[1]}))}var l=Bn(e.map((function(e){return e.shape})),t);return zn(s,l,e[0].dtype)},t.prototype.neg=function(e){return dd(e,"neg"),this.multiply(Un(-1),e)},t.prototype.add=function(e,t){return"complex64"===e.dtype||"complex64"===t.dtype?this.broadcastedBinaryComplexOp(e.cast("complex64"),t.cast("complex64"),(function(e,t,n,r){return{real:e+n,imag:t+r}})):this.broadcastedBinaryOp(e,t,rt(e.dtype,t.dtype),(function(e,t){return e+t}))},t.prototype.addN=function(e){var t=this;dd(e,"addN");for(var n=e.map((function(e){return t.readSync(e.dataId)})),r=vr(e[0].shape,e[0].dtype),o=r.values,i=0;i<e.length;i++)for(var a=n[i],s=0;s<o.length;s++)o[s]+=a[s];return r.toTensor()},t.prototype.softmax=function(e,t){var n=he([t],e.shape),r=this.max(e,n),o=Rn(r.shape,n),i=this.subtract(e,r.reshape(o)),a=this.exp(i),s=this.sum(a,n).reshape(o);return this.realDivide(a,s)},t.prototype.subtract=function(e,t){return"complex64"===e.dtype||"complex64"===t.dtype?this.broadcastedBinaryComplexOp(e.cast("complex64"),t.cast("complex64"),(function(e,t,n,r){return{real:e-n,imag:t-r}})):this.broadcastedBinaryOp(e,t,rt(e.dtype,t.dtype),(function(e,t){return e-t}))},t.prototype.pow=function(e,t){return dd([e,t],"pow"),this.broadcastedBinaryOp(e,t,e.dtype,(function(e,t){return Math.pow(e,t)}))},t.prototype.batchMatMul=function(e,t,n,r){dd([e,t],"matMul");for(var o=n?e.shape[1]:e.shape[2],i=n?e.shape[2]:e.shape[1],a=r?t.shape[1]:t.shape[2],s=e.shape[0],u=this.readSync(e.dataId),c=this.readSync(t.dataId),l=n?[e.strides[0],1,e.strides[1]]:[e.strides[0],e.strides[1],1],d=l[0],h=l[1],p=l[2],f=r?[1,t.strides[1],t.strides[0]]:[t.strides[1],1,t.strides[0]],m=f[0],v=f[1],g=f[2],b=i*a,A=vr([s,i,a],e.dtype),y=A.values,x=this.blockSize,C=0;C<s;C++)for(var w=0;w<i;w+=x)for(var k=0;k<a;k+=x)for(var _=0;_<o;_+=x)for(var E=Math.min(w+x,i),I=Math.min(k+x,a),R=Math.min(_+x,o),S=w;S<E;S++)for(var T=k;T<I;T++){for(var D=0,F=_;F<R;F++)D+=u[C*d+S*h+F*p]*c[F*m+T*v+C*g];y[C*b+(S*a+T)]+=D}return A.toTensor()},t.prototype.fusedBatchMatMul=function(e){var t=e.a,n=e.b,r=e.transposeA,o=e.transposeB,i=e.bias,a=e.activation,s=e.preluActivationWeights,u=this.batchMatMul(t,n,r,o);return i&&(u=this.add(u,i)),a&&(u=hd(this,u,a,s)),u},t.prototype.multiply=function(e,t){return"complex64"===e.dtype||"complex64"===t.dtype?this.broadcastedBinaryComplexOp(e.cast("complex64"),t.cast("complex64"),(function(e,t,n,r){return{real:e*n-t*r,imag:e*r+t*n}})):this.broadcastedBinaryOp(e,t,rt(e.dtype,t.dtype),(function(e,t){return e*t}))},t.prototype.realDivide=function(e,t){return dd([e,t],"realDivide"),this.broadcastedBinaryOp(e,t,"float32",(function(e,t){return e/t}))},t.prototype.floorDiv=function(e,t){return dd([e,t],"floorDiv"),this.broadcastedBinaryOp(e,t,"int32",(function(e,t){return Math.floor(e/t)}))},t.prototype.sum=function(e,t){dd(e,"sum"),Sn("sum",t,e.rank);for(var n=In(e.shape,t),r=n[0],o=n[1],i=Kn(r,rt(e.dtype,"int32")),a=oe(o),s=this.readSync(i.dataId),u=this.readSync(e.dataId),c=0;c<s.length;++c){for(var l=c*a,d=0,h=0;h<a;++h)d+=u[l+h];s[c]=d}return i},t.prototype.prod=function(e,t){dd(e,"sum");for(var n=In(e.shape,t),r=n[0],o=n[1],i=Kn(r,rt(e.dtype,"int32")),a=oe(o),s=this.readSync(i.dataId),u=this.readSync(e.dataId),c=0;c<s.length;++c){for(var l=c*a,d=1,h=0;h<a;++h)d*=u[l+h];s[c]=d}return i},t.prototype.unsortedSegmentSum=function(e,t,n){dd(e,"unsortedSegmentSum");for(var r=[],o=e.rank-t.rank,i=0;i<o;++i)t=t.expandDims(i+1);for(i=0;i<n;++i){var a=Un(i,"int32"),s=Qu(a,t).asType("float32").mul(e).sum(0);r.push(s)}return zr(r)},t.prototype.argMin=function(e,t){dd(e,"argMin");var n=[t];Sn("argMin",n,e.rank);for(var r=In(e.shape,n),o=r[0],i=r[1],a=Kn(o,"int32"),s=oe(i),u=this.readSync(a.dataId),c=this.readSync(e.dataId),l=0;l<u.length;++l){for(var d=l*s,h=c[d],p=0,f=0;f<s;++f){var m=c[d+f];m<h&&(h=m,p=f)}u[l]=p}return a},t.prototype.argMax=function(e,t){dd(e,"argMax");var n=[t];Sn("argMax",n,e.rank);for(var r=In(e.shape,n),o=r[0],i=r[1],a=Kn(o,"int32"),s=oe(i),u=this.readSync(a.dataId),c=this.readSync(e.dataId),l=0;l<u.length;++l){for(var d=l*s,h=c[d],p=0,f=0;f<s;++f){var m=c[d+f];m>h&&(h=m,p=f)}u[l]=p}return a},t.prototype.cumsum=function(e,t,n,r){if(dd(e,"cumsum"),t!==e.rank-1)throw new Error("backend.cumsum in CPU expects an inner-most axis="+(e.rank-1)+" but got axis="+t);for(var o=rt(e.dtype,"int32"),i=Kn(e.shape,o),a=this.readSync(i.dataId),s=this.readSync(e.dataId),u=e.shape[e.rank-1],c=r?function(e,t){return e+u-t-1}:function(e,t){return e+t},l=0;l<s.length;l+=u)for(var d=0;d<u;d++){var h=c(l,d);if(0===d)a[h]=n?0:s[h];else{var p=c(l,d-1);a[h]=n?s[p]+a[p]:s[h]+a[p]}}return i},t.prototype.equal=function(e,t){return dd([e,t],"equal"),this.broadcastedBinaryOp(e,t,"bool",(function(e,t){return e===t?1:0}))},t.prototype.notEqual=function(e,t){return dd([e,t],"notEqual"),this.broadcastedBinaryOp(e,t,"bool",(function(e,t){return e!==t?1:0}))},t.prototype.less=function(e,t){return dd([e,t],"less"),this.broadcastedBinaryOp(e,t,"bool",(function(e,t){return e<t?1:0}))},t.prototype.lessEqual=function(e,t){return dd([e,t],"lessEqual"),this.broadcastedBinaryOp(e,t,"bool",(function(e,t){return e<=t?1:0}))},t.prototype.greater=function(e,t){return dd([e,t],"greater"),this.broadcastedBinaryOp(e,t,"bool",(function(e,t){return e>t?1:0}))},t.prototype.greaterEqual=function(e,t){return dd([e,t],"greaterEqual"),this.broadcastedBinaryOp(e,t,"bool",(function(e,t){return e>=t?1:0}))},t.prototype.logicalNot=function(e){dd(e,"logicalNot");for(var t=this.readSync(e.dataId),n=new Uint8Array(t.length),r=0;r<t.length;++r)n[r]=t[r]?0:1;return this.makeOutput(n,e.shape,"bool")},t.prototype.logicalAnd=function(e,t){return dd([e,t],"logicalAnd"),this.broadcastedBinaryOp(e,t,"bool",(function(e,t){return e&&t}))},t.prototype.logicalOr=function(e,t){return dd([e,t],"logicalOr"),this.broadcastedBinaryOp(e,t,"bool",(function(e,t){return e||t}))},t.prototype.select=function(e,t,n){dd([e,t,n],"select");for(var r=this.readSync(e.dataId),o=this.readSync(t.dataId),i=this.readSync(n.dataId),a=Kn(t.shape,rt(t.dtype,n.dtype)),s=this.readSync(a.dataId),u=0,c=0===e.rank||e.rank>1||1===t.rank?1:oe(t.shape.slice(1)),l=0;l<r.length;l++)for(var d=0;d<c;d++)1===r[l]?s[u++]=o[l]:s[u++]=i[l];return a},t.prototype.where=function(e){dd([e],"where");var t=this.readSync(e.dataId);return qo(e.shape,t)},t.prototype.topk=function(e,t,n){return dd(e,"topk"),jo(this.readSync(e.dataId),e.shape,e.dtype,t)},t.prototype.min=function(e,t){dd(e,"min"),Sn("min",t,e.rank);for(var n=In(e.shape,t),r=n[0],o=n[1],i=Kn(r,e.dtype),a=oe(o),s=this.readSync(i.dataId),u=this.readSync(e.dataId),c=0;c<s.length;++c){for(var l=c*a,d=u[l],h=0;h<a;++h){var p=u[l+h];p<d&&(d=p)}s[c]=d}return i},t.prototype.minimum=function(e,t){return dd([e,t],"minimum"),this.broadcastedBinaryOp(e,t,e.dtype,(function(e,t){return Math.min(e,t)}))},t.prototype.mod=function(e,t){return dd([e,t],"mod"),this.broadcastedBinaryOp(e,t,e.dtype,(function(e,t){var n=e%t;return e<0&&t<0||e>=0&&t>=0?n:(n+t)%t}))},t.prototype.max=function(e,t){dd(e,"max"),Sn("max",t,e.rank);for(var n=In(e.shape,t),r=n[0],o=n[1],i=Kn(r,e.dtype),a=oe(o),s=this.readSync(i.dataId),u=this.readSync(e.dataId),c=0;c<s.length;++c){for(var l=c*a,d=u[l],h=0;h<a;++h){var p=u[l+h];p>d&&(d=p)}s[c]=d}return i},t.prototype.maximum=function(e,t){return dd([e,t],"maximum"),this.broadcastedBinaryOp(e,t,e.dtype,(function(e,t){return Math.max(e,t)}))},t.prototype.all=function(e,t){dd(e,"all"),Sn("all",t,e.rank);for(var n=In(e.shape,t),r=n[0],o=n[1],i=Kn(r,e.dtype),a=oe(o),s=this.readSync(i.dataId),u=this.readSync(e.dataId),c=0;c<s.length;++c){for(var l=c*a,d=u[l],h=0;h<a;++h){var p=u[l+h];d=d&&p}s[c]=d}return i},t.prototype.any=function(e,t){dd(e,"any"),Sn("any",t,e.rank);for(var n=In(e.shape,t),r=n[0],o=n[1],i=Kn(r,e.dtype),a=oe(o),s=this.readSync(i.dataId),u=this.readSync(e.dataId),c=0;c<s.length;++c){for(var l=c*a,d=u[l],h=0;h<a;++h){var p=u[l+h];d=d||p}s[c]=d}return i},t.prototype.squaredDifference=function(e,t){return dd([e,t],"squaredDifference"),this.broadcastedBinaryOp(e,t,e.dtype,(function(e,t){var n=e-t;return n*n}))},t.prototype.ceil=function(e){dd(e,"ceil");for(var t=this.readSync(e.dataId),n=new Float32Array(t.length),r=0;r<t.length;++r)n[r]=Math.ceil(t[r]);return this.makeOutput(n,e.shape,"float32")},t.prototype.floor=function(e){dd(e,"floor");for(var t=this.readSync(e.dataId),n=new Float32Array(t.length),r=0;r<t.length;++r)n[r]=Math.floor(t[r]);return this.makeOutput(n,e.shape,"float32")},t.prototype.sign=function(e){dd(e,"x");for(var t=this.readSync(e.dataId),n=new Float32Array(t.length),r=0;r<t.length;++r)t[r]<0?n[r]=-1:t[r]>0?n[r]=1:n[r]=0;return this.makeOutput(n,e.shape,"float32")},t.prototype.isNaN=function(e){dd(e,"x");for(var t=this.readSync(e.dataId),n=new Uint8Array(t.length),r=0;r<t.length;++r)Number.isNaN(t[r])&&(n[r]=1);return this.makeOutput(n,e.shape,"bool")},t.prototype.isInf=function(e){dd(e,"x");for(var t=this.readSync(e.dataId),n=new Uint8Array(t.length),r=0;r<t.length;++r)Math.abs(t[r])===1/0&&(n[r]=1);return this.makeOutput(n,e.shape,"bool")},t.prototype.isFinite=function(e){dd(e,"x");for(var t=this.readSync(e.dataId),n=new Uint8Array(t.length),r=0;r<t.length;++r)Number.isFinite(t[r])&&(n[r]=1);return this.makeOutput(n,e.shape,"bool")},t.prototype.round=function(e){dd(e,"round");for(var t=this.readSync(e.dataId),n=new Float32Array(t.length),r=0;r<t.length;++r){var o=Math.floor(t[r]);t[r]-o<.5?n[r]=Math.floor(t[r]):t[r]-o>.5?n[r]=Math.ceil(t[r]):n[r]=o%2==0?o:o+1}return this.makeOutput(n,e.shape,"float32")},t.prototype.exp=function(e){dd(e,"exp");for(var t=this.readSync(e.dataId),n=new Float32Array(t.length),r=0;r<t.length;++r)n[r]=Math.exp(t[r]);return this.makeOutput(n,e.shape,"float32")},t.prototype.expm1=function(e){dd(e,"expm1");for(var t=this.readSync(e.dataId),n=new Float32Array(t.length),r=0;r<t.length;++r)n[r]=Math.expm1(t[r]);return this.makeOutput(n,e.shape,"float32")},t.prototype.log=function(e){dd(e,"log");for(var t=this.readSync(e.dataId),n=new Float32Array(t.length),r=0;r<t.length;++r){var o=t[r];n[r]=Math.log(o)}return this.makeOutput(n,e.shape,"float32")},t.prototype.log1p=function(e){dd(e,"log1p");for(var t=this.readSync(e.dataId),n=new Float32Array(t.length),r=0;r<t.length;++r){var o=t[r];n[r]=Math.log1p(o)}return this.makeOutput(n,e.shape,"float32")},t.prototype.sqrt=function(e){dd(e,"sqrt");for(var t=this.readSync(e.dataId),n=new Float32Array(t.length),r=0;r<t.length;++r){var o=t[r];n[r]=Math.sqrt(o)}return this.makeOutput(n,e.shape,"float32")},t.prototype.rsqrt=function(e){dd(e,"rsqrt");for(var t=this.readSync(e.dataId),n=new Float32Array(t.length),r=0;r<t.length;++r){var o=t[r];n[r]=1/Math.sqrt(o)}return this.makeOutput(n,e.shape,"float32")},t.prototype.reciprocal=function(e){dd(e,"reciprocal");for(var t=this.readSync(e.dataId),n=new Float32Array(t.length),r=0;r<t.length;++r)n[r]=1/t[r];return this.makeOutput(n,e.shape,"float32")},t.prototype.linear=function(e){return e},t.prototype.relu=function(e){dd(e,"relu");for(var t=Kn(e.shape,e.dtype),n=this.readSync(t.dataId),r=this.readSync(e.dataId),o=0;o<r.length;++o)n[o]=Math.max(0,r[o]);return t},t.prototype.relu6=function(e){dd(e,"relu");for(var t=Kn(e.shape,e.dtype),n=this.readSync(t.dataId),r=this.readSync(e.dataId),o=0;o<r.length;++o)n[o]=Math.min(Math.max(0,r[o]),6);return t},t.prototype.prelu=function(e,t){return dd([e,t],"prelu"),this.broadcastedBinaryOp(e,t,e.dtype,(function(e,t){return e<0?t*e:e}))},t.prototype.elu=function(e){dd(e,"elu");for(var t=new Float32Array(e.size),n=this.readSync(e.dataId),r=0;r<n.length;++r){var o=n[r];t[r]=o>=0?o:Math.exp(o)-1}return this.makeOutput(t,e.shape,"float32")},t.prototype.eluDer=function(e,t){dd([e,t],"eluDer");for(var n=new Float32Array(t.size),r=this.readSync(t.dataId),o=this.readSync(e.dataId),i=0;i<r.length;++i){var a=r[i];n[i]=a>=1?o[i]:o[i]*(a+1)}return this.makeOutput(n,t.shape,"float32")},t.prototype.selu=function(e){dd(e,"selu");for(var t=new Float32Array(e.size),n=this.readSync(e.dataId),r=0;r<n.length;++r){var o=n[r];t[r]=o>=0?1.0507009873554805*o:1.7580993408473768*(Math.exp(o)-1)}return this.makeOutput(t,e.shape,"float32")},t.prototype.clip=function(e,t,n){dd(e,"clip");for(var r=new Float32Array(e.size),o=this.readSync(e.dataId),i=0;i<o.length;++i){var a=o[i];r[i]=a>n?n:a<t?t:a}return this.makeOutput(r,e.shape,"float32")},t.prototype.abs=function(e){for(var t=new Float32Array(e.size),n=this.readSync(e.dataId),r=0;r<n.length;++r)t[r]=Math.abs(n[r]);return this.makeOutput(t,e.shape,"float32")},t.prototype.complexAbs=function(e){for(var t=new Float32Array(e.size),n=this.readSync(e.dataId),r=0;r<e.size;++r){var o=n[2*r],i=n[2*r+1];t[r]=Math.hypot(o,i)}return this.makeOutput(t,e.shape,"float32")},t.prototype.int=function(e){dd(e,"int");for(var t=new Int32Array(e.size),n=this.readSync(e.dataId),r=0;r<n.length;++r)t[r]=n[r];return this.makeOutput(t,e.shape,"int32")},t.prototype.sigmoid=function(e){dd(e,"sigmoid");for(var t=new Float32Array(e.size),n=this.readSync(e.dataId),r=0;r<n.length;++r)t[r]=1/(1+Math.exp(-n[r]));return this.makeOutput(t,e.shape,"float32")},t.prototype.softplus=function(e){dd(e,"softplus");for(var t=Math.log(1.1920928955078125e-7)+2,n=new Float32Array(e.size),r=this.readSync(e.dataId),o=0;o<r.length;++o){var i,a=r[o]>-t,s=r[o]<t,u=Math.exp(r[o]);i=s?u:a?r[o]:Math.log(1+u),n[o]=i}return this.makeOutput(n,e.shape,"float32")},t.prototype.sin=function(e){dd(e,"sin");for(var t=new Float32Array(e.size),n=this.readSync(e.dataId),r=0;r<n.length;++r)t[r]=Math.sin(n[r]);return this.makeOutput(t,e.shape,"float32")},t.prototype.cos=function(e){dd(e,"cos");for(var t=new Float32Array(e.size),n=this.readSync(e.dataId),r=0;r<n.length;++r)t[r]=Math.cos(n[r]);return this.makeOutput(t,e.shape,"float32")},t.prototype.tan=function(e){dd(e,"tan");for(var t=new Float32Array(e.size),n=this.readSync(e.dataId),r=0;r<n.length;++r)t[r]=Math.tan(n[r]);return this.makeOutput(t,e.shape,"float32")},t.prototype.asin=function(e){dd(e,"asin");for(var t=new Float32Array(e.size),n=this.readSync(e.dataId),r=0;r<n.length;++r)t[r]=Math.asin(n[r]);return this.makeOutput(t,e.shape,"float32")},t.prototype.acos=function(e){dd(e,"acos");for(var t=new Float32Array(e.size),n=this.readSync(e.dataId),r=0;r<n.length;++r)t[r]=Math.acos(n[r]);return this.makeOutput(t,e.shape,"float32")},t.prototype.atan=function(e){dd(e,"atan");for(var t=new Float32Array(e.size),n=this.readSync(e.dataId),r=0;r<n.length;++r)t[r]=Math.atan(n[r]);return this.makeOutput(t,e.shape,"float32")},t.prototype.atan2=function(e,t){return dd([e,t],"atan2"),this.broadcastedBinaryOp(e,t,e.dtype,(function(e,t){return Math.atan2(e,t)}))},t.prototype.sinh=function(e){dd(e,"sinh");for(var t=new Float32Array(e.size),n=this.readSync(e.dataId),r=0;r<n.length;++r)t[r]=Math.sinh(n[r]);return this.makeOutput(t,e.shape,"float32")},t.prototype.cosh=function(e){dd(e,"cosh");for(var t=new Float32Array(e.size),n=this.readSync(e.dataId),r=0;r<n.length;++r)t[r]=Math.cosh(n[r]);return this.makeOutput(t,e.shape,"float32")},t.prototype.tanh=function(e){dd(e,"tanh");for(var t=new Float32Array(e.size),n=this.readSync(e.dataId),r=0;r<n.length;++r)t[r]=se(n[r]);return this.makeOutput(t,e.shape,"float32")},t.prototype.asinh=function(e){dd(e,"asinh");for(var t=new Float32Array(e.size),n=this.readSync(e.dataId),r=0;r<n.length;++r)t[r]=Math.asinh(n[r]);return this.makeOutput(t,e.shape,"float32")},t.prototype.acosh=function(e){dd(e,"acosh");for(var t=new Float32Array(e.size),n=this.readSync(e.dataId),r=0;r<n.length;++r)t[r]=Math.acosh(n[r]);return this.makeOutput(t,e.shape,"float32")},t.prototype.atanh=function(e){dd(e,"atanh");for(var t=new Float32Array(e.size),n=this.readSync(e.dataId),r=0;r<n.length;++r)t[r]=Math.atanh(n[r]);return this.makeOutput(t,e.shape,"float32")},t.prototype.erf=function(e){dd(e,"erf");for(var t=new Float32Array(e.size),n=this.readSync(e.dataId),r=0;r<n.length;++r){var o=Math.sign(n[r]),i=Math.abs(n[r]),a=1/(1+.3275911*i);t[r]=o*(1-((((1.061405429*a-1.453152027)*a+1.421413741)*a-.284496736)*a+.254829592)*a*Math.exp(-i*i))}return this.makeOutput(t,e.shape,"float32")},t.prototype.step=function(e,t){void 0===t&&(t=0),dd(e,"step");for(var n=new Float32Array(e.size),r=this.readSync(e.dataId),o=0;o<r.length;++o){var i=r[o];isNaN(i)?n[o]=NaN:n[o]=i>0?1:t}return this.makeOutput(n,e.shape,"float32")},t.prototype.fusedConv2d=function(e){var t=e.input,n=e.filter,r=e.convInfo,o=e.bias,i=e.activation,a=e.preluActivationWeights,s=this.conv2d(t,n,r);return o&&(s=this.add(s,o)),i&&(s=hd(this,s,i,a)),s},t.prototype.conv2d=function(e,t,n){dd([e,t],"conv2d");for(var r=n.filterHeight,o=n.filterWidth,i=n.dilationHeight,a=n.dilationWidth,s=n.padInfo.left,u=n.padInfo.top,c="channelsLast"===n.dataFormat,l=vr(n.outShape,e.dtype),d=e.strides[0],h=c?e.strides[1]:e.strides[2],p=c?e.strides[2]:1,f=c?1:e.strides[1],m=l.strides[0],v=c?l.strides[1]:l.strides[2],g=c?l.strides[2]:1,b=c?1:l.strides[1],A=this.readSync(e.dataId),y=this.readSync(t.dataId),x=l.values,C=0;C<n.batchSize;++C)for(var w=C*d,k=C*m,_=0;_<n.outHeight;++_)for(var E=k+_*v,I=_*n.strideHeight-u,R=0;R<r;R++){var S=I+R*i;if(!(S<0||S>=n.inHeight))for(var T=R*t.strides[0],D=w+S*h,F=0;F<n.outWidth;++F)for(var N=E+F*g,B=F*n.strideWidth-s,O=0;O<o;O++){var M=B+O*a;if(!(M<0||M>=n.inWidth))for(var P=D+M*p,L=T+O*t.strides[1],z=0;z<n.inChannels;++z){for(var W=A[P+z*f],U=0;U<n.outChannels;++U)x[N+U*b]+=W*y[L+U];L+=n.outChannels}}}return l.toTensor()},t.prototype.conv3d=function(e,t,n){for(var r=n.filterDepth,o=n.filterHeight,i=n.filterWidth,a=n.dilationDepth,s=n.dilationHeight,u=n.dilationWidth,c=n.padInfo.front,l=n.padInfo.left,d=n.padInfo.top,h=vr(n.outShape,e.dtype),p=this.readSync(e.dataId),f=this.readSync(t.dataId),m=h.values,v=0;v<n.batchSize;++v)for(var g=v*e.strides[0],b=v*h.strides[0],A=0;A<n.outDepth;++A)for(var y=b+A*h.strides[1],x=A*n.strideDepth-c,C=0;C<r;C++){var w=x+C*a;if(!(w<0||w>=n.inDepth))for(var k=C*t.strides[0],_=g+w*e.strides[1],E=0;E<n.outHeight;++E)for(var I=y+E*h.strides[2],R=E*n.strideHeight-d,S=0;S<o;S++){var T=R+S*s;if(!(T<0||T>=n.inHeight))for(var D=k+S*t.strides[1],F=_+T*e.strides[2],N=0;N<n.outWidth;++N)for(var B=I+N*n.outChannels,O=N*n.strideWidth-l,M=0;M<i;M++){var P=O+M*u;if(!(P<0||P>=n.inWidth))for(var L=D+M*t.strides[2],z=F+P*n.inChannels,W=L,U=0;U<n.inChannels;++U){for(var V=p[z+U],G=0;G<n.outChannels;++G)m[B+G]+=V*f[W+G];W+=n.outChannels}}}}return h.toTensor()},t.prototype.conv2dDerInput=function(e,t,n){dd([e,t],"conv2dDerInput");for(var r=vr(n.inShape,"float32"),o=r.values,i=this.readSync(e.dataId),a=this.readSync(t.dataId),s=t.strides,u=s[0],c=s[1],l=s[2],d=n.batchSize,h=n.filterHeight,p=n.filterWidth,f=n.inChannels,m=n.inHeight,v=n.inWidth,g=n.outChannels,b=n.outHeight,A=n.outWidth,y=n.strideHeight,x=n.strideWidth,C=n.dataFormat,w=h-1-n.padInfo.top,k=p-1-n.padInfo.left,_="channelsLast"===C,E=r.strides[0],I=_?r.strides[1]:r.strides[2],R=_?r.strides[2]:1,S=_?1:r.strides[1],T=e.strides[0],D=_?e.strides[1]:e.strides[2],F=_?e.strides[2]:1,N=_?1:e.strides[1],B=0;B<d;++B)for(var O=0;O<f;++O)for(var M=0;M<m;++M)for(var P=M-w,L=Math.max(0,Math.ceil(P/y)),z=Math.min(b,(h+P)/y),W=0;W<v;++W){for(var U=W-k,V=Math.max(0,Math.ceil(U/x)),G=Math.min(A,(p+U)/x),H=0,j=L;j<z;++j)for(var q=j*y-P,K=V;K<G;++K)for(var X=T*B+D*j+F*K,Q=u*(h-1-q)+c*(p-1-(K*x-U))+l*O,Y=0;Y<g;++Y)H+=i[X+N*Y]*a[Q+Y];o[E*B+I*M+R*W+S*O]=H}return r.toTensor()},t.prototype.conv3dDerInput=function(e,t,n){for(var r=vr(n.inShape,"float32"),o=r.values,i=r.strides,a=i[0],s=i[1],u=i[2],c=i[3],l=this.readSync(e.dataId),d=e.strides,h=d[0],p=d[1],f=d[2],m=d[3],v=this.readSync(t.dataId),g=t.strides,b=g[0],A=g[1],y=g[2],x=g[3],C=n.batchSize,w=n.filterDepth,k=n.filterHeight,_=n.filterWidth,E=n.inChannels,I=n.inDepth,R=n.inHeight,S=n.inWidth,T=n.outChannels,D=n.outDepth,F=n.outHeight,N=n.outWidth,B=n.strideDepth,O=n.strideHeight,M=n.strideWidth,P=w-1-n.padInfo.front,L=k-1-n.padInfo.top,z=_-1-n.padInfo.left,W=0;W<C;++W)for(var U=0;U<E;++U)for(var V=0;V<I;++V)for(var G=V-P,H=Math.max(0,Math.ceil(G/B)),j=Math.min(D,(w+G)/B),q=0;q<R;++q)for(var K=q-L,X=Math.max(0,Math.ceil(K/O)),Q=Math.min(F,(k+K)/O),Y=0;Y<S;++Y){for(var $=Y-z,J=Math.max(0,Math.ceil($/M)),Z=Math.min(N,(_+$)/M),ee=0,te=H;te<j;++te)for(var ne=te*B-G,re=X;re<Q;++re)for(var oe=re*O-K,ie=J;ie<Z;++ie)for(var ae=h*W+p*te+f*re+m*ie,se=b*(w-1-ne)+A*(k-1-oe)+y*(_-1-(ie*M-$))+x*U,ue=0;ue<T;++ue)ee+=l[ae+ue]*v[se+ue];o[a*W+s*V+u*q+c*Y+U]=ee}return r.toTensor()},t.prototype.conv2dDerFilter=function(e,t,n){dd([e,t],"conv2dDerFilter");for(var r=n.strideHeight,o=n.strideWidth,i=n.filterHeight,a=n.filterWidth,s="channelsLast"===n.dataFormat,u=vr(n.filterShape,"float32"),c=n.padInfo.left,l=n.padInfo.top,d=this.bufferSync(e),h=this.bufferSync(t),p=0;p<i;++p)for(var f=Math.max(0,Math.ceil((l-p)/r)),m=Math.min(n.outHeight,(n.inHeight+l-p)/r),v=0;v<a;++v)for(var g=Math.max(0,Math.ceil((c-v)/o)),b=Math.min(n.outWidth,(n.inWidth+c-v)/o),A=0;A<n.inChannels;++A)for(var y=0;y<n.outChannels;++y){for(var x=0,C=0;C<n.batchSize;++C)for(var w=f;w<m;++w)for(var k=p+w*r-l,_=g;_<b;++_){var E=v+_*o-c;x+=s?d.get(C,k,E,A)*h.get(C,w,_,y):d.get(C,A,k,E)*h.get(C,y,w,_)}u.set(x,p,v,A,y)}return u.toTensor()},t.prototype.conv3dDerFilter=function(e,t,n){for(var r=n.strideDepth,o=n.strideHeight,i=n.strideWidth,a=n.filterDepth,s=n.filterHeight,u=n.filterWidth,c=vr(n.filterShape,"float32"),l=c.values,d=c.strides,h=d[0],p=d[1],f=d[2],m=d[3],v=this.readSync(t.dataId),g=t.strides,b=g[0],A=g[1],y=g[2],x=g[3],C=this.readSync(e.dataId),w=e.strides,k=w[0],_=w[1],E=w[2],I=w[3],R=n.padInfo.front,S=n.padInfo.left,T=n.padInfo.top,D=0;D<a;++D)for(var F=Math.max(0,Math.ceil((R-D)/r)),N=Math.min(n.outDepth,(n.inDepth+R-D)/r),B=D*h,O=0;O<s;++O)for(var M=Math.max(0,Math.ceil((T-O)/o)),P=Math.min(n.outHeight,(n.inHeight+T-O)/o),L=O*p+B,z=0;z<u;++z)for(var W=Math.max(0,Math.ceil((S-z)/i)),U=Math.min(n.outWidth,(n.inWidth+S-z)/i),V=z*f+L,G=0;G<n.inChannels;++G)for(var H=G*m+V,j=0;j<n.outChannels;++j){for(var q=0,K=0;K<n.batchSize;++K)for(var X=K*k,Q=K*b,Y=F;Y<N;++Y)for(var $=(D+Y*r-R)*_+X,J=Y*A+Q,Z=M;Z<P;++Z)for(var ee=(O+Z*o-T)*E+$,te=Z*y+J,ne=W;ne<U;++ne){var re=ne*x+te;q+=C[(z+ne*i-S)*I+ee+G]*v[re+j]}l[H+j]=q}return c.toTensor()},t.prototype.fusedDepthwiseConv2D=function(e){var t=e.input,n=e.filter,r=e.convInfo,o=e.bias,i=e.activation,a=e.preluActivationWeights,s=this.depthwiseConv2D(t,n,r);return o&&(s=this.add(s,o)),i&&(s=hd(this,s,i,a)),s},t.prototype.depthwiseConv2D=function(e,t,n){dd([e,t],"depthwiseConv2D");for(var r=n.filterHeight,o=n.filterWidth,i=n.dilationHeight,a=n.dilationWidth,s=n.padInfo.left,u=n.padInfo.top,c=n.outChannels/n.inChannels,l=vr(n.outShape,e.dtype),d=this.readSync(e.dataId),h=this.readSync(t.dataId),p=l.values,f=0;f<n.batchSize;++f)for(var m=f*e.strides[0],v=f*l.strides[0],g=0;g<n.outHeight;++g)for(var b=v+g*l.strides[1],A=g*n.strideHeight-s,y=0;y<r;++y){var x=A+y*i;if(!(x<0||x>=n.inHeight))for(var C=y*t.strides[0],w=m+x*e.strides[1],k=0;k<n.outWidth;++k)for(var _=b+k*l.strides[2],E=k*n.strideWidth-u,I=0;I<o;++I){var R=E+I*a;if(!(R<0||R>=n.inWidth))for(var S=C+I*t.strides[1],T=w+R*n.inChannels,D=_,F=S,N=0;N<n.inChannels;++N){for(var B=d[T+N],O=0;O<c;++O)p[D+O]+=B*h[F+O];D+=c,F+=c}}}return l.toTensor()},t.prototype.depthwiseConv2DDerInput=function(e,t,n){dd([e,t],"depthwiseConv2DDerInput");for(var r=vr(n.inShape,"float32"),o=r.values,i=r.strides,a=i[0],s=i[1],u=i[2],c=this.readSync(e.dataId),l=e.strides,d=l[0],h=l[1],p=l[2],f=this.readSync(t.dataId),m=t.strides,v=m[0],g=m[1],b=m[2],A=n.batchSize,y=n.filterHeight,x=n.filterWidth,C=n.inChannels,w=n.inHeight,k=n.inWidth,_=n.outChannels,E=n.outHeight,I=n.outWidth,R=n.strideHeight,S=n.strideWidth,T=y-1-n.padInfo.top,D=x-1-n.padInfo.left,F=_/C,N=0;N<A;++N)for(var B=0;B<C;++B)for(var O=0;O<w;++O)for(var M=O-T,P=Math.max(0,Math.ceil(M/R)),L=Math.min(E,(y+M)/R),z=0;z<k;++z){for(var W=z-D,U=Math.max(0,Math.ceil(W/S)),V=Math.min(I,(x+W)/S),G=0,H=P;H<L;++H)for(var j=H*R-M,q=U;q<V;++q)for(var K=d*N+h*H+p*q,X=v*(y-1-j)+g*(x-1-(q*S-W))+b*B,Q=0;Q<F;++Q)G+=c[K+(B*F+Q)]*f[X+Q];o[a*N+s*O+u*z+B]=G}return r.toTensor()},t.prototype.depthwiseConv2DDerFilter=function(e,t,n){dd([e,t],"depthwiseConv2DDerFilter");for(var r=n.strideHeight,o=n.strideWidth,i=n.filterHeight,a=n.filterWidth,s=vr(n.filterShape,"float32"),u=n.padInfo.left,c=n.padInfo.top,l=n.outChannels/n.inChannels,d=this.bufferSync(e),h=this.bufferSync(t),p=0;p<i;++p)for(var f=Math.max(0,Math.ceil((c-p)/r)),m=Math.min(n.outHeight,(n.inHeight+c-p)/r),v=0;v<a;++v)for(var g=Math.max(0,Math.ceil((u-v)/o)),b=Math.min(n.outWidth,(n.inWidth+u-v)/o),A=0;A<n.outChannels;++A){for(var y=Math.trunc(A/l),x=A%l,C=0,w=0;w<n.batchSize;++w)for(var k=f;k<m;++k)for(var _=p+k*r-c,E=g;E<b;++E){var I=v+E*o-u;C+=d.get(w,_,I,y)*h.get(w,k,E,A)}s.set(C,p,v,y,x)}return s.toTensor()},t.prototype.tile=function(e,t){return dd(e,"tile"),Ho(this.bufferSync(e),t)},t.prototype.pad=function(e,t,n){dd(e,"pad");var r=t.map((function(t,n){return t[0]+e.shape[n]+t[1]})),o=t.map((function(e){return e[0]})),i=this.bufferSync(e),a=vr(r,e.dtype);0!==n&&a.values.fill(n);for(var s=0;s<e.size;s++){var u=i.indexToLoc(s),c=u.map((function(e,t){return e+o[t]}));a.set.apply(a,[i.get.apply(i,u)].concat(c))}return a.toTensor()},t.prototype.transpose=function(e,t){dd(e,"transpose");for(var n=new Array(e.rank),r=0;r<n.length;r++)n[r]=e.shape[t[r]];var o=this.readSync(e.dataId),i=vr(n,e.dtype),a=this.bufferSync(e);for(r=0;r<e.size;++r){for(var s=a.indexToLoc(r),u=new Array(s.length),c=0;c<u.length;c++)u[c]=s[t[c]];var l=i.locToIndex(u);i.values[l]=o[r]}return i.toTensor()},t.prototype.gather=function(e,t,n){dd([e,t],"gather");var r=e.shape.slice(),o=this.readSync(t.dataId);r[n]=o.length;for(var i=vr(r,e.dtype),a=this.bufferSync(e),s=0;s<i.size;++s){var u=i.indexToLoc(s),c=u.slice();c[n]=o[u[n]];var l=a.locToIndex(c);i.values[s]=a.values[l]}return i.toTensor()},t.prototype.batchToSpaceND=function(e,t,n){dd([e],"batchToSpaceND");var r=t.reduce((function(e,t){return e*t})),o=Gr(e.shape,t,r),i=Hr(o.length,t.length),a=jr(e.shape,t,r),s=qr(n,t.length),u=Kr(a,n,t.length);return e.reshape(o).transpose(i).reshape(a).slice(s,u)},t.prototype.spaceToBatchND=function(e,t,n){dd([e],"spaceToBatchND");var r=t.reduce((function(e,t){return e*t})),o=[[0,0]];o.push.apply(o,n);for(var i=1+t.length;i<e.shape.length;++i)o.push([0,0]);var a=e.pad(o),s=Gr(a.shape,t,r,!1),u=Hr(s.length,t.length,!1),c=jr(a.shape,t,r,!1);return a.reshape(s).transpose(u).reshape(c)},t.prototype.pool=function(e,t,n){dd(e,"pool");for(var r=t.strideHeight,o=t.strideWidth,i=t.dilationHeight,a=t.dilationWidth,s=t.effectiveFilterHeight,u=t.effectiveFilterWidth,c=t.padInfo.top,l=t.padInfo.left,d="max"===n?Number.NEGATIVE_INFINITY:Number.POSITIVE_INFINITY,h=this.readSync(e.dataId),p=vr(t.outShape,e.dtype),f=p.values,m=t.outShape[1]*t.outShape[2]*t.outShape[3],v=t.outShape[2]*t.outShape[3],g=t.outShape[3],b=0;b<t.batchSize;++b)for(var A=b*m,y=b*e.strides[0],x=0;x<t.inChannels;++x)for(var C=0;C<t.outHeight;++C)for(var w=C*r-c,k=Math.max(0,w),_=Math.min(t.inHeight,s+w),E=A+C*v,I=0;I<t.outWidth;++I){for(var R=I*o-l,S=Math.max(0,R),T=Math.min(t.inWidth,u+R),D=d,F=0,N=0,B=k;B<_;B+=i){for(var O=y+B*e.strides[1],M=S;M<T;M+=a){var P=h[O+M*e.strides[2]+x];"max"===n&&P>D?D=P:"avg"===n&&(F+=P,N++)}if(isNaN(D))break}f[E+I*g+x]="avg"===n?F/N:D}return p.toTensor()},t.prototype.maxPool=function(e,t){return this.pool(e,t,"max")},t.prototype.maxPoolPositions=function(e,t){for(var n=vr(t.outShape,"int32"),r=t.strideHeight,o=t.strideWidth,i=t.dilationHeight,a=t.dilationWidth,s=t.effectiveFilterHeight,u=t.effectiveFilterWidth,c=t.padInfo.top,l=t.padInfo.left,d=this.bufferSync(e),h=0;h<t.batchSize;++h)for(var p=0;p<t.inChannels;++p)for(var f=0;f<t.outHeight;++f){for(var m=f*r-c,v=m;v<0;)v+=i;for(var g=Math.min(t.inHeight,s+m),b=0;b<t.outWidth;++b){for(var A=b*o-l,y=A;y<0;)y+=a;for(var x=Math.min(t.inWidth,u+A),C=Number.NEGATIVE_INFINITY,w=-1,k=v;k<g;k+=i)for(var _=k-m,E=y;E<x;E+=a){var I=E-A,R=d.get(h,k,E,p);R>C&&(C=R,w=_*u+I)}n.set(w,h,f,b,p)}}return n.toTensor()},t.prototype.maxPoolBackprop=function(e,t,n,r){dd([t,n],"maxPoolBackprop");for(var o=this.maxPoolPositions(t,r),i=r.strideHeight,a=r.strideWidth,s=r.dilationHeight,u=r.dilationWidth,c=r.effectiveFilterHeight,l=r.effectiveFilterWidth,d=l-1-r.padInfo.left,h=c-1-r.padInfo.top,p=vr(t.shape,"float32"),f=this.bufferSync(o),m=this.bufferSync(e),v=0;v<r.batchSize;++v)for(var g=0;g<r.inChannels;++g)for(var b=0;b<r.inHeight;++b)for(var A=0;A<r.inWidth;++A){for(var y=b-h,x=A-d,C=0,w=0;w<c;w+=s){var k=(y+w)/i;if(!(k<0||k>=r.outHeight||Math.floor(k)!==k))for(var _=0;_<l;_+=u){var E=(x+_)/a;if(!(E<0||E>=r.outWidth||Math.floor(E)!==E)){var I=c*l-1-f.get(v,k,E,g)===w*l+_?1:0;0!==I&&(C+=m.get(v,k,E,g)*I)}}}p.set(C,v,b,A,g)}return p.toTensor()},t.prototype.avgPoolBackprop=function(e,t,n){dd([e,t],"avgPoolBackprop");for(var r=n.strideHeight,o=n.strideWidth,i=n.filterHeight,a=n.filterWidth,s=n.dilationHeight,u=n.dilationWidth,c=n.effectiveFilterHeight,l=n.effectiveFilterWidth,d=l-1-n.padInfo.left,h=c-1-n.padInfo.top,p=vr(t.shape,"float32"),f=1/(i*a),m=this.bufferSync(e),v=0;v<n.batchSize;++v)for(var g=0;g<n.inChannels;++g)for(var b=0;b<n.inHeight;++b)for(var A=0;A<n.inWidth;++A){for(var y=b-h,x=A-d,C=0,w=0;w<c;w+=s){var k=(y+w)/r;if(!(k<0||k>=n.outHeight||Math.floor(k)!==k))for(var _=0;_<l;_+=u){var E=(x+_)/o;E<0||E>=n.outWidth||Math.floor(E)!==E||(C+=m.get(v,k,E,g))}}p.set(C*f,v,b,A,g)}return p.toTensor()},t.prototype.pool3d=function(e,t,n){dd(e,"pool3d");for(var r=t.strideDepth,o=t.strideHeight,i=t.strideWidth,a=t.dilationDepth,s=t.dilationHeight,u=t.dilationWidth,c=t.effectiveFilterDepth,l=t.effectiveFilterHeight,d=t.effectiveFilterWidth,h=t.padInfo.front,p=t.padInfo.top,f=t.padInfo.left,m="max"===n?Number.NEGATIVE_INFINITY:Number.POSITIVE_INFINITY,v=this.readSync(e.dataId),g=vr(t.outShape,e.dtype),b=g.values,A=t.outShape[1]*t.outShape[2]*t.outShape[3]*t.outShape[4],y=t.outShape[2]*t.outShape[3]*t.outShape[4],x=t.outShape[3]*t.outShape[4],C=t.outShape[4],w=0;w<t.batchSize;++w)for(var k=w*A,_=w*e.strides[0],E=0;E<t.inChannels;++E)for(var I=0;I<t.outDepth;++I){for(var R=I*r-h,S=R;S<0;)S+=a;for(var T=Math.min(t.inDepth,c+R),D=k+I*y,F=0;F<t.outHeight;++F){for(var N=F*o-p,B=N;B<0;)B+=s;for(var O=Math.min(t.inHeight,l+N),M=D+F*x,P=0;P<t.outWidth;++P){for(var L=P*i-f,z=L;z<0;)z+=u;for(var W=Math.min(t.inWidth,d+L),U=M+P*C,V=m,G=0,H=0,j=S;j<T;j+=a){for(var q=_+j*e.strides[1],K=B;K<O;K+=s){for(var X=q+K*e.strides[2],Q=z;Q<W;Q+=u){var Y=v[X+Q*e.strides[3]+E];if("max"===n&&Y>V?V=Y:"avg"===n&&(G+=Y,H++),isNaN(V))break}if(isNaN(V))break}if(isNaN(V))break}b[U+E]="avg"===n?G/H:V}}}return g.toTensor()},t.prototype.avgPool3d=function(e,t){return dd(e,"avgPool3d"),this.pool3d(e,t,"avg").toFloat()},t.prototype.avgPool3dBackprop=function(e,t,n){dd([e,t],"avgPool3dBackprop");for(var r=n.strideDepth,o=n.strideHeight,i=n.strideWidth,a=n.filterDepth,s=n.filterHeight,u=n.filterWidth,c=n.dilationDepth,l=n.dilationHeight,d=n.dilationWidth,h=n.effectiveFilterDepth,p=n.effectiveFilterHeight,f=n.effectiveFilterWidth,m=h-1-n.padInfo.front,v=f-1-n.padInfo.left,g=p-1-n.padInfo.top,b=vr(t.shape,"float32"),A=1/(a*s*u),y=this.bufferSync(e),x=0;x<n.batchSize;++x)for(var C=0;C<n.inChannels;++C)for(var w=0;w<n.inDepth;++w)for(var k=0;k<n.inHeight;++k)for(var _=0;_<n.inWidth;++_){for(var E=w-m,I=k-g,R=_-v,S=0,T=0;T<h;T+=c){var D=(E+T)/r;if(!(D<0||D>=n.outDepth||Math.floor(D)!==D))for(var F=0;F<p;F+=l){var N=(I+F)/o;if(!(N<0||N>=n.outHeight||Math.floor(N)!==N))for(var B=0;B<f;B+=d){var O=(R+B)/i;O<0||O>=n.outWidth||Math.floor(O)!==O||(S+=y.get(x,D,N,O,C))}}}b.set(S*A,x,w,k,_,C)}return b.toTensor()},t.prototype.maxPool3d=function(e,t){return dd(e,"maxPool3d"),this.pool3d(e,t,"max").toFloat()},t.prototype.maxPool3dPositions=function(e,t){for(var n=vr(t.outShape,"int32"),r=t.strideDepth,o=t.strideHeight,i=t.strideWidth,a=t.dilationDepth,s=t.dilationHeight,u=t.dilationWidth,c=t.effectiveFilterDepth,l=t.effectiveFilterHeight,d=t.effectiveFilterWidth,h=t.padInfo.front,p=t.padInfo.top,f=t.padInfo.left,m=this.bufferSync(e),v=0;v<t.batchSize;++v)for(var g=0;g<t.inChannels;++g)for(var b=0;b<t.outDepth;++b){for(var A=b*r-h,y=A;y<0;)y+=a;for(var x=Math.min(t.inDepth,c+A),C=0;C<t.outHeight;++C){for(var w=C*o-p,k=w;k<0;)k+=s;for(var _=Math.min(t.inHeight,l+w),E=0;E<t.outWidth;++E){for(var I=E*i-f,R=I;R<0;)R+=u;for(var S=Math.min(t.inWidth,d+I),T=Number.NEGATIVE_INFINITY,D=-1,F=y;F<x;F+=a)for(var N=F-A,B=k;B<_;B+=s)for(var O=B-w,M=R;M<S;M+=u){var P=M-I,L=m.get(v,F,B,M,g);L>=T&&(T=L,D=N*l*d+O*l+P)}n.set(D,v,b,C,E,g)}}}return n.toTensor()},t.prototype.maxPool3dBackprop=function(e,t,n,r){dd([t,n],"maxPool3dBackprop");for(var o=this.maxPool3dPositions(t,r),i=r.strideDepth,a=r.strideHeight,s=r.strideWidth,u=r.dilationDepth,c=r.dilationHeight,l=r.dilationWidth,d=r.effectiveFilterDepth,h=r.effectiveFilterHeight,p=r.effectiveFilterWidth,f=d-1-r.padInfo.front,m=p-1-r.padInfo.left,v=h-1-r.padInfo.top,g=vr(t.shape,"float32"),b=this.bufferSync(o),A=this.bufferSync(e),y=0;y<r.batchSize;++y)for(var x=0;x<r.inChannels;++x)for(var C=0;C<r.inDepth;++C)for(var w=0;w<r.inHeight;++w)for(var k=0;k<r.inWidth;++k){for(var _=C-f,E=w-v,I=k-m,R=0,S=0;S<d;S+=u){var T=(_+S)/i;if(!(T<0||T>=r.outDepth||Math.floor(T)!==T))for(var D=0;D<h;D+=c){var F=(E+D)/a;if(!(F<0||F>=r.outHeight||Math.floor(F)!==F))for(var N=0;N<p;N+=l){var B=(I+N)/s;if(!(B<0||B>=r.outWidth||Math.floor(B)!==B)){var O=d*h*p-1-b.get(y,T,F,B,x)===S*h*p+D*p+N?1:0;0!==O&&(R+=A.get(y,T,F,B,x)*O)}}}}g.set(R,y,C,w,k,x)}return g.toTensor()},t.prototype.cast=function(e,t){return Ro(e,t,this)},t.prototype.reshape=function(e,t){return So(e,t)},t.prototype.avgPool=function(e,t){return dd(e,"avgPool"),this.pool(e,t,"avg").toFloat()},t.prototype.resizeBilinear=function(e,t,n,r){dd(e,"resizeBilinear");for(var o=e.shape,i=o[0],a=o[1],s=o[2],u=o[3],c=this.readSync(e.dataId),l=new Float32Array(oe([i,t,n,u])),d=[r&&t>1?a-1:a,r&&n>1?s-1:s],h=[r&&t>1?t-1:t,r&&n>1?n-1:n],p=0,f=d[0]/h[0],m=d[1]/h[1],v=0;v<i;v++)for(var g=0;g<t;g++)for(var b=f*g,A=Math.floor(b),y=b-A,x=Math.min(a-1,Math.ceil(b)),C=v*e.strides[0]+A*e.strides[1],w=v*e.strides[0]+x*e.strides[1],k=0;k<n;k++)for(var _=m*k,E=Math.floor(_),I=_-E,R=Math.min(s-1,Math.ceil(_)),S=C+E*e.strides[2],T=w+E*e.strides[2],D=C+R*e.strides[2],F=w+R*e.strides[2],N=0;N<u;N++){var B=c[S+N],O=c[T+N],M=B+(c[D+N]-B)*I,P=M+(O+(c[F+N]-O)*I-M)*y;l[p++]=P}return zn(l,[i,t,n,u])},t.prototype.resizeBilinearBackprop=function(e,t,n){dd([e,t],"resizeBilinearBackprop");for(var r=t.shape,o=r[0],i=r[1],a=r[2],s=r[3],u=e.shape,c=u[1],l=u[2],d=new Float32Array(o*i*a*s),h=[n&&c>1?i-1:i,n&&l>1?a-1:a],p=[n&&c>1?c-1:c,n&&l>1?l-1:l],f=h[0]/p[0],m=h[1]/p[1],v=this.readSync(e.dataId),g=0,b=0;b<o;b++)for(var A=b*t.strides[0],y=0;y<c;y++)for(var x=y*f,C=Math.floor(x),w=Math.min(Math.ceil(x),i-1),k=A+C*t.strides[1],_=A+w*t.strides[1],E=x-C,I=1-E,R=0;R<l;R++)for(var S=R*m,T=Math.floor(S),D=Math.min(Math.ceil(S),a-1),F=S-T,N=1-F,B=k+T*t.strides[2],O=k+D*t.strides[2],M=_+T*t.strides[2],P=_+D*t.strides[2],L=I*N,z=I*F,W=E*N,U=E*F,V=0;V<s;V++){var G=v[g++];d[B+V]+=G*L,d[O+V]+=G*z,d[M+V]+=G*W,d[P+V]+=G*U}return jn(d,[o,a,i,s],t.dtype)},t.prototype.resizeNearestNeighbor=function(e,t,n,r){dd(e,"resizeNearestNeighbor");for(var o=e.shape,i=o[0],a=o[1],s=o[2],u=o[3],c=this.readSync(e.dataId),l=new Float32Array(i*t*n*u),d=[r&&t>1?a-1:a,r&&n>1?s-1:s],h=[r&&t>1?t-1:t,r&&n>1?n-1:n],p=d[0]/h[0],f=d[1]/h[1],m=0,v=0;v<i;v++)for(var g=v*e.strides[0],b=0;b<t;b++)for(var A=p*b,y=g+Math.min(a-1,r?Math.round(A):Math.floor(A))*e.strides[1],x=0;x<n;x++)for(var C=f*x,w=y+Math.min(s-1,r?Math.round(C):Math.floor(C))*e.strides[2],k=0;k<u;k++){var _=c[w+k];l[m++]=_}return zn(l,[i,t,n,u],e.dtype)},t.prototype.resizeNearestNeighborBackprop=function(e,t,n){dd([e,t],"resizeNearestNeighborBackprop");for(var r=t.shape,o=r[0],i=r[1],a=r[2],s=r[3],u=e.shape,c=u[1],l=u[2],d=new Float32Array(o*i*a*s),h=this.readSync(e.dataId),p=[n&&c>1?i-1:i,n&&l>1?a-1:a],f=[n&&c>1?c-1:c,n&&l>1?l-1:l],m=p[0]/f[0],v=p[1]/f[1],g=1/m,b=1/v,A=2*Math.ceil(g)+2,y=2*Math.ceil(b)+2,x=0;x<o;x++)for(var C=x*t.strides[0],w=0;w<i;w++)for(var k=C+w*t.strides[1],_=Math.floor(w*g),E=Math.floor(_-A/2),I=0;I<a;I++)for(var R=k+I*t.strides[2],S=Math.floor(I*b),T=Math.floor(S-y/2),D=0;D<s;D++){for(var F=0,N=0;N<A;N++){var B=N+E;if(!(B<0||B>=c)){var O=C+B*e.strides[1],M=B*m;if(w===Math.min(i-1,n?Math.round(M):Math.floor(M)))for(var P=0;P<y;P++){var L=P+T;if(!(L<0||L>=l)){var z=O+L*e.strides[2],W=L*v;I===Math.min(a-1,n?Math.round(W):Math.floor(W))&&(F+=h[z+D])}}}}d[R+D]=F}return jn(d,t.shape,t.dtype)},t.prototype.batchNormalization=function(e,t,n,r,o,i){dd([e,t,n,o,i],"batchNorm");for(var a=this.readSync(e.dataId),s=this.readSync(t.dataId),u=this.readSync(n.dataId),c=o?this.readSync(o.dataId):new Float32Array([1]),l=i?this.readSync(i.dataId):new Float32Array([0]),d=new Float32Array(a.length),h=l.length,p=c.length,f=u.length,m=s.length,v=0,g=0,b=0,A=0,y=0;y<a.length;++y)d[y]=l[v++]+(a[y]-s[g++])*c[b++]/Math.sqrt(u[A++]+r),v>=h&&(v=0),g>=m&&(g=0),b>=p&&(b=0),A>=f&&(A=0);return jn(d,e.shape)},t.prototype.localResponseNormalization4D=function(e,t,n,r,o){dd(e,"localResponseNormalization4D");var i=e.shape[3],a=i-1,s=this.readSync(e.dataId),u=e.size,c=new Float32Array(u);function l(e){for(var n=e%i,r=e-n+Math.max(0,n-t),o=e-n+Math.min(n+t,a),u=0;r<=o;r++){var c=s[r];u+=c*c}return u}for(var d=0;d<u;d++){var h=l(d),p=s[d]*Math.pow(n+r*h,-o);c[d]=p}return jn(c,e.shape)},t.prototype.LRNGrad=function(e,t,n,r,o,i,a){dd(e,"LRNGrad");for(var s=e.shape[3],u=this.readSync(e.dataId),c=this.readSync(t.dataId),l=this.readSync(n.dataId),d=new Float32Array(e.size),h=e.size,p=0;p<h;p++){for(var f=p%s,m=p-f+Math.max(0,f-r),v=p-f+Math.min(s,f+r+1),g=0,b=m;b<v;b++)g+=Math.pow(c[b],2);for(g=i*g+o,b=m;b<v;b++){var A=-2*i*a*c[b]*l[p]/g;p===b&&(A+=Math.pow(g,-a)),A*=u[p],d[b]+=A}}return jn(d,e.shape)},t.prototype.multinomial=function(e,t,n,r){dd(e,"multinomial");for(var o=t?e:so(e),i=o.shape[0],a=o.shape[1],s=Kn([i,n],"int32"),u=this.readSync(s.dataId),c=this.readSync(o.dataId),l=0;l<i;++l){var d=l*a,h=new Float32Array(a-1);h[0]=c[d];for(var p=1;p<h.length;++p)h[p]=h[p-1]+c[d+p];for(var f=hr(r.toString()),m=l*n,v=0;v<n;++v){var g=f();u[m+v]=h.length;for(var b=0;b<h.length;b++)if(g<h[b]){u[m+v]=b;break}}}return s},t.prototype.oneHot=function(e,t,n,r){dd(e,"oneHot");var o=new Float32Array(e.size*t);o.fill(r);for(var i=this.readSync(e.dataId),a=0;a<e.size;++a)i[a]>=0&&i[a]<t&&(o[a*t+i[a]]=n);return Gn(o,[e.size,t],"int32")},t.prototype.nonMaxSuppression=function(e,t,n,r,o){return dd(e,"nonMaxSuppression"),Po(this.readSync(e.dataId),this.readSync(t.dataId),n,r,o)},t.prototype.fft=function(e){return this.fftBatch(e,!1)},t.prototype.ifft=function(e){return this.fftBatch(e,!0)},t.prototype.fftBatch=function(e,t){for(var n=e.shape[0],r=e.shape[1],o=vr(e.shape,"float32"),i=vr(e.shape,"float32"),a=Pn(e).as2D(n,r),s=Ln(e).as2D(n,r),u=0;u<n;u++)for(var c=a.slice([u,0],[1,r]),l=s.slice([u,0],[1,r]),d=Mn(c,l),h=this.readSync(this.fftImpl(d,t).dataId),p=0;p<r;p++){var f=Fo(h,p);o.values[u*r+p]=f.real,i.values[u*r+p]=f.imag}return Mn(o.toTensor(),i.toTensor()).as2D(n,r)},t.prototype.fftImpl=function(e,t){var n=e.as1D(),r=n.size;if(this.isExponentOf2(r)){var o=this.fftRadix2(n,r,t).as2D(e.shape[0],e.shape[1]);return t&&(o=Mn(Pn(o).div(Un(r)),Ln(o).div(Un(r)))),o}var i=this.readSync(e.dataId),a=function(e){for(var t=new Float32Array(e.length/2),n=new Float32Array(e.length/2),r=0;r<e.length;r+=2)t[r/2]=e[r],n[r/2]=e[r+1];return{real:t,imag:n}}(this.fourierTransformByMatmul(i,r,t));return Mn(a.real,a.imag).as2D(e.shape[0],e.shape[1])},t.prototype.isExponentOf2=function(e){return 0==(e&e-1)},t.prototype.fftRadix2=function(e,t,n){if(1===t)return e;var r=this.readSync(e.dataId),o=t/2,i=function(e){for(var t=Math.ceil(e.length/4),n=new Float32Array(t),r=new Float32Array(t),o=0;o<e.length;o+=4)n[Math.floor(o/4)]=e[o],r[Math.floor(o/4)]=e[o+1];return{real:n,imag:r}}(r),a=Mn(i.real,i.imag).as1D(),s=function(e){for(var t=Math.floor(e.length/4),n=new Float32Array(t),r=new Float32Array(t),o=2;o<e.length;o+=4)n[Math.floor(o/4)]=e[o],r[Math.floor(o/4)]=e[o+1];return{real:n,imag:r}}(r),u=Mn(s.real,s.imag).as1D();a=this.fftRadix2(a,o,n),u=this.fftRadix2(u,o,n);var c=function(e,t){for(var n=new Float32Array(e/2),r=new Float32Array(e/2),o=0;o<Math.ceil(e/2);o++){var i=(t?2:-2)*Math.PI*(o/e);n[o]=Math.cos(i),r[o]=Math.sin(i)}return{real:n,imag:r}}(t,n),l=Mn(c.real,c.imag).mul(u),d=a.add(l),h=a.sub(l),p=Pn(d).concat(Pn(h)),f=Ln(d).concat(Ln(h));return Mn(p,f).as1D()},t.prototype.fourierTransformByMatmul=function(e,t,n){for(var r=new Float32Array(2*t),o=0;o<t;o++){for(var i=0,a=0,s=0;s<t;s++){var u=Bo(o*s,t,n),c=Fo(e,s);i+=c.real*u.real-c.imag*u.imag,a+=c.real*u.imag+c.imag*u.real}n&&(i/=t,a/=t),No(r,i,a,o)}return r},t.prototype.depthToSpace=function(e,t,n){ee("NHWC"===n,(function(){return"Only NHWC dataFormat supported on CPU for depthToSpace. Got "+n})),ee(t>1,(function(){return"blockSize should be > 1 for depthToSpace, but was: "+t}));for(var r=e.shape[0],o=e.shape[1],i=e.shape[2],a=e.shape[3],s=o*t,u=i*t,c=a/(t*t),l=this.readSync(e.dataId),d=new Float32Array(r*s*u*c),h=0,p=0;p<r;++p)for(var f=0;f<s;++f)for(var m=Math.floor(f/t),v=f%t,g=0;g<u;++g)for(var b=Math.floor(g/t),A=(v*t+g%t)*c,y=0;y<c;++y){var x=y+A+a*(b+i*(m+o*p));d[h++]=l[x]}return jn(d,[r,s,u,c])},t.prototype.broadcastedBinaryOp=function(e,t,n,r){var o=mo(e.shape,t.shape),i=vr(o,n),a=this.readSync(e.dataId),s=this.readSync(t.dataId),u=po(e.shape,o),c=po(t.shape,o),l=i.values;if(u.length+c.length===0)for(var d=0;d<l.length;++d)l[d]=r(a[d%a.length],s[d%s.length]);else{var h=this.bufferSync(e),p=this.bufferSync(t),f=function(n){var o=i.indexToLoc(n),d=o.slice(-e.rank);u.forEach((function(e){return d[e]=0}));var f=h.locToIndex(d),m=o.slice(-t.rank);c.forEach((function(e){return m[e]=0}));var v=p.locToIndex(m);l[n]=r(a[f],s[v])};for(d=0;d<l.length;++d)f(d)}return i.toTensor()},t.prototype.broadcastedBinaryComplexOp=function(e,t,n){var r=mo(e.shape,t.shape),o=vr(r,"float32"),i=vr(r,"float32"),a=this.readSync(e.dataId),s=this.readSync(t.dataId),u=po(e.shape,r),c=po(t.shape,r),l=o.values,d=i.values;if(u.length+c.length===0)for(var h=0;h<l.length;h++){var p=h%a.length,f=h%s.length,m=n(a[2*p],a[2*p+1],s[2*f],s[2*f+1]);l[h]=m.real,d[h]=m.imag}else{var v=this.bufferSync(this.data.get(e.dataId).complexTensors.real),g=this.bufferSync(this.data.get(t.dataId).complexTensors.real),b=function(r){var i=o.indexToLoc(r),h=i.slice(-e.rank);u.forEach((function(e){return h[e]=0}));var p=v.locToIndex(h),f=i.slice(-t.rank);c.forEach((function(e){return f[e]=0}));var m=g.locToIndex(f),b=n(a[2*p],a[2*p+1],s[2*m],s[2*m+1]);l[r]=b.real,d[r]=b.imag};for(h=0;h<l.length;h++)b(h)}return this.complex(o.toTensor(),i.toTensor())},t.prototype.split=function(e,t,n){return Go(e,t,n)},t.prototype.dispose=function(){},t.prototype.floatPrecision=function(){return 32},t.prototype.epsilon=function(){return 1e-7},t.prototype.cropAndResize=function(e,t,n,r,o,i){for(var a=e.shape,s=a[0],u=a[1],c=a[2],l=a[3],d=t.shape[0],h=r[0],p=r[1],f=vr([d,h,p,l],"float32"),m=this.readSync(t.dataId),v=this.readSync(n.dataId),g=this.readSync(e.dataId),b=e.strides,A=f.strides,y=0;y<d;y++){var x=4*y,C=m[x],w=m[x+1],k=m[x+2],_=m[x+3],E=v[y];if(!(E>=s))for(var I=h>1?(k-C)*(u-1)/(h-1):0,R=p>1?(_-w)*(c-1)/(p-1):0,S=0;S<h;S++){var T=h>1?C*(u-1)+S*I:.5*(C+k)*(u-1);if(T<0||T>u-1)for(var D=0;D<p;D++)for(var F=0;F<l;F++){var N=F+D*A[2]+S*A[1]+y*A[0];f.values[N]=i}else if("bilinear"===o){var B=Math.floor(T),O=Math.ceil(T),M=T-B;for(D=0;D<p;D++)if((j=p>1?w*(c-1)+D*R:.5*(w+_)*(c-1))<0||j>c-1)for(F=0;F<l;F++)N=F+D*A[2]+S*A[1]+y*A[0],f.values[N]=i;else{var P=Math.floor(j),L=Math.ceil(j),z=j-P;for(F=0;F<l;F++){var W=g[N=F+P*b[2]+B*b[1]+E*b[0]],U=g[N=F+L*b[2]+B*b[1]+E*b[0]],V=g[N=F+P*b[2]+O*b[1]+E*b[0]],G=W+(U-W)*z,H=V+(g[N=F+L*b[2]+O*b[1]+E*b[0]]-V)*z;N=F+D*A[2]+S*A[1]+y*A[0],f.values[N]=G+(H-G)*M}}}else for(D=0;D<p;++D){var j;if((j=p>1?w*(c-1)+D*R:.5*(w+_)*(c-1))<0||j>c-1)for(F=0;F<l;F++)N=F+D*A[2]+S*A[1]+y*A[0],f.values[N]=i;else{var q=Math.round(j),K=Math.round(T);for(F=0;F<l;F++){var X=F+q*b[2]+K*b[1]+E*b[0],Q=F+D*A[2]+S*A[1]+y*A[0];f.values[Q]=g[X]}}}}}return f.toTensor()},t.prototype.sparseToDense=function(e,t,n,r){var o=Jr(0,e,n),i=o.sliceRank,a=o.numUpdates,s=o.sliceSize,u=o.strides,c=o.outputSize;return this.scatter(e,t,n,c,s,a,i,u,r,!1)},t.prototype.gatherND=function(e,t){var n=t.shape,r=n[n.length-1],o=Xr(e,t),i=o[0],a=o[1],s=o[2],u=o[3];if(0===a)return zn([],i,e.dtype);for(var c=new He([a,s],e.dtype),l=this.readSync(t.dataId),d=this.readSync(e.dataId),h=0;h<a;h++){for(var p=[],f=0,m=0;m<r;m++){var v=l[h*r+m];f+=v*u[m],p.push(v)}if(f<0||f>=e.size/s)throw new Error("Invalid indices: "+p+" does not index into "+e.shape);for(var g=0;g<s;g++)c.values[h*s+g]=d[f*s+g]}return c.toTensor().reshape(i)},t.prototype.scatterND=function(e,t,n){var r=Jr(0,e,n),o=r.sliceRank,i=r.numUpdates,a=r.sliceSize,s=r.strides,u=r.outputSize,c=Un(0);return this.scatter(e,t,n,u,a,i,o,s,c,!0)},t.prototype.fill=function(e,t,n){var r=me(n=n||_e(t),oe(e));return r.fill(t),dt.makeTensor(r,e,n,this)},t.prototype.onesLike=function(e){if("string"===e.dtype)throw new Error("onesLike is not supported for string tensors");return this.fill(e.shape,1,e.dtype)},t.prototype.zerosLike=function(e){var t=me(e.dtype,oe(e.shape));return this.makeOutput(t,e.shape,e.dtype)},t.prototype.linspace=function(e,t,n){return To(e,t,n)},t.prototype.scatter=function(e,t,n,r,o,i,a,s,u,c){var l=[r/o,o],d=this.readSync(e.dataId),h=this.readSync(t.dataId);if(0===r)return zn([],n,t.dtype);var p=new He(l,t.dtype);p.values.fill(this.readSync(u.dataId)[0]);for(var f=0;f<i;f++){for(var m=[],v=0,g=0;g<a;g++){var b=d[f*a+g];m.push(b),v+=b*s[g]}if(v<0||v>=r/o)throw new Error("Invalid indices: "+m+" does not index into "+n);for(var A=0;A<o;A++)c?p.values[v*o+A]+=h[f*o+A]:p.values[v*o+A]=0===t.rank?h[0]:h[f*o+A]}return p.toTensor().reshape(n)},t}(lo);dt.registerBackend("cpu",(function(){return new pd}),1);for(var fd=0,md=[{kernelName:"NonMaxSuppressionV5",backendName:"cpu",kernelFunc:function(e){var t=e.inputs,n=e.backend,r=e.attrs,o=t,i=o.boxes,a=o.scores,s=r,u=s.maxOutputSize,c=s.iouThreshold,l=s.scoreThreshold,d=s.softNmsSigma,h=n;dd(i,"NonMaxSuppressionWithScore");var p=Lo(h.data.get(i.dataId).values,h.data.get(a.dataId).values,u,c,l,d);return[p.selectedIndices,p.selectedScores]}},{kernelName:"Square",backendName:"cpu",kernelFunc:function(e){var t=e.inputs,n=e.backend,r=t.x,o=n;dd(r,"square");for(var i=o.data.get(r.dataId).values,a=new Float32Array(i.length),s=0;s<i.length;++s){var u=i[s];a[s]=u*u}return{dataId:o.write(a,r.shape,r.dtype),shape:r.shape,dtype:r.dtype}}},{kernelName:Es,backendName:"cpu",kernelFunc:function(e){var t=e.inputs,n=e.backend,r=t,o=r.a,i=r.b,a=n;dd([o,i],Es);var s=a.data.get(o.dataId).values,u=a.data.get(i.dataId).values,c=function(e,t,n,r,o,i){var a=mo(e,t),s=a.length,u=Re(a),c=fe(o,oe(a)),l=e.length,d=t.length,h=Re(e),p=Re(t),f=po(e,a),m=po(t,a);if(f.length+m.length===0)for(var v=0;v<c.length;++v)c[v]=i(n[v%n.length],r[v%r.length]);else{var g=function(e){var t=Le(e,s,u),o=t.slice(-l);f.forEach((function(e){return o[e]=0}));var a=Pe(o,l,h),v=t.slice(-d);m.forEach((function(e){return v[e]=0}));var g=Pe(v,d,p);c[e]=i(n[a],r[g])};for(v=0;v<c.length;++v)g(v)}return[c,a]}(o.shape,i.shape,s,u,o.dtype,(function(e,t){var n=e-t;return n*n})),l=c[0],d=c[1];return{dataId:a.write(l,d,o.dtype),shape:d,dtype:o.dtype}}}];fd<md.length;fd++)K(md[fd]);for(var vd,gd=function(e){this.variableNames=["A"];var t=Jo(),n=e[0],r=e[1];this.outputShape=e,this.userCode="\n      void main() {\n        ivec3 coords = getOutputCoords();\n        int texR = coords[0];\n        int texC = coords[1];\n        int depth = coords[2];\n        vec2 uv = (vec2(texC, texR) + halfCR) / vec2("+r+".0, "+n+".0);\n\n        vec4 values = "+t.texture2D+"(A, uv);\n        float value;\n        if (depth == 0) {\n          value = values.r;\n        } else if (depth == 1) {\n          value = values.g;\n        } else if (depth == 2) {\n          value = values.b;\n        } else if (depth == 3) {\n          value = values.a;\n        }\n\n        setOutput(floor(value * 255.0 + 0.5));\n      }\n    "},bd=function(e){this.variableNames=["A"],this.packedInputs=!1,this.packedOutput=!0;var t=Jo(),n=e[0],r=e[1];this.outputShape=e,this.userCode="\n      void main() {\n        ivec3 coords = getOutputCoords();\n        int texR = coords[0];\n        int texC = coords[1];\n        int depth = coords[2];\n\n        vec4 result = vec4(0.);\n\n        for(int row=0; row<=1; row++) {\n          for(int col=0; col<=1; col++) {\n            texC = coords[1] + row;\n            depth = coords[2] + col;\n\n            vec2 uv = (vec2(texC, texR) + halfCR) /\n                       vec2("+r+".0, "+n+".0);\n            vec4 values = "+t.texture2D+"(A, uv);\n            float value;\n            if (depth == 0) {\n              value = values.r;\n            } else if (depth == 1) {\n              value = values.g;\n            } else if (depth == 2) {\n              value = values.b;\n            } else if (depth == 3) {\n              value = values.a;\n            }\n\n            result[row * 2 + col] = floor(value * 255.0 + 0.5);\n          }\n        }\n\n        "+t.output+" = result;\n      }\n    "},Ad=0,yd=[{kernelName:"FromPixels",backendName:"webgl",kernelFunc:function(e){var t=e.inputs,n=e.backend,r=e.attrs,o=t.pixels,i=r.numChannels,a="undefined"!=typeof HTMLVideoElement&&o instanceof HTMLVideoElement,s="undefined"!=typeof HTMLImageElement&&o instanceof HTMLImageElement,u=a?[o.videoWidth,o.videoHeight]:[o.width,o.height],c=u[0],l=u[1],d=[l,c],h=[l,c,i];(s||a)&&(null==vd&&(vd=document.createElement("canvas").getContext("2d")),vd.canvas.width=c,vd.canvas.height=l,vd.drawImage(o,0,0,c,l),o=vd.canvas);var p=n.makeTensorInfo(d,"int32");n.texData.get(p.dataId).usage=mt.PIXELS,n.gpgpu.uploadPixelDataToTexture(n.getTexture(p.dataId),o);var f=U().getBool("WEBGL_PACK")?new bd(h):new gd(h),m=n.runWebGLProgram(f,[p],"int32");return n.disposeData(p.dataId),m}},{kernelName:"NonMaxSuppressionV5",backendName:"webgl",kernelFunc:function(e){var t=e.inputs,n=e.backend,r=e.attrs;yn("tf.nonMaxSuppression() in webgl locks the UI thread. Call tf.nonMaxSuppressionAsync() instead");var o=t,i=o.boxes,a=o.scores,s=r,u=s.maxOutputSize,c=s.iouThreshold,l=s.scoreThreshold,d=s.softNmsSigma,h=n,p=Lo(h.readSync(i.dataId),h.readSync(a.dataId),u,c,l,d);return[p.selectedIndices,p.selectedScores]}},{kernelName:"Square",backendName:"webgl",kernelFunc:function(e){var t=e.inputs,n=e.backend,r=t.x,o=n,i=new is(r.shape,"return x * x;");return o.runWebGLProgram(i,[r],r.dtype)}},{kernelName:Es,backendName:"webgl",kernelFunc:function(e){var t=e.inputs,n=e.backend,r=t,o=r.a,i=r.b,a=n,s=U().getBool("WEBGL_PACK_BINARY_OPERATIONS")?new wi("return (a - b) * (a - b);",o.shape,i.shape):new xi("return (a - b) * (a - b);",o.shape,i.shape);return a.compileAndRun(s,[o,i])}}];Ad<yd.length;Ad++)K(yd[Ad]);for(var xd=0,Cd=[{kernelName:"Square",gradFunc:function(e,t){var n=t[0];return{x:function(){return e.mul(n.toFloat().mul(2))}}}},{kernelName:Es,gradFunc:function(e,t){var n=t[0],r=t[1],o=Un(2);return{a:function(){return Vu(e,Vu(o,Ku(n,r)))},b:function(){return Vu(e,Vu(o,Ku(r,n)))}}}}];xd<Cd.length;xd++)X(Cd[xd]);var wd=function(){function e(){}return e.prototype.fetch=function(e,t){return fetch(e,t)},e.prototype.now=function(){return performance.now()},e.prototype.encode=function(e,t){if("utf-8"!==t&&"utf8"!==t)throw new Error("Browser's encoder only supports utf-8, but got "+t);return null==this.textEncoder&&(this.textEncoder=new TextEncoder),this.textEncoder.encode(e)},e.prototype.decode=function(e,t){return new TextDecoder(t).decode(e)},e}();U().get("IS_BROWSER")&&U().setPlatform("browser",new wd);var kd,_d=function(){function e(){this.util=n(17),this.textEncoder=new this.util.TextEncoder}return e.prototype.fetch=function(e,t){return null!=U().global.fetch?U().global.fetch(e,t):(null==kd&&(kd=n(14)),kd(e,t))},e.prototype.now=function(){var e=process.hrtime();return 1e3*e[0]+e[1]/1e6},e.prototype.encode=function(e,t){if("utf-8"!==t&&"utf8"!==t)throw new Error("Node built-in encoder only supports utf-8, but got "+t);return this.textEncoder.encode(e)},e.prototype.decode=function(e,t){return 0===e.length?"":new this.util.TextDecoder(t).decode(e)},e}();U().get("IS_NODE")&&U().setPlatform("node",new _d);var Ed={float32:4,int32:4,uint16:2,uint8:1,bool:1};function Id(e,t){for(var n={},r=0,o=function(t){var o=t.name,i=t.dtype,a=t.shape,s=oe(a),u=void 0;if("quantization"in t){var c=t.quantization;if("uint8"!==c.dtype&&"uint16"!==c.dtype)throw new Error("Weight "+t.name+" has unknown quantization dtype "+c.dtype+". Supported quantization dtypes are: 'uint8' and 'uint16'.");var l=Ed[c.dtype],d=e.slice(r,r+s*l),h="uint8"===c.dtype?new Uint8Array(d):new Uint16Array(d);if("float32"===i)u=Float32Array.from(h,(function(e){return e*c.scale+c.min}));else{if("int32"!==i)throw new Error("Unsupported dtype in weight '"+o+"': "+i);u=Int32Array.from(h,(function(e){return Math.round(e*c.scale+c.min)}))}r+=s*l}else if("string"===i){var p=oe(t.shape);u=[];for(var f=0;f<p;f++){var m=new Uint32Array(e.slice(r,r+4))[0];r+=4;var v=new Uint8Array(e.slice(r,r+m));u.push(v),r+=m}}else{var g=Ed[i];if(d=e.slice(r,r+s*g),"float32"===i)u=new Float32Array(d);else if("int32"===i)u=new Int32Array(d);else{if("bool"!==i)throw new Error("Unsupported dtype in weight '"+o+"': "+i);u=new Uint8Array(d)}r+=s*g}n[o]=zn(u,a,i)},i=0,a=t;i<a.length;i++)o(a[i]);return n}function Rd(e){if(null===e)throw new Error("Invalid input value: "+JSON.stringify(e));var t=0,n=[];e.forEach((function(e){if(t+=e.byteLength,n.push(e.byteLength===e.buffer.byteLength?e:new e.constructor(e)),!(e instanceof Float32Array||e instanceof Int32Array||e instanceof Uint8Array))throw new Error("Unsupported TypedArray subtype: "+e.constructor.name)}));var r=new Uint8Array(t),o=0;return n.forEach((function(e){r.set(new Uint8Array(e.buffer),o),o+=e.byteLength})),r.buffer}var Sd="undefined"!=typeof Buffer&&("undefined"==typeof Blob||"undefined"==typeof atob||"undefined"==typeof btoa);function Td(e){return Sd?Buffer.byteLength(e):new Blob([e]).size}function Dd(e){var t=0;e.forEach((function(e){t+=e.byteLength}));var n=new Uint8Array(t),r=0;return e.forEach((function(e){n.set(new Uint8Array(e),r),r+=e.byteLength})),n.buffer}function Fd(e){for(e=e.trim();e.endsWith("/");)e=e.slice(0,e.length-1);var t=e.split("/");return t[t.length-1]}function Nd(e){if(e.modelTopology instanceof ArrayBuffer)throw new Error("Expected JSON model topology, received ArrayBuffer.");return{dateSaved:new Date,modelTopologyType:"JSON",modelTopologyBytes:null==e.modelTopology?0:Td(JSON.stringify(e.modelTopology)),weightSpecsBytes:null==e.weightSpecs?0:Td(JSON.stringify(e.weightSpecs)),weightDataBytes:null==e.weightData?0:e.weightData.byteLength}}var Bd=function(){function e(){this.saveRouters=[],this.loadRouters=[]}return e.getInstance=function(){return null==e.instance&&(e.instance=new e),e.instance},e.registerSaveRouter=function(t){e.getInstance().saveRouters.push(t)},e.registerLoadRouter=function(t){e.getInstance().loadRouters.push(t)},e.getSaveHandlers=function(t){return e.getHandlers(t,"save")},e.getLoadHandlers=function(t,n){return e.getHandlers(t,"load",n)},e.getHandlers=function(t,n,r){var o=[];return("load"===n?e.getInstance().loadRouters:e.getInstance().saveRouters).forEach((function(e){var n=e(t,r);null!==n&&o.push(n)})),o},e}(),Od="://",Md=function(){function e(){this.managers={}}return e.getInstance=function(){return null==e.instance&&(e.instance=new e),e.instance},e.registerManager=function(t,n){ee(null!=t,(function(){return"scheme must not be undefined or null."})),t.endsWith(Od)&&(t=t.slice(0,t.indexOf(Od))),ee(t.length>0,(function(){return"scheme must not be an empty string."}));var r=e.getInstance();ee(null==r.managers[t],(function(){return"A model store manager is already registered for scheme '"+t+"'."})),r.managers[t]=n},e.getManager=function(e){var t=this.getInstance().managers[e];if(null==t)throw new Error("Cannot find model manager for scheme '"+e+"'");return t},e.getSchemes=function(){return Object.keys(this.getInstance().managers)},e}();function Pd(e){if(-1===e.indexOf(Od))throw new Error("The url string provided does not contain a scheme. Supported schemes are: "+Md.getSchemes().join(","));return{scheme:e.split(Od)[0],path:e.split(Od)[1]}}function Ld(e,t,n){return void 0===n&&(n=!1),P(this,void 0,void 0,(function(){var r,o,i,a,s,u,c,l,d;return L(this,(function(h){switch(h.label){case 0:return ee(e!==t,(function(){return"Old path and new path are the same: '"+e+"'"})),ee((r=Bd.getLoadHandlers(e)).length>0,(function(){return"Copying failed because no load handler is found for source URL "+e+"."})),ee(r.length<2,(function(){return"Copying failed because more than one ("+r.length+") load handlers for source URL "+e+"."})),o=r[0],ee((i=Bd.getSaveHandlers(t)).length>0,(function(){return"Copying failed because no save handler is found for destination URL "+t+"."})),ee(i.length<2,(function(){return"Copying failed because more than one ("+r.length+") save handlers for destination URL "+t+"."})),a=i[0],s=Pd(e).scheme,u=Pd(e).path,c=s===Pd(e).scheme,[4,o.load()];case 1:return l=h.sent(),n&&c?[4,Md.getManager(s).removeModel(u)]:[3,3];case 2:h.sent(),h.label=3;case 3:return[4,a.save(l)];case 4:return d=h.sent(),!n||c?[3,6]:[4,Md.getManager(s).removeModel(u)];case 5:h.sent(),h.label=6;case 6:return[2,d.modelArtifactsInfo]}}))}))}var zd="models_store",Wd="model_info_store";function Ud(){if(!U().getBool("IS_BROWSER"))throw new Error("Failed to obtain IndexedDB factory because the current environmentis not a web browser.");var e=window||self,t=e.indexedDB||e.mozIndexedDB||e.webkitIndexedDB||e.msIndexedDB||e.shimIndexedDB;if(null==t)throw new Error("The current browser does not appear to support IndexedDB.");return t}function Vd(e){var t=e.result;t.createObjectStore(zd,{keyPath:"modelPath"}),t.createObjectStore(Wd,{keyPath:"modelPath"})}var Gd=function(){function e(e){if(this.indexedDB=Ud(),null==e||!e)throw new Error("For IndexedDB, modelPath must not be null, undefined or empty.");this.modelPath=e}return e.prototype.save=function(e){return P(this,void 0,void 0,(function(){return L(this,(function(t){if(e.modelTopology instanceof ArrayBuffer)throw new Error("BrowserLocalStorage.save() does not support saving model topology in binary formats yet.");return[2,this.databaseAction(this.modelPath,e)]}))}))},e.prototype.load=function(){return P(this,void 0,void 0,(function(){return L(this,(function(e){return[2,this.databaseAction(this.modelPath)]}))}))},e.prototype.databaseAction=function(e,t){var n=this;return new Promise((function(e,r){var o=n.indexedDB.open("tensorflowjs",1);o.onupgradeneeded=function(){return Vd(o)},o.onsuccess=function(){var i=o.result;if(null==t){var a=i.transaction(zd,"readonly"),s=a.objectStore(zd).get(n.modelPath);s.onsuccess=function(){if(null==s.result)return i.close(),r(new Error("Cannot find model with path '"+n.modelPath+"' in IndexedDB."));e(s.result.modelArtifacts)},s.onerror=function(e){return i.close(),r(s.error)},a.oncomplete=function(){return i.close()}}else{var u,c=Nd(t),l=i.transaction(Wd,"readwrite"),d=l.objectStore(Wd),h=d.put({modelPath:n.modelPath,modelArtifactsInfo:c});h.onsuccess=function(){var o=(u=i.transaction(zd,"readwrite")).objectStore(zd).put({modelPath:n.modelPath,modelArtifacts:t,modelArtifactsInfo:c});o.onsuccess=function(){return e({modelArtifactsInfo:c})},o.onerror=function(e){var t=(d=l.objectStore(Wd)).delete(n.modelPath);t.onsuccess=function(){return i.close(),r(o.error)},t.onerror=function(e){return i.close(),r(o.error)}}},h.onerror=function(e){return i.close(),r(h.error)},l.oncomplete=function(){null==u?i.close():u.oncomplete=function(){return i.close()}}}},o.onerror=function(e){return r(o.error)}}))},e.URL_SCHEME="indexeddb://",e}(),Hd=function(e){return U().getBool("IS_BROWSER")&&!Array.isArray(e)&&e.startsWith(Gd.URL_SCHEME)?(t=e.slice(Gd.URL_SCHEME.length),new Gd(t)):null;var t};Bd.registerSaveRouter(Hd),Bd.registerLoadRouter(Hd);var jd=function(){function e(){this.indexedDB=Ud()}return e.prototype.listModels=function(){return P(this,void 0,void 0,(function(){var e=this;return L(this,(function(t){return[2,new Promise((function(t,n){var r=e.indexedDB.open("tensorflowjs",1);r.onupgradeneeded=function(){return Vd(r)},r.onsuccess=function(){var e=r.result,o=e.transaction(Wd,"readonly"),i=o.objectStore(Wd).getAll();i.onsuccess=function(){for(var e={},n=0,r=i.result;n<r.length;n++){var o=r[n];e[o.modelPath]=o.modelArtifactsInfo}t(e)},i.onerror=function(t){return e.close(),n(i.error)},o.oncomplete=function(){return e.close()}},r.onerror=function(e){return n(r.error)}}))]}))}))},e.prototype.removeModel=function(e){return P(this,void 0,void 0,(function(){var t=this;return L(this,(function(n){var r;return e=(r=e).startsWith(Gd.URL_SCHEME)?r.slice(Gd.URL_SCHEME.length):r,[2,new Promise((function(n,r){var o=t.indexedDB.open("tensorflowjs",1);o.onupgradeneeded=function(){return Vd(o)},o.onsuccess=function(){var t,i=o.result,a=i.transaction(Wd,"readwrite"),s=a.objectStore(Wd),u=s.get(e);u.onsuccess=function(){if(null==u.result)return i.close(),r(new Error("Cannot find model with path '"+e+"' in IndexedDB."));var o=s.delete(e),a=function(){var o=(t=i.transaction(zd,"readwrite")).objectStore(zd).delete(e);o.onsuccess=function(){return n(u.result.modelArtifactsInfo)},o.onerror=function(e){return r(u.error)}};o.onsuccess=a,o.onerror=function(e){return a(),i.close(),r(u.error)}},u.onerror=function(e){return i.close(),r(u.error)},a.oncomplete=function(){null==t?i.close():t.oncomplete=function(){return i.close()}}},o.onerror=function(e){return r(o.error)}}))]}))}))},e}();if(U().getBool("IS_BROWSER"))try{Md.registerManager(Gd.URL_SCHEME,new jd)}catch(et){}var qd="/",Kd="tensorflowjs_models",Xd="info",Qd="model_topology",Yd="weight_specs",$d="weight_data",Jd="model_metadata";function Zd(e){return{info:[Kd,e,Xd].join(qd),topology:[Kd,e,Qd].join(qd),weightSpecs:[Kd,e,Yd].join(qd),weightData:[Kd,e,$d].join(qd),modelMetadata:[Kd,e,Jd].join(qd)}}function eh(e){var t=e.split(qd);if(t.length<3)throw new Error("Invalid key format: "+e);return t.slice(1,t.length-1).join(qd)}var th=function(){function e(e){if(!U().getBool("IS_BROWSER")||"undefined"==typeof window||void 0===window.localStorage)throw new Error("The current environment does not support local storage.");if(this.LS=window.localStorage,null==e||!e)throw new Error("For local storage, modelPath must not be null, undefined or empty.");this.modelPath=e,this.keys=Zd(this.modelPath)}return e.prototype.save=function(e){return P(this,void 0,void 0,(function(){var t,n,r;return L(this,(function(o){if(e.modelTopology instanceof ArrayBuffer)throw new Error("BrowserLocalStorage.save() does not support saving model topology in binary formats yet.");t=JSON.stringify(e.modelTopology),n=JSON.stringify(e.weightSpecs),r=Nd(e);try{return this.LS.setItem(this.keys.info,JSON.stringify(r)),this.LS.setItem(this.keys.topology,t),this.LS.setItem(this.keys.weightSpecs,n),this.LS.setItem(this.keys.weightData,function(e){if(Sd)return Buffer.from(e).toString("base64");for(var t=new Uint8Array(e),n="",r=0,o=t.length;r<o;r++)n+=String.fromCharCode(t[r]);return btoa(n)}(e.weightData)),this.LS.setItem(this.keys.modelMetadata,JSON.stringify({format:e.format,generatedBy:e.generatedBy,convertedBy:e.convertedBy,userDefinedMetadata:e.userDefinedMetadata})),[2,{modelArtifactsInfo:r}]}catch(e){throw this.LS.removeItem(this.keys.info),this.LS.removeItem(this.keys.topology),this.LS.removeItem(this.keys.weightSpecs),this.LS.removeItem(this.keys.weightData),this.LS.removeItem(this.keys.modelMetadata),new Error("Failed to save model '"+this.modelPath+"' to local storage: size quota being exceeded is a possible cause of this failure: modelTopologyBytes="+r.modelTopologyBytes+", weightSpecsBytes="+r.weightSpecsBytes+", weightDataBytes="+r.weightDataBytes+".")}return[2]}))}))},e.prototype.load=function(){return P(this,void 0,void 0,(function(){var e,t,n,r,o,i,a;return L(this,(function(s){if(null==(e=JSON.parse(this.LS.getItem(this.keys.info))))throw new Error("In local storage, there is no model with name '"+this.modelPath+"'");if("JSON"!==e.modelTopologyType)throw new Error("BrowserLocalStorage does not support loading non-JSON model topology yet.");if(t={},null==(n=JSON.parse(this.LS.getItem(this.keys.topology))))throw new Error("In local storage, the topology of model '"+this.modelPath+"' is missing.");if(t.modelTopology=n,null==(r=JSON.parse(this.LS.getItem(this.keys.weightSpecs))))throw new Error("In local storage, the weight specs of model '"+this.modelPath+"' are missing.");if(t.weightSpecs=r,null!=(o=this.LS.getItem(this.keys.modelMetadata))&&(i=JSON.parse(o),t.format=i.format,t.generatedBy=i.generatedBy,t.convertedBy=i.convertedBy,t.userDefinedMetadata=i.userDefinedMetadata),null==(a=this.LS.getItem(this.keys.weightData)))throw new Error("In local storage, the binary weight values of model '"+this.modelPath+"' are missing.");return t.weightData=function(e){if(Sd){var t=Buffer.from(e,"base64");return t.buffer.slice(t.byteOffset,t.byteOffset+t.byteLength)}for(var n=atob(e),r=new Uint8Array(n.length),o=0;o<n.length;++o)r.set([n.charCodeAt(o)],o);return r.buffer}(a),[2,t]}))}))},e.URL_SCHEME="localstorage://",e}(),nh=function(e){return U().getBool("IS_BROWSER")&&!Array.isArray(e)&&e.startsWith(th.URL_SCHEME)?(t=e.slice(th.URL_SCHEME.length),new th(t)):null;var t};Bd.registerSaveRouter(nh),Bd.registerLoadRouter(nh);var rh=function(){function e(){ee(U().getBool("IS_BROWSER"),(function(){return"Current environment is not a web browser"})),ee("undefined"==typeof window||void 0!==window.localStorage,(function(){return"Current browser does not appear to support localStorage"})),this.LS=window.localStorage}return e.prototype.listModels=function(){return P(this,void 0,void 0,(function(){var e,t,n,r,o,i;return L(this,(function(a){for(e={},t=Kd+qd,n=qd+Xd,r=0;r<this.LS.length;++r)(o=this.LS.key(r)).startsWith(t)&&o.endsWith(n)&&(i=eh(o),e[i]=JSON.parse(this.LS.getItem(o)));return[2,e]}))}))},e.prototype.removeModel=function(e){return P(this,void 0,void 0,(function(){var t,n;return L(this,(function(r){var o;if(e=(o=e).startsWith(th.URL_SCHEME)?o.slice(th.URL_SCHEME.length):o,t=Zd(e),null==this.LS.getItem(t.info))throw new Error("Cannot find model at path '"+e+"'");return n=JSON.parse(this.LS.getItem(t.info)),this.LS.removeItem(t.info),this.LS.removeItem(t.topology),this.LS.removeItem(t.weightSpecs),this.LS.removeItem(t.weightData),[2,n]}))}))},e}();if(U().getBool("IS_BROWSER"))try{Md.registerManager(th.URL_SCHEME,new rh)}catch(et){}function oh(e){return new Promise((function(e){return setTimeout(e)})).then(e)}var ih=function(){function e(t){if(!U().getBool("IS_BROWSER"))throw new Error("browserDownloads() cannot proceed because the current environment is not a browser.");t.startsWith(e.URL_SCHEME)&&(t=t.slice(e.URL_SCHEME.length)),null!=t&&0!==t.length||(t="model"),this.modelTopologyFileName=t+".json",this.weightDataFileName=t+".weights.bin"}return e.prototype.save=function(e){return P(this,void 0,void 0,(function(){var t,n,r,o,i,a;return L(this,(function(s){switch(s.label){case 0:if("undefined"==typeof document)throw new Error("Browser downloads are not supported in this environment since `document` is not present");if(t=window.URL.createObjectURL(new Blob([e.weightData],{type:"application/octet-stream"})),!(e.modelTopology instanceof ArrayBuffer))return[3,1];throw new Error("BrowserDownloads.save() does not support saving model topology in binary formats yet.");case 1:return n=[{paths:["./"+this.weightDataFileName],weights:e.weightSpecs}],r={modelTopology:e.modelTopology,format:e.format,generatedBy:e.generatedBy,convertedBy:e.convertedBy,weightsManifest:n},o=window.URL.createObjectURL(new Blob([JSON.stringify(r)],{type:"application/json"})),(i=null==this.jsonAnchor?document.createElement("a"):this.jsonAnchor).download=this.modelTopologyFileName,i.href=o,[4,oh((function(){return i.dispatchEvent(new MouseEvent("click"))}))];case 2:return s.sent(),null==e.weightData?[3,4]:((a=null==this.weightDataAnchor?document.createElement("a"):this.weightDataAnchor).download=this.weightDataFileName,a.href=t,[4,oh((function(){return a.dispatchEvent(new MouseEvent("click"))}))]);case 3:s.sent(),s.label=4;case 4:return[2,{modelArtifactsInfo:Nd(e)}]}}))}))},e.URL_SCHEME="downloads://",e}(),ah=function(){function e(e){if(null==e||e.length<1)throw new Error("When calling browserFiles, at least 1 file is required, but received "+e);this.files=e}return e.prototype.load=function(){return P(this,void 0,void 0,(function(){var e,t,n=this;return L(this,(function(r){return e=this.files[0],t=this.files.slice(1),[2,new Promise((function(r,o){var i=new FileReader;i.onload=function(i){var a=JSON.parse(i.target.result),s=a.modelTopology;if(null!=s){0===t.length&&r({modelTopology:s});var u=a.weightsManifest;if(null!=u){var c;try{c=n.checkManifestAndWeightFiles(u,t)}catch(e){return void o(e)}var l=[],d=[],h=[];u.forEach((function(e){e.paths.forEach((function(e){d.push(e),h.push(null)})),l.push.apply(l,e.weights)})),u.forEach((function(e){e.paths.forEach((function(e){var t=new FileReader;t.onload=function(t){var n=t.target.result,o=d.indexOf(e);h[o]=n,-1===h.indexOf(null)&&r({modelTopology:s,weightSpecs:l,weightData:Dd(h),format:a.format,generatedBy:a.generatedBy,convertedBy:a.convertedBy,userDefinedMetadata:a.userDefinedMetadata})},t.onerror=function(t){return o("Failed to weights data from file of path '"+e+"'.")},t.readAsArrayBuffer(c[e])}))}))}else o(new Error("weightManifest field is missing from file "+e.name))}else o(new Error("modelTopology field is missing from file "+e.name))},i.onerror=function(t){return o("Failed to read model topology and weights manifest JSON from file '"+e.name+"'. BrowserFiles supports loading Keras-style tf.Model artifacts only.")},i.readAsText(e)}))]}))}))},e.prototype.checkManifestAndWeightFiles=function(e,t){for(var n=[],r=t.map((function(e){return Fd(e.name)})),o={},i=0,a=e;i<a.length;i++)a[i].paths.forEach((function(e){var i=Fd(e);if(-1!==n.indexOf(i))throw new Error("Duplicate file basename found in weights manifest: '"+i+"'");if(n.push(i),-1===r.indexOf(i))throw new Error("Weight file with basename '"+i+"' is not provided.");o[e]=t[r.indexOf(i)]}));if(n.length!==t.length)throw new Error("Mismatch in the number of files in weights manifest ("+n.length+") and the number of weight files provided ("+t.length+").");return o},e}();function sh(e,t,n,r){!function(e){ee(null!=e&&Array.isArray(e)&&e.length>0,(function(){return"promises must be a none empty array"}))}(e),function(e,t){ee(e>=0&&e<=1,(function(){return"Progress fraction must be in range [0, 1], but got startFraction "+e})),ee(t>=0&&t<=1,(function(){return"Progress fraction must be in range [0, 1], but got endFraction "+t})),ee(t>=e,(function(){return"startFraction must be no more than endFraction, but got startFraction "+e+" and endFraction "+t}))}(n=null==n?0:n,r=null==r?1:r);var o=0;return Promise.all(e.map((function(i){return i.then((function(i){var a=n+ ++o/e.length*(r-n);return t(a),i})),i})))}function uh(e,t){return P(this,void 0,void 0,(function(){var n,r,o,i,a,s,u,c,l;return L(this,(function(d){switch(d.label){case 0:return null==t&&(t={}),n=null==t.fetchFunc?U().platform.fetch:t.fetchFunc,r=e.map((function(e){return n(e,t.requestInit,{isBinary:!0})})),o=0,i=.5,null!=t.onProgress?[3,2]:[4,Promise.all(r)];case 1:return a=d.sent(),[3,4];case 2:return[4,sh(r,t.onProgress,o,i)];case 3:a=d.sent(),d.label=4;case 4:return s=a.map((function(e){return e.arrayBuffer()})),u=.5,c=1,null!=t.onProgress?[3,6]:[4,Promise.all(s)];case 5:return l=d.sent(),[3,8];case 6:return[4,sh(s,t.onProgress,u,c)];case 7:l=d.sent(),d.label=8;case 8:return[2,l]}}))}))}function ch(e){var t=this;return function(n,r,o){return void 0===r&&(r=""),P(t,void 0,void 0,(function(){var t,i,a,s,u,c,l,d,h,p;return L(this,(function(f){switch(f.label){case 0:if(t=n.map((function(){return!1})),i={},a=null!=o?o.map((function(){return!1})):[],s=[],n.forEach((function(e,n){var r=0;e.weights.forEach((function(e){var u="quantization"in e?e.quantization.dtype:e.dtype,c=Ed[u]*oe(e.shape),l=function(){t[n]=!0,null==i[n]&&(i[n]=[]),i[n].push({manifestEntry:e,groupOffset:r,sizeBytes:c})};null!=o?o.forEach((function(t,n){t===e.name&&(l(),a[n]=!0)})):l(),s.push(e.name),r+=c}))})),!a.every((function(e){return e})))throw u=o.filter((function(e,t){return!a[t]})),new Error("Could not find weights in manifest with names: "+u.join(", ")+". \nManifest JSON has weights with names: "+s.join(", ")+".");return c=t.reduce((function(e,t,n){return t&&e.push(n),e}),[]),l=[],c.forEach((function(e){n[e].paths.forEach((function(e){var t=r+(r.endsWith("/")?"":"/")+e;l.push(t)}))})),[4,e(l)];case 1:return d=f.sent(),h={},p=0,c.forEach((function(e){for(var t=n[e].paths.length,r=0,o=0;o<t;o++)r+=d[p+o].byteLength;for(var a=new ArrayBuffer(r),s=new Uint8Array(a),u=0,c=0;c<t;c++){var l=new Uint8Array(d[p+c]);s.set(l,u),u+=l.byteLength}i[e].forEach((function(e){var t=Id(a.slice(e.groupOffset,e.groupOffset+e.sizeBytes),[e.manifestEntry]);for(var n in t)h[n]=t[n]})),p+=t})),[2,h]}}))}))}}Bd.registerSaveRouter((function(e){return U().getBool("IS_BROWSER")&&!Array.isArray(e)&&e.startsWith(ih.URL_SCHEME)?function(e){return void 0===e&&(e="model"),new ih(e)}(e.slice(ih.URL_SCHEME.length)):null}));var lh=function(){function e(e,t){if(this.DEFAULT_METHOD="POST",null==t&&(t={}),this.weightPathPrefix=t.weightPathPrefix,this.onProgress=t.onProgress,null!=t.fetchFunc?(ee("function"==typeof t.fetchFunc,(function(){return"Must pass a function that matches the signature of `fetch` (see https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API)"})),this.fetch=t.fetchFunc):this.fetch=U().platform.fetch,ee(null!=e&&e.length>0,(function(){return"URL path for http must not be null, undefined or empty."})),Array.isArray(e)&&ee(2===e.length,(function(){return"URL paths for http must have a length of 2, (actual length is "+e.length+")."})),this.path=e,null!=t.requestInit&&null!=t.requestInit.body)throw new Error("requestInit is expected to have no pre-existing body, but has one.");this.requestInit=t.requestInit||{}}return e.prototype.save=function(e){return P(this,void 0,void 0,(function(){var t,n,r,o;return L(this,(function(i){switch(i.label){case 0:if(e.modelTopology instanceof ArrayBuffer)throw new Error("BrowserHTTPRequest.save() does not support saving model topology in binary formats yet.");return(t=Object.assign({method:this.DEFAULT_METHOD},this.requestInit)).body=new FormData,n=[{paths:["./model.weights.bin"],weights:e.weightSpecs}],r={modelTopology:e.modelTopology,format:e.format,generatedBy:e.generatedBy,convertedBy:e.convertedBy,userDefinedMetadata:e.userDefinedMetadata,weightsManifest:n},t.body.append("model.json",new Blob([JSON.stringify(r)],{type:"application/json"}),"model.json"),null!=e.weightData&&t.body.append("model.weights.bin",new Blob([e.weightData],{type:"application/octet-stream"}),"model.weights.bin"),[4,this.fetch(this.path,t)];case 1:if((o=i.sent()).ok)return[2,{modelArtifactsInfo:Nd(e),responses:[o]}];throw new Error("BrowserHTTPRequest.save() failed due to HTTP response status "+o.status+".")}}))}))},e.prototype.load=function(){return P(this,void 0,void 0,(function(){var e,t,n,r,o,i,a,s,u,c,l,d;return L(this,(function(h){switch(h.label){case 0:return[4,this.fetch(this.path,this.requestInit)];case 1:if(!(e=h.sent()).ok)throw new Error("Request to "+this.path+" failed with status code "+e.status+". Please verify this URL points to the model JSON of the model to load.");h.label=2;case 2:return h.trys.push([2,4,,5]),[4,e.json()];case 3:return t=h.sent(),[3,5];case 4:throw h.sent(),n="Failed to parse model JSON of response from "+this.path+".",this.path.endsWith(".pb")?n+=" Your path contains a .pb file extension. Support for .pb models have been removed in TensorFlow.js 1.0 in favor of .json models. You can re-convert your Python TensorFlow model using the TensorFlow.js 1.0 conversion scripts or you can convert your.pb models with the 'pb2json'NPM script in the tensorflow/tfjs-converter repository.":n+=" Please make sure the server is serving valid JSON for this request.",new Error(n);case 5:if(r=t.modelTopology,o=t.weightsManifest,i=t.generatedBy,a=t.convertedBy,s=t.format,u=t.userDefinedMetadata,null==r&&null==o)throw new Error("The JSON from HTTP path "+this.path+" contains neither model topology or manifest for weights.");return null==o?[3,7]:[4,this.loadWeights(o)];case 6:d=h.sent(),c=d[0],l=d[1],h.label=7;case 7:return[2,{modelTopology:r,weightSpecs:c,weightData:l,userDefinedMetadata:u,generatedBy:i,convertedBy:a,format:s}]}}))}))},e.prototype.loadWeights=function(e){return P(this,void 0,void 0,(function(){var t,n,r,o,i,a,s,u,c,l,d;return L(this,(function(h){switch(h.label){case 0:for(t=Array.isArray(this.path)?this.path[1]:this.path,n=function(e){var t=e.lastIndexOf("/"),n=e.lastIndexOf("?");return[e.substring(0,t)+"/",n>t?e.substring(n):""]}(t),r=n[0],o=n[1],i=this.weightPathPrefix||r,a=[],s=0,u=e;s<u.length;s++)c=u[s],a.push.apply(a,c.weights);return l=[],e.forEach((function(e){e.paths.forEach((function(e){l.push(i+e+o)}))})),[4,uh(l,{requestInit:this.requestInit,fetchFunc:this.fetch,onProgress:this.onProgress})];case 1:return d=h.sent(),[2,[a,Dd(d)]]}}))}))},e.URL_SCHEME_REGEX=/^https?:\/\//,e}();function dh(e){return null!=e.match(lh.URL_SCHEME_REGEX)}var hh=function(e,t){return"undefined"==typeof fetch?null:(Array.isArray(e)?e.every((function(e){return dh(e)})):dh(e))?ph(e,{onProgress:t}):null};function ph(e,t){return new lh(e,t)}Bd.registerSaveRouter(hh),Bd.registerLoadRouter(hh);var fh,mh=function(){function e(e){this.modelArtifacts=e}return e.prototype.load=function(){return P(this,void 0,void 0,(function(){return L(this,(function(e){return[2,this.modelArtifacts]}))}))},e}(),vh=function(){function e(e){this.saveHandler=e}return e.prototype.save=function(e){return P(this,void 0,void 0,(function(){return L(this,(function(t){return[2,this.saveHandler(e)]}))}))},e}(),gh=Object.freeze({browserFiles:function(e){return new ah(e)},browserHTTPRequest:function(e,t){return ph(e,t)},concatenateArrayBuffers:Dd,decodeWeights:Id,encodeWeights:function(e,t){return P(this,void 0,void 0,(function(){var n,r,o,i,a,s=this;return L(this,(function(u){switch(u.label){case 0:for(n=[],r=[],o=Array.isArray(e)?e.map((function(e){return e.name})):Object.keys(e),i=function(i){var a=o[i],u=Array.isArray(e)?e[i].tensor:e[a];if("float32"!==u.dtype&&"int32"!==u.dtype&&"bool"!==u.dtype&&"string"!==u.dtype)throw new Error("Unsupported dtype in weight '"+a+"': "+u.dtype);var c={name:a,shape:u.shape,dtype:u.dtype};if("string"===u.dtype){var l=new Promise((function(e){return P(s,void 0,void 0,(function(){var t,n,r,o,i,a,s;return L(this,(function(c){switch(c.label){case 0:return[4,u.bytes()];case 1:for(t=c.sent(),n=t.reduce((function(e,t){return e+t.length}),0)+4*t.length,r=new Uint8Array(n),o=0,i=0;i<t.length;i++)a=t[i],s=new Uint8Array(new Uint32Array([a.length]).buffer),r.set(s,o),o+=4,r.set(a,o),o+=a.length;return e(r),[2]}}))}))}));r.push(l)}else r.push(u.data());null!=t&&(c.group=t),n.push(c)},a=0;a<o.length;++a)i(a);return[4,Promise.all(r)];case 1:return[2,{data:Rd(u.sent()),specs:n}]}}))}))},fromMemory:function(e,t,n,r){return 1===arguments.length?null!=e.modelTopology||null!=e.weightSpecs?new mh(e):(console.warn("Please call tf.io.fromMemory() with only one argument. The argument should be of type ModelArtifacts. The multi-argument signature of tf.io.fromMemory() has been deprecated and will be removed in a future release."),new mh({modelTopology:e})):(console.warn("Please call tf.io.fromMemory() with only one argument. The argument should be of type ModelArtifacts. The multi-argument signature of tf.io.fromMemory() has been deprecated and will be removed in a future release."),new mh({modelTopology:e,weightSpecs:t,weightData:n,trainingConfig:r}))},getLoadHandlers:function(e,t){return Bd.getLoadHandlers(e,t)},getModelArtifactsInfoForJSON:Nd,getSaveHandlers:function(e){return Bd.getSaveHandlers(e)},http:ph,isHTTPScheme:dh,loadWeights:function(e,t,n,r){return void 0===t&&(t=""),P(this,void 0,void 0,(function(){return L(this,(function(o){return[2,ch((function(e){return uh(e,{requestInit:r})}))(e,t,n)]}))}))},registerLoadRouter:function(e){return Bd.registerLoadRouter(e)},registerSaveRouter:function(e){return Bd.registerSaveRouter(e)},weightsLoaderFactory:ch,withSaveHandler:function(e){return new vh(e)},copyModel:function(e,t){return P(this,void 0,void 0,(function(){return L(this,(function(n){return[2,Ld(e,t,!1)]}))}))},listModels:function(){return P(this,void 0,void 0,(function(){var e,t,n,r,o,i,a;return L(this,(function(s){switch(s.label){case 0:e=Md.getSchemes(),t={},n=0,r=e,s.label=1;case 1:return n<r.length?(o=r[n],[4,Md.getManager(o).listModels()]):[3,4];case 2:for(a in i=s.sent())t[o+Od+a]=i[a];s.label=3;case 3:return n++,[3,1];case 4:return[2,t]}}))}))},moveModel:function(e,t){return P(this,void 0,void 0,(function(){return L(this,(function(n){return[2,Ld(e,t,!0)]}))}))},removeModel:function(e){return P(this,void 0,void 0,(function(){var t;return L(this,(function(n){return t=Pd(e),[2,Md.getManager(t.scheme).removeModel(t.path)]}))}))}}),bh=On({confusionMatrix_:function(e,t,n){var r=wn(e,"labels","confusionMatrix"),o=wn(t,"predictions","confusionMatrix");ee(null==n||n>0&&Number.isInteger(n),(function(){return"If provided, numClasses must be a positive integer, but got "+n})),ee(1===r.rank,(function(){return"Expected the rank of labels to be 1, but got "+r.rank})),ee(1===o.rank,(function(){return"Expected the rank of predictions to be 1, but got "+o.rank})),ee(r.shape[0]===o.shape[0],(function(){return"Mismatch in the number of examples: "+r.shape[0]+" vs. "+o.shape[0]+". Labels and predictions should have the same number of elements."})),ee(n>0&&Number.isInteger(n),(function(){return"numClasses is required to be a positive integer, but got "+n}));var i=Er(r.asType("int32"),n),a=Er(o.asType("int32"),n);return i.transpose().matMul(a).asType("int32")}}),Ah=(Object.freeze({confusionMatrix:bh}),On({fromPixels_:function(e,t){if(void 0===t&&(t=3),t>4)throw new Error("Cannot construct Tensor with more than 4 channels from pixels.");if(null==e)throw new Error("pixels passed to tf.browser.fromPixels() can not be null");var n=!1,r=!1,o=!1,i=!1,a=!1;if(e.data instanceof Uint8Array)n=!0;else if("undefined"!=typeof ImageData&&e instanceof ImageData)r=!0;else if("undefined"!=typeof HTMLVideoElement&&e instanceof HTMLVideoElement)o=!0;else if("undefined"!=typeof HTMLImageElement&&e instanceof HTMLImageElement)i=!0;else{if(null==e.getContext)throw new Error("pixels passed to tf.browser.fromPixels() must be either an HTMLVideoElement, HTMLImageElement, HTMLCanvasElement, ImageData in browser, or OffscreenCanvas, ImageData in webworker or {data: Uint32Array, width: number, height: number}, but was "+e.constructor.name);a=!0}if(o&&o&&e.readyState<2)throw new Error("The video element has not loaded data yet. Please wait for `loadeddata` event on the <video> element.");if(null!=j("FromPixels",dt.backendName))return dt.runKernel("FromPixels",{pixels:e},{numChannels:t});var s,u,c=o?[e.videoWidth,e.videoHeight]:[e.width,e.height],l=c[0],d=c[1];if(a?s=e.getContext("2d").getImageData(0,0,l,d).data:r||n?s=e.data:(i||o)&&(null==fh&&(fh=document.createElement("canvas").getContext("2d")),fh.canvas.width=l,fh.canvas.height=d,fh.drawImage(e,0,0,l,d),s=fh.getImageData(0,0,l,d).data),4===t)u=new Int32Array(s);else{var h=l*d;u=new Int32Array(h*t);for(var p=0;p<h;p++)for(var f=0;f<t;++f)u[p*t+f]=s[4*p+f]}return Hn(u,[d,l,t],"int32")}})),yh=Object.freeze({toPixels:function(e,t){return P(this,void 0,void 0,(function(){var n,r,o,i,a,s,u,c,l,d,h,p,f,m,v,g,b,A,y,x,C,w,k;return L(this,(function(_){switch(_.label){case 0:if(n=wn(e,"img","toPixels"),e instanceof Xe||(n=n.toInt()),2!==n.rank&&3!==n.rank)throw new Error("toPixels only supports rank 2 or 3 tensors, got rank "+n.rank+".");if(r=n.shape.slice(0,2),o=r[0],i=r[1],(a=2===n.rank?1:n.shape[2])>4||2===a)throw new Error("toPixels only supports depth of size 1, 3 or 4 but got "+a);return[4,n.data()];case 1:return s=_.sent(),u=n.min(),c=n.max(),[4,Promise.all([u.data(),c.data()])];case 2:if(l=_.sent(),d=l[0],h=l[1],p=d[0],f=h[0],u.dispose(),c.dispose(),"float32"===n.dtype){if(p<0||f>1)throw new Error("Tensor values for a float32 Tensor must be in the range [0 - 1] but got range ["+p+" - "+f+"].")}else{if("int32"!==n.dtype)throw new Error("Unsupported type for toPixels: "+n.dtype+". Please use float32 or int32 tensors.");if(p<0||f>255)throw new Error("Tensor values for a int32 Tensor must be in the range [0 - 255] but got range ["+p+" - "+f+"].")}for(m="float32"===n.dtype?255:1,v=new Uint8ClampedArray(i*o*4),g=0;g<o*i;++g)b=void 0,A=void 0,y=void 0,x=void 0,1===a?(b=s[g]*m,A=s[g]*m,y=s[g]*m,x=255):3===a?(b=s[3*g]*m,A=s[3*g+1]*m,y=s[3*g+2]*m,x=255):4===a&&(b=s[4*g]*m,A=s[4*g+1]*m,y=s[4*g+2]*m,x=s[4*g+3]*m),v[0+(C=4*g)]=Math.round(b),v[C+1]=Math.round(A),v[C+2]=Math.round(y),v[C+3]=Math.round(x);return null!=t&&(t.width=i,t.height=o,w=t.getContext("2d"),k=new ImageData(v,i,o),w.putImageData(k,0,0)),n!==e&&n.dispose(),[2,v]}}))}))},fromPixels:Ah}),xh=function(){function e(){}return e.prototype.getClassName=function(){return this.constructor.className},e.fromConfig=function(e,t){return new e(t)},e}(),Ch=function(){function e(){this.classNameMap={}}return e.getMap=function(){return null==e.instance&&(e.instance=new e),e.instance},e.register=function(t){e.getMap().classNameMap[t.className]=[t,t.fromConfig]},e}();function wh(e){ee(null!=e.className,(function(){return"Class being registered does not have the static className property defined."})),ee("string"==typeof e.className,(function(){return"className is required to be a string, but got type "+typeof e.className})),ee(e.className.length>0,(function(){return"Class being registered has an empty-string as its className, which is disallowed."})),Ch.register(e)}Object.freeze({Serializable:xh,SerializationMap:Ch,registerClass:wh});function kh(){return 32===dt.backend.floatPrecision()?.001:.1}function _h(e,t,n){var r=!0;if((Ae(e)||Ae(t))&&(r=!1),Ae(e)&&Ae(t)&&(r=!0),r){var o=e.constructor.name,i=t.constructor.name;if(o!==i)throw new Error("Arrays are of different type. Actual: "+o+". Expected: "+i)}if(Array.isArray(e)&&Array.isArray(t)){var a=xn(e),s=xn(t);if(!ie(a,s))throw new Error("Arrays have different shapes. Actual: ["+a+"]. Expected: ["+s+"]")}var u=Ae(e)?e:re(e),c=Ae(t)?t:re(t);if(u.length!==c.length)throw new Error("Arrays have different lengths actual: "+u.length+" vs expected: "+c.length+".\nActual:   "+u+".\nExpected: "+c+".");for(var l=0;l<c.length;++l){var d=u[l],h=c[l];if(!n(d,h))throw new Error("Arrays differ: actual["+l+"] = "+d+", expected["+l+"] = "+h+".\nActual:   "+u+".\nExpected: "+c+".")}}function Eh(e,t,n){return!isFinite(e)&&!isFinite(t)||!(isNaN(e)||isNaN(t)||Math.abs(e-t)>n)}Object.freeze({TEST_EPSILON_FLOAT16:.1,expectArraysClose:function(e,t,n){return null==n&&(n=kh()),_h(e,t,(function(e,t){return Eh(e,t,n)}))},testEpsilon:kh,expectPromiseToFail:function(e,t){e().then((function(){return t.fail()}),(function(){return t()}))},expectArraysEqual:function(e,t){var n="string"==typeof t||"number"==typeof t||"boolean"==typeof t?[t]:t;return Ce(e)||Ce(e[0])||Ce(t)||Ce(t[0])?_h(e,n,(function(e,t){return e==t})):_h(e,t,(function(e,t){return Eh(e,t,0)}))},expectNumbersClose:function(e,t,n){if(null==n&&(n=kh()),!Eh(e,t,n))throw new Error("Numbers differ: actual === "+e+", expected === "+t)},expectValuesInRange:function(e,t,n){for(var r=0;r<e.length;r++)if(e[r]<t||e[r]>n)throw new Error("Value out of range:"+e[r]+" low: "+t+", high: "+n)},expectArrayBuffersEqual:function(e,t){expect(new Float32Array(e)).toEqual(new Float32Array(t))}}),Object.freeze({gpgpu_util:ba,webgl_util:mn,forceHalfFloat:function(){U().set("WEBGL_FORCE_F16_TEXTURES",!0)},MathBackendWebGL:ks,setWebGLContext:At,GPGPUContext:Aa});var Ih=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return M(t,e),t.prototype.minimize=function(e,t,n){void 0===t&&(t=!1);var r=this.computeGradients(e,n),o=r.value,i=r.grads;if(null!=n){var a=n.map((function(e){return{name:e.name,tensor:i[e.name]}}));this.applyGradients(a)}else this.applyGradients(i);return An(i),t?o:(o.dispose(),null)},Object.defineProperty(t.prototype,"iterations",{get:function(){return null==this.iterations_&&(this.iterations_=0),this.iterations_},enumerable:!0,configurable:!0}),t.prototype.incrementIterations=function(){this.iterations_=this.iterations+1},t.prototype.computeGradients=function(e,t){return function(e,t){ee(Ee(e),(function(){return"The f passed in variableGrads(f) must be a function"})),ee(null==t||Array.isArray(t)&&t.every((function(e){return e instanceof tt})),(function(){return"The varList passed in variableGrads(f, varList) must be an array of variables"}));var n=null!=t;if(!n)for(var r in t=[],dt.registeredVariables)t.push(dt.registeredVariables[r]);var o=n?t.filter((function(e){return!e.trainable})):null,i=t.length;ee((t=t.filter((function(e){return e.trainable}))).length>0,(function(){return"variableGrads() expects at least one of the input variables to be trainable, but none of the "+i+" variables is trainable."}));var a=dt.gradients(e,t,null,!0),s=a.value,u=a.grads;ee(u.some((function(e){return null!=e})),(function(){return"Cannot find a connection between any variable and the result of the loss function y=f(x). Please make sure the operations that use variables are inside the function f passed to minimize()."})),ee(0===s.rank,(function(){return"The f passed in variableGrads(f) must return a scalar, but it returned a rank-"+s.rank+" tensor"}));var c={};return t.forEach((function(e,t){null!=u[t]&&(c[e.name]=u[t])})),null!=o&&o.forEach((function(e){return c[e.name]=null})),{value:s,grads:c}}(e,t)},t.prototype.dispose=function(){null!=this.iterations_&&An(this.iterations_)},t.prototype.saveIterations=function(){return P(this,void 0,void 0,(function(){return L(this,(function(e){return null==this.iterations_&&(this.iterations_=0),[2,{name:"iter",tensor:Un(this.iterations_,"int32")}]}))}))},t.prototype.getWeights=function(){return P(this,void 0,void 0,(function(){return L(this,(function(e){throw new Error("getWeights() is not implemented for this optimizer yet.")}))}))},t.prototype.setWeights=function(e){return P(this,void 0,void 0,(function(){return L(this,(function(e){throw new Error("setWeights() is not implemented for this optimizer class "+this.getClassName())}))}))},t.prototype.extractIterations=function(e){return P(this,void 0,void 0,(function(){var t;return L(this,(function(n){switch(n.label){case 0:return t=this,[4,e[0].tensor.data()];case 1:return t.iterations_=n.sent()[0],[2,e.slice(1)]}}))}))},t}(xh);Object.defineProperty(Ih,Symbol.hasInstance,{value:function(e){return null!=e.minimize&&null!=e.computeGradients&&null!=e.applyGradients}});var Rh=function(e){function t(t,n,r){void 0===r&&(r=null);var o=e.call(this)||this;return o.learningRate=t,o.rho=n,o.epsilon=r,o.accumulatedGrads=[],o.accumulatedUpdates=[],null==r&&(o.epsilon=dt.backend.epsilon()),o}return M(t,e),t.prototype.applyGradients=function(e){var t=this;(Array.isArray(e)?e.map((function(e){return e.name})):Object.keys(e)).forEach((function(n,r){var o=dt.registeredVariables[n];null==t.accumulatedGrads[r]&&(t.accumulatedGrads[r]={originalName:n+"/accum_grad",variable:bn((function(){return $n(o).variable(!1)}))}),null==t.accumulatedUpdates[r]&&(t.accumulatedUpdates[r]={originalName:n+"/accum_var",variable:bn((function(){return $n(o).variable(!1)}))});var i=Array.isArray(e)?e[r].tensor:e[n];if(null!=i){var a=t.accumulatedGrads[r].variable,s=t.accumulatedUpdates[r].variable;bn((function(){var e=a.mul(t.rho).add(i.square().mul(1-t.rho)),n=s.add(t.epsilon).sqrt().div(a.add(t.epsilon).sqrt()).mul(i),r=s.mul(t.rho).add(n.square().mul(1-t.rho));a.assign(e),s.assign(r);var u=n.mul(-t.learningRate).add(o);o.assign(u)}))}})),this.incrementIterations()},t.prototype.dispose=function(){null!=this.accumulatedUpdates&&(An(this.accumulatedGrads.map((function(e){return e.variable}))),An(this.accumulatedUpdates.map((function(e){return e.variable}))))},t.prototype.getWeights=function(){return P(this,void 0,void 0,(function(){var e;return L(this,(function(t){switch(t.label){case 0:return e=this.accumulatedGrads.concat(this.accumulatedUpdates),[4,this.saveIterations()];case 1:return[2,[t.sent()].concat(e.map((function(e){return{name:e.originalName,tensor:e.variable}})))]}}))}))},t.prototype.setWeights=function(e){return P(this,void 0,void 0,(function(){var t;return L(this,(function(n){switch(n.label){case 0:return[4,this.extractIterations(e)];case 1:return e=n.sent(),t=e.length/2,this.accumulatedGrads=e.slice(0,t).map((function(e){return{originalName:e.name,variable:e.tensor.variable(!1)}})),this.accumulatedUpdates=e.slice(t,2*t).map((function(e){return{originalName:e.name,variable:e.tensor.variable(!1)}})),[2]}}))}))},t.prototype.getConfig=function(){return{learningRate:this.learningRate,rho:this.rho,epsilon:this.epsilon}},t.fromConfig=function(e,t){return new e(t.learningRate,t.rho,t.epsilon)},t.className="Adadelta",t}(Ih);wh(Rh);var Sh=function(e){function t(t,n){void 0===n&&(n=.1);var r=e.call(this)||this;return r.learningRate=t,r.initialAccumulatorValue=n,r.accumulatedGrads=[],r}return M(t,e),t.prototype.applyGradients=function(e){var t=this;(Array.isArray(e)?e.map((function(e){return e.name})):Object.keys(e)).forEach((function(n,r){var o=dt.registeredVariables[n];null==t.accumulatedGrads[r]&&(t.accumulatedGrads[r]={originalName:n+"/accumulator",variable:bn((function(){return Xn(o.shape,t.initialAccumulatorValue).variable(!1)}))});var i=Array.isArray(e)?e[r].tensor:e[n];if(null!=i){var a=t.accumulatedGrads[r].variable;bn((function(){var e=a.add(i.square());a.assign(e);var n=i.div(e.add(dt.backend.epsilon()).sqrt()).mul(-t.learningRate).add(o);o.assign(n)}))}})),this.incrementIterations()},t.prototype.dispose=function(){null!=this.accumulatedGrads&&An(this.accumulatedGrads.map((function(e){return e.variable})))},t.prototype.getWeights=function(){return P(this,void 0,void 0,(function(){return L(this,(function(e){switch(e.label){case 0:return[4,this.saveIterations()];case 1:return[2,[e.sent()].concat(this.accumulatedGrads.map((function(e){return{name:e.originalName,tensor:e.variable}})))]}}))}))},t.prototype.setWeights=function(e){return P(this,void 0,void 0,(function(){return L(this,(function(t){switch(t.label){case 0:return[4,this.extractIterations(e)];case 1:return e=t.sent(),this.accumulatedGrads=e.map((function(e){return{originalName:e.name,variable:e.tensor.variable(!1)}})),[2]}}))}))},t.prototype.getConfig=function(){return{learningRate:this.learningRate,initialAccumulatorValue:this.initialAccumulatorValue}},t.fromConfig=function(e,t){return new e(t.learningRate,t.initialAccumulatorValue)},t.className="Adagrad",t}(Ih);wh(Sh);var Th=function(e){function t(t,n,r,o){void 0===o&&(o=null);var i=e.call(this)||this;return i.learningRate=t,i.beta1=n,i.beta2=r,i.epsilon=o,i.accumulatedFirstMoment=[],i.accumulatedSecondMoment=[],bn((function(){i.accBeta1=Un(n).variable(),i.accBeta2=Un(r).variable()})),null==o&&(i.epsilon=dt.backend.epsilon()),i}return M(t,e),t.prototype.applyGradients=function(e){var t=this,n=Array.isArray(e)?e.map((function(e){return e.name})):Object.keys(e);bn((function(){var r=Ku(1,t.accBeta1),o=Ku(1,t.accBeta2);n.forEach((function(n,i){var a=dt.registeredVariables[n];null==t.accumulatedFirstMoment[i]&&(t.accumulatedFirstMoment[i]={originalName:n+"/m",variable:bn((function(){return $n(a).variable(!1)}))}),null==t.accumulatedSecondMoment[i]&&(t.accumulatedSecondMoment[i]={originalName:n+"/v",variable:bn((function(){return $n(a).variable(!1)}))});var s=Array.isArray(e)?e[i].tensor:e[n];if(null!=s){var u=t.accumulatedFirstMoment[i].variable,c=t.accumulatedSecondMoment[i].variable,l=u.mul(t.beta1).add(s.mul(1-t.beta1)),d=c.mul(t.beta2).add(s.square().mul(1-t.beta2)),h=l.div(r),p=d.div(o);u.assign(l),c.assign(d);var f=h.div(p.sqrt().add(t.epsilon)).mul(-t.learningRate).add(a);a.assign(f)}})),t.accBeta1.assign(t.accBeta1.mul(t.beta1)),t.accBeta2.assign(t.accBeta2.mul(t.beta2))})),this.incrementIterations()},t.prototype.dispose=function(){this.accBeta1.dispose(),this.accBeta2.dispose(),null!=this.accumulatedFirstMoment&&An(this.accumulatedFirstMoment.map((function(e){return e.variable}))),null!=this.accumulatedSecondMoment&&An(this.accumulatedSecondMoment.map((function(e){return e.variable})))},t.prototype.getWeights=function(){return P(this,void 0,void 0,(function(){var e;return L(this,(function(t){switch(t.label){case 0:return e=this.accumulatedFirstMoment.concat(this.accumulatedSecondMoment),[4,this.saveIterations()];case 1:return[2,[t.sent()].concat(e.map((function(e){return{name:e.originalName,tensor:e.variable}})))]}}))}))},t.prototype.setWeights=function(e){return P(this,void 0,void 0,(function(){var t,n=this;return L(this,(function(r){switch(r.label){case 0:return[4,this.extractIterations(e)];case 1:return e=r.sent(),bn((function(){n.accBeta1.assign(Hu(n.beta1,n.iterations_+1)),n.accBeta2.assign(Hu(n.beta2,n.iterations_+1))})),t=e.length/2,this.accumulatedFirstMoment=e.slice(0,t).map((function(e){return{originalName:e.name,variable:e.tensor.variable(!1)}})),this.accumulatedSecondMoment=e.slice(t,2*t).map((function(e){return{originalName:e.name,variable:e.tensor.variable(!1)}})),[2]}}))}))},t.prototype.getConfig=function(){return{learningRate:this.learningRate,beta1:this.beta1,beta2:this.beta2,epsilon:this.epsilon}},t.fromConfig=function(e,t){return new e(t.learningRate,t.beta1,t.beta2,t.epsilon)},t.className="Adam",t}(Ih);wh(Th);var Dh=function(e){function t(t,n,r,o,i){void 0===o&&(o=null),void 0===i&&(i=0);var a=e.call(this)||this;return a.learningRate=t,a.beta1=n,a.beta2=r,a.epsilon=o,a.decay=i,a.accumulatedFirstMoment=[],a.accumulatedWeightedInfNorm=[],bn((function(){a.iteration=Un(0).variable(),a.accBeta1=Un(n).variable()})),null==o&&(a.epsilon=dt.backend.epsilon()),a}return M(t,e),t.prototype.applyGradients=function(e){var t=this,n=Array.isArray(e)?e.map((function(e){return e.name})):Object.keys(e);bn((function(){var r=Ku(1,t.accBeta1),o=Fu(-t.learningRate,t.iteration.mul(t.decay).add(1));n.forEach((function(n,i){var a=dt.registeredVariables[n];null==t.accumulatedFirstMoment[i]&&(t.accumulatedFirstMoment[i]={originalName:n+"/m",variable:$n(a).variable(!1)}),null==t.accumulatedWeightedInfNorm[i]&&(t.accumulatedWeightedInfNorm[i]={originalName:n+"/v",variable:$n(a).variable(!1)});var s=Array.isArray(e)?e[i].tensor:e[n];if(null!=s){var u=t.accumulatedFirstMoment[i].variable,c=t.accumulatedWeightedInfNorm[i].variable,l=u.mul(t.beta1).add(s.mul(1-t.beta1)),d=c.mul(t.beta2),h=s.abs(),p=d.maximum(h);u.assign(l),c.assign(p);var f=o.div(r).mul(l.div(p.add(t.epsilon))).add(a);a.assign(f)}})),t.iteration.assign(t.iteration.add(1)),t.accBeta1.assign(t.accBeta1.mul(t.beta1))})),this.incrementIterations()},t.prototype.dispose=function(){this.accBeta1.dispose(),this.iteration.dispose(),null!=this.accumulatedFirstMoment&&An(this.accumulatedFirstMoment.map((function(e){return e.variable}))),null!=this.accumulatedWeightedInfNorm&&An(this.accumulatedWeightedInfNorm.map((function(e){return e.variable})))},t.prototype.getWeights=function(){return P(this,void 0,void 0,(function(){return L(this,(function(e){throw new Error("getWeights() is not implemented for Adamax yet.")}))}))},t.prototype.setWeights=function(e){return P(this,void 0,void 0,(function(){return L(this,(function(e){throw new Error("setWeights() is not implemented for Adamax yet.")}))}))},t.prototype.getConfig=function(){return{learningRate:this.learningRate,beta1:this.beta1,beta2:this.beta2,epsilon:this.epsilon,decay:this.decay}},t.fromConfig=function(e,t){return new e(t.learningRate,t.beta1,t.beta2,t.epsilon,t.decay)},t.className="Adamax",t}(Ih);wh(Dh);var Fh=function(e){function t(t){var n=e.call(this)||this;return n.learningRate=t,n.setLearningRate(t),n}return M(t,e),t.prototype.applyGradients=function(e){var t=this;(Array.isArray(e)?e.map((function(e){return e.name})):Object.keys(e)).forEach((function(n,r){var o=Array.isArray(e)?e[r].tensor:e[n];if(null!=o){var i=dt.registeredVariables[n];bn((function(){var e=t.c.mul(o).add(i);i.assign(e)}))}})),this.incrementIterations()},t.prototype.setLearningRate=function(e){this.learningRate=e,null!=this.c&&this.c.dispose(),this.c=function(e){return dt.keep(e)}(Un(-e))},t.prototype.dispose=function(){this.c.dispose()},t.prototype.getWeights=function(){return P(this,void 0,void 0,(function(){return L(this,(function(e){switch(e.label){case 0:return[4,this.saveIterations()];case 1:return[2,[e.sent()]]}}))}))},t.prototype.setWeights=function(e){return P(this,void 0,void 0,(function(){return L(this,(function(t){switch(t.label){case 0:return[4,this.extractIterations(e)];case 1:if(0!==(e=t.sent()).length)throw new Error("SGD optimizer does not have settable weights.");return[2]}}))}))},t.prototype.getConfig=function(){return{learningRate:this.learningRate}},t.fromConfig=function(e,t){return new e(t.learningRate)},t.className="SGD",t}(Ih);wh(Fh);var Nh=function(e){function t(t,n,r){void 0===r&&(r=!1);var o=e.call(this,t)||this;return o.learningRate=t,o.momentum=n,o.useNesterov=r,o.accumulations=[],o.m=Un(o.momentum),o}return M(t,e),t.prototype.applyGradients=function(e){var t=this;(Array.isArray(e)?e.map((function(e){return e.name})):Object.keys(e)).forEach((function(n,r){var o=dt.registeredVariables[n];null==t.accumulations[r]&&(t.accumulations[r]={originalName:n+"/momentum",variable:bn((function(){return $n(o).variable(!1)}))});var i=t.accumulations[r].variable,a=Array.isArray(e)?e[r].tensor:e[n];null!=a&&bn((function(){var e,n=t.m.mul(i).add(a);e=t.useNesterov?t.c.mul(a.add(n.mul(t.m))).add(o):t.c.mul(n).add(o),i.assign(n),o.assign(e)}))})),this.incrementIterations()},t.prototype.dispose=function(){this.m.dispose(),null!=this.accumulations&&An(this.accumulations.map((function(e){return e.variable})))},t.prototype.setMomentum=function(e){this.momentum=e},t.prototype.getWeights=function(){return P(this,void 0,void 0,(function(){return L(this,(function(e){switch(e.label){case 0:return[4,this.saveIterations()];case 1:return[2,[e.sent()].concat(this.accumulations.map((function(e){return{name:e.originalName,tensor:e.variable}})))]}}))}))},t.prototype.setWeights=function(e){return P(this,void 0,void 0,(function(){return L(this,(function(t){switch(t.label){case 0:return[4,this.extractIterations(e)];case 1:return e=t.sent(),this.accumulations=e.map((function(e){return{originalName:e.name,variable:e.tensor.variable(!1)}})),[2]}}))}))},t.prototype.getConfig=function(){return{learningRate:this.learningRate,momentum:this.momentum,useNesterov:this.useNesterov}},t.fromConfig=function(e,t){return new e(t.learningRate,t.momentum,t.useNesterov)},t.className="Momentum",t}(Fh);wh(Nh);var Bh=function(e){function t(t,n,r,o,i){void 0===n&&(n=.9),void 0===r&&(r=0),void 0===o&&(o=null),void 0===i&&(i=!1);var a=e.call(this)||this;if(a.learningRate=t,a.decay=n,a.momentum=r,a.epsilon=o,a.accumulatedMeanSquares=[],a.accumulatedMoments=[],a.accumulatedMeanGrads=[],a.centered=i,null==o&&(a.epsilon=dt.backend.epsilon()),null==t)throw new Error("learningRate for RMSPropOptimizer must be defined.");return a}return M(t,e),t.prototype.applyGradients=function(e){var t=this;(Array.isArray(e)?e.map((function(e){return e.name})):Object.keys(e)).forEach((function(n,r){var o=dt.registeredVariables[n];null==t.accumulatedMeanSquares[r]&&(t.accumulatedMeanSquares[r]={originalName:n+"/rms",variable:bn((function(){return $n(o).variable(!1)}))}),null==t.accumulatedMoments[r]&&(t.accumulatedMoments[r]={originalName:n+"/momentum",variable:bn((function(){return $n(o).variable(!1)}))}),null==t.accumulatedMeanGrads[r]&&t.centered&&(t.accumulatedMeanGrads[r]={originalName:n+"/mg",variable:bn((function(){return $n(o).variable(!1)}))});var i=Array.isArray(e)?e[r].tensor:e[n];if(null!=i){var a=t.accumulatedMeanSquares[r].variable,s=t.accumulatedMoments[r].variable;bn((function(){var e=a.mul(t.decay).add(i.square().mul(1-t.decay));if(t.centered){var n=t.accumulatedMeanGrads[r].variable,u=n.mul(t.decay).add(i.mul(1-t.decay)),c=s.mul(t.momentum).add(i.mul(t.learningRate).div(e.sub(u.square().add(t.epsilon)).sqrt()));a.assign(e),n.assign(u),s.assign(c);var l=o.sub(c);o.assign(l)}else{var d=a.mul(t.decay).add(i.square().mul(1-t.decay));c=s.mul(t.momentum).add(i.mul(t.learningRate).div(d.add(t.epsilon).sqrt())),a.assign(d),s.assign(c),l=o.sub(c),o.assign(l)}}))}})),this.incrementIterations()},t.prototype.dispose=function(){null!=this.accumulatedMeanSquares&&An(this.accumulatedMeanSquares.map((function(e){return e.variable}))),null!=this.accumulatedMeanGrads&&this.centered&&An(this.accumulatedMeanGrads.map((function(e){return e.variable}))),null!=this.accumulatedMoments&&An(this.accumulatedMoments.map((function(e){return e.variable})))},t.prototype.getWeights=function(){return P(this,void 0,void 0,(function(){var e;return L(this,(function(t){switch(t.label){case 0:return e=this.accumulatedMeanSquares.concat(this.accumulatedMoments),this.centered&&e.push.apply(e,this.accumulatedMeanGrads),[4,this.saveIterations()];case 1:return[2,[t.sent()].concat(e.map((function(e){return{name:e.originalName,tensor:e.variable}})))]}}))}))},t.prototype.setWeights=function(e){return P(this,void 0,void 0,(function(){var t;return L(this,(function(n){switch(n.label){case 0:return[4,this.extractIterations(e)];case 1:return e=n.sent(),t=this.centered?e.length/3:e.length/2,this.accumulatedMeanSquares=e.slice(0,t).map((function(e){return{originalName:e.name,variable:e.tensor.variable(!1)}})),this.accumulatedMoments=e.slice(t,2*t).map((function(e){return{originalName:e.name,variable:e.tensor.variable(!1)}})),this.centered&&(this.accumulatedMeanGrads=e.slice(2*t,3*t).map((function(e){return{originalName:e.name,variable:e.tensor.variable(!1)}}))),[2]}}))}))},t.prototype.getConfig=function(){return{learningRate:this.learningRate,decay:this.decay,momentum:this.momentum,epsilon:this.epsilon,centered:this.centered}},t.fromConfig=function(e,t){return new e(t.learningRate,t.decay,t.momentum,t.epsilon,t.centered)},t.className="RMSProp",t}(Ih);wh(Bh);var Oh=function(){function e(){}return e.sgd=function(e){return new Fh(e)},e.momentum=function(e,t,n){return void 0===n&&(n=!1),new Nh(e,t,n)},e.rmsprop=function(e,t,n,r,o){return void 0===t&&(t=.9),void 0===n&&(n=0),void 0===r&&(r=null),void 0===o&&(o=!1),new Bh(e,t,n,r,o)},e.adam=function(e,t,n,r){return void 0===e&&(e=.001),void 0===t&&(t=.9),void 0===n&&(n=.999),void 0===r&&(r=null),new Th(e,t,n,r)},e.adadelta=function(e,t,n){return void 0===e&&(e=.001),void 0===t&&(t=.95),void 0===n&&(n=null),new Rh(e,t,n)},e.adamax=function(e,t,n,r,o){return void 0===e&&(e=.002),void 0===t&&(t=.9),void 0===n&&(n=.999),void 0===r&&(r=null),void 0===o&&(o=0),new Dh(e,t,n,r,o)},e.adagrad=function(e,t){return void 0===t&&(t=.1),new Sh(e,t)},e}();Oh.sgd,Oh.momentum,Oh.adadelta,Oh.adagrad,Oh.rmsprop,Oh.adamax,Oh.adam,"undefined"!=typeof requestAnimationFrame?requestAnimationFrame:"undefined"!=typeof setImmediate&&setImmediate;function Mh(e,t,n){if(void 0===n&&(n=!1),e.beginPath(),t.slice(1).forEach((function(n,r){var o=n.x,i=n.y,a=t[r];e.moveTo(a.x,a.y),e.lineTo(o,i)})),n){var r=t[t.length-1],o=t[0];if(!r||!o)return;e.moveTo(r.x,r.y),e.lineTo(o.x,o.y)}e.stroke()}Xe.prototype.squaredDifference=function(e){return Is(this,e)},qe=ld;var Ph=function(){function e(e,t){if(!qh(e)||!qh(t))throw new Error("Dimensions.constructor - expected width and height to be valid numbers, instead have "+JSON.stringify({width:e,height:t}));this._width=e,this._height=t}return Object.defineProperty(e.prototype,"width",{get:function(){return this._width},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"height",{get:function(){return this._height},enumerable:!0,configurable:!0}),e.prototype.reverse=function(){return new e(1/this.width,1/this.height)},e}();function Lh(e,t){return e instanceof Xe&&e.shape.length===t}function zh(e){return Lh(e,3)}function Wh(e){return Lh(e,4)}function Uh(e){return e%2==0}function Vh(e,t){void 0===t&&(t=2);var n=Math.pow(10,t);return Math.floor(e*n)/n}function Gh(e){return e&&e.width&&e.height}function Hh(e){return e.reduce((function(e,t){return e.add(t)}),new Xh(0,0)).div(new Xh(e.length,e.length))}function jh(e,t,n){return Array(e).fill(0).map((function(e,r){return t+r*n}))}function qh(e){return!!e&&e!==1/0&&e!==-1/0&&!isNaN(e)||0===e}function Kh(e){return qh(e)&&0<=e&&e<=1}var Xh=function(){function e(e,t){this._x=e,this._y=t}return Object.defineProperty(e.prototype,"x",{get:function(){return this._x},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"y",{get:function(){return this._y},enumerable:!0,configurable:!0}),e.prototype.add=function(t){return new e(this.x+t.x,this.y+t.y)},e.prototype.sub=function(t){return new e(this.x-t.x,this.y-t.y)},e.prototype.mul=function(t){return new e(this.x*t.x,this.y*t.y)},e.prototype.div=function(t){return new e(this.x/t.x,this.y/t.y)},e.prototype.abs=function(){return new e(Math.abs(this.x),Math.abs(this.y))},e.prototype.magnitude=function(){return Math.sqrt(Math.pow(this.x,2)+Math.pow(this.y,2))},e.prototype.floor=function(){return new e(Math.floor(this.x),Math.floor(this.y))},e}(),Qh=function(){function e(t,n){void 0===n&&(n=!0);var r=t||{},o=[r.left,r.top,r.right,r.bottom].every(qh),i=[r.x,r.y,r.width,r.height].every(qh);if(!i&&!o)throw new Error("Box.constructor - expected box to be IBoundingBox | IRect, instead have "+JSON.stringify(r));var a=i?[r.x,r.y,r.width,r.height]:[r.left,r.top,r.right-r.left,r.bottom-r.top],s=a[0],u=a[1],c=a[2],l=a[3];e.assertIsValidBox({x:s,y:u,width:c,height:l},"Box.constructor",n),this._x=s,this._y=u,this._width=c,this._height=l}return e.isRect=function(e){return!!e&&[e.x,e.y,e.width,e.height].every(qh)},e.assertIsValidBox=function(t,n,r){if(void 0===r&&(r=!1),!e.isRect(t))throw new Error(n+" - invalid box: "+JSON.stringify(t)+", expected object with properties x, y, width, height");if(!r&&(t.width<0||t.height<0))throw new Error(n+" - width ("+t.width+") and height ("+t.height+") must be positive numbers")},Object.defineProperty(e.prototype,"x",{get:function(){return this._x},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"y",{get:function(){return this._y},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"width",{get:function(){return this._width},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"height",{get:function(){return this._height},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"left",{get:function(){return this.x},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"top",{get:function(){return this.y},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"right",{get:function(){return this.x+this.width},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"bottom",{get:function(){return this.y+this.height},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"area",{get:function(){return this.width*this.height},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"topLeft",{get:function(){return new Xh(this.left,this.top)},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"topRight",{get:function(){return new Xh(this.right,this.top)},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"bottomLeft",{get:function(){return new Xh(this.left,this.bottom)},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"bottomRight",{get:function(){return new Xh(this.right,this.bottom)},enumerable:!0,configurable:!0}),e.prototype.round=function(){var t=[this.x,this.y,this.width,this.height].map((function(e){return Math.round(e)}));return new e({x:t[0],y:t[1],width:t[2],height:t[3]})},e.prototype.floor=function(){var t=[this.x,this.y,this.width,this.height].map((function(e){return Math.floor(e)}));return new e({x:t[0],y:t[1],width:t[2],height:t[3]})},e.prototype.toSquare=function(){var t=this.x,n=this.y,r=this.width,o=this.height,i=Math.abs(r-o);return r<o&&(t-=i/2,r+=i),o<r&&(n-=i/2,o+=i),new e({x:t,y:n,width:r,height:o})},e.prototype.rescale=function(t){var n=Gh(t)?t.width:t,r=Gh(t)?t.height:t;return new e({x:this.x*n,y:this.y*r,width:this.width*n,height:this.height*r})},e.prototype.pad=function(t,n){var r=[this.x-t/2,this.y-n/2,this.width+t,this.height+n];return new e({x:r[0],y:r[1],width:r[2],height:r[3]})},e.prototype.clipAtImageBorders=function(t,n){var r=this.x,o=this.y,i=this.right,a=this.bottom,s=Math.max(r,0),u=Math.max(o,0),c=i-s,l=a-u;return new e({x:s,y:u,width:Math.min(c,t-s),height:Math.min(l,n-u)}).floor()},e.prototype.shift=function(t,n){var r=this.width,o=this.height;return new e({x:this.x+t,y:this.y+n,width:r,height:o})},e.prototype.padAtBorders=function(e,t){var n=this.width+1,r=this.height+1,o=n,i=r,a=this.left,s=this.top,u=this.right,c=this.bottom;return u>t&&(o=-u+t+n,u=t),c>e&&(i=-c+e+r,c=e),a<1&&(i=2-a,a=1),s<1&&(i=2-s,s=1),{dy:1,edy:i,dx:1,edx:o,y:s,ey:c,x:a,ex:u,w:n,h:r}},e.prototype.calibrate=function(t){return new e({left:this.left+t.left*this.width,top:this.top+t.top*this.height,right:this.right+t.right*this.width,bottom:this.bottom+t.bottom*this.height}).toSquare().round()},e}(),Yh=function(e){function t(t,n,r,o,i){return void 0===i&&(i=!1),e.call(this,{left:t,top:n,right:r,bottom:o},i)||this}return o(t,e),t}(Qh),$h=function(){function e(e,t,n,r,o){this._imageDims=new Ph(o.width,o.height),this._score=e,this._classScore=t,this._className=n,this._box=new Qh(r).rescale(this._imageDims)}return Object.defineProperty(e.prototype,"score",{get:function(){return this._score},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"classScore",{get:function(){return this._classScore},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"className",{get:function(){return this._className},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"box",{get:function(){return this._box},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"imageDims",{get:function(){return this._imageDims},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"imageWidth",{get:function(){return this.imageDims.width},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"imageHeight",{get:function(){return this.imageDims.height},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"relativeBox",{get:function(){return new Qh(this._box).rescale(this.imageDims.reverse())},enumerable:!0,configurable:!0}),e.prototype.forSize=function(t,n){return new e(this.score,this.classScore,this.className,this.relativeBox,{width:t,height:n})},e}(),Jh=function(e){function t(t,n,r){return e.call(this,t,t,"",n,r)||this}return o(t,e),t.prototype.forSize=function(n,r){var o=e.prototype.forSize.call(this,n,r);return new t(o.score,o.relativeBox,o.imageDims)},t}($h);function Zh(e,t,n){void 0===n&&(n=!0);var r=Math.max(0,Math.min(e.right,t.right)-Math.max(e.left,t.left))*Math.max(0,Math.min(e.bottom,t.bottom)-Math.max(e.top,t.top));return n?r/(e.area+t.area-r):r/Math.min(e.area,t.area)}function ep(e,t,n,r){void 0===r&&(r=!0);for(var o=t.map((function(e,t){return{score:e,boxIndex:t}})).sort((function(e,t){return e.score-t.score})).map((function(e){return e.boxIndex})),i=[],a=function(){var t=o.pop();i.push(t);for(var a=o,s=[],u=0;u<a.length;u++){var c=a[u],l=e[t],d=e[c];s.push(Zh(l,d,r))}o=o.filter((function(e,t){return s[t]<=n}))};o.length>0;)a();return i}function tp(e,t){return bn((function(){var n=t[0],r=t[1],o=t[2],i=Xn(l(e.shape.slice(0,3),[1]),n),a=Xn(l(e.shape.slice(0,3),[1]),r),s=Xn(l(e.shape.slice(0,3),[1]),o),u=Jn([i,a,s],3);return Ku(e,u)}))}function np(e){return 1/(1+Math.exp(-e))}var rp,op=function(e){function t(t,n,r,o,i){return void 0===i&&(i=!1),e.call(this,{x:t,y:n,width:r,height:o},i)||this}return o(t,e),t}(Qh),ip=function(){function e(e,t,n){void 0===n&&(n=new Xh(0,0));var r=t.width,o=t.height;this._imgDims=new Ph(r,o),this._shift=n,this._positions=e.map((function(e){return e.mul(new Xh(r,o)).add(n)}))}return Object.defineProperty(e.prototype,"shift",{get:function(){return new Xh(this._shift.x,this._shift.y)},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"imageWidth",{get:function(){return this._imgDims.width},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"imageHeight",{get:function(){return this._imgDims.height},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"positions",{get:function(){return this._positions},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"relativePositions",{get:function(){var e=this;return this._positions.map((function(t){return t.sub(e._shift).div(new Xh(e.imageWidth,e.imageHeight))}))},enumerable:!0,configurable:!0}),e.prototype.forSize=function(e,t){return new this.constructor(this.relativePositions,{width:e,height:t})},e.prototype.shiftBy=function(e,t){return new this.constructor(this.relativePositions,this._imgDims,new Xh(e,t))},e.prototype.shiftByPoint=function(e){return this.shiftBy(e.x,e.y)},e.prototype.align=function(e,t){if(void 0===t&&(t={}),e){var n=e instanceof Jh?e.box.floor():new Qh(e);return this.shiftBy(n.x,n.y).align(null,t)}var r=Object.assign({},{useDlibAlignment:!1,minBoxPadding:.2},t),o=r.useDlibAlignment,i=r.minBoxPadding;return o?this.alignDlib():this.alignMinBbox(i)},e.prototype.alignDlib=function(){var e=this.getRefPointsForAlignment(),t=e[0],n=e[1],r=e[2],o=function(e){return r.sub(e).magnitude()},i=(o(t)+o(n))/2,a=Math.floor(i/.45),s=Hh(e),u=Math.floor(Math.max(0,s.x-.5*a)),c=Math.floor(Math.max(0,s.y-.43*a));return new op(u,c,Math.min(a,this.imageWidth+u),Math.min(a,this.imageHeight+c))},e.prototype.alignMinBbox=function(e){var t,n,r,o,i,a,s,u=(t=this.positions,n=t.map((function(e){return e.x})),r=t.map((function(e){return e.y})),o=n.reduce((function(e,t){return t<e?t:e}),1/0),i=r.reduce((function(e,t){return t<e?t:e}),1/0),a=n.reduce((function(e,t){return e<t?t:e}),0),s=r.reduce((function(e,t){return e<t?t:e}),0),new Yh(o,i,a,s));return u.pad(u.width*e,u.height*e)},e.prototype.getRefPointsForAlignment=function(){throw new Error("getRefPointsForAlignment not implemented by base class")},e}(),ap=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return o(t,e),t.prototype.getRefPointsForAlignment=function(){var e=this.positions;return[e[0],e[1],Hh([e[3],e[4]])]},t}(ip),sp=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return o(t,e),t.prototype.getJawOutline=function(){return this.positions.slice(0,17)},t.prototype.getLeftEyeBrow=function(){return this.positions.slice(17,22)},t.prototype.getRightEyeBrow=function(){return this.positions.slice(22,27)},t.prototype.getNose=function(){return this.positions.slice(27,36)},t.prototype.getLeftEye=function(){return this.positions.slice(36,42)},t.prototype.getRightEye=function(){return this.positions.slice(42,48)},t.prototype.getMouth=function(){return this.positions.slice(48,68)},t.prototype.getRefPointsForAlignment=function(){return[this.getLeftEye(),this.getRightEye(),this.getMouth()].map(Hh)},t}(ip),up=function(){function e(e,t){this._label=e,this._distance=t}return Object.defineProperty(e.prototype,"label",{get:function(){return this._label},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"distance",{get:function(){return this._distance},enumerable:!0,configurable:!0}),e.prototype.toString=function(e){return void 0===e&&(e=!0),this.label+(e?" ("+Vh(this.distance)+")":"")},e}(),cp=function(e){function t(t,n){var r=e.call(this,t)||this;return r._label=n,r}return o(t,e),t.assertIsValidLabeledBox=function(e,t){if(Qh.assertIsValidBox(e,t),!qh(e.label))throw new Error(t+" - expected property label ("+e.label+") to be a number")},Object.defineProperty(t.prototype,"label",{get:function(){return this._label},enumerable:!0,configurable:!0}),t}(Qh),lp=function(){function e(e,t){if("string"!=typeof e)throw new Error("LabeledFaceDescriptors - constructor expected label to be a string");if(!Array.isArray(t)||t.some((function(e){return!(e instanceof Float32Array)})))throw new Error("LabeledFaceDescriptors - constructor expected descriptors to be an array of Float32Array");this._label=e,this._descriptors=t}return Object.defineProperty(e.prototype,"label",{get:function(){return this._label},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"descriptors",{get:function(){return this._descriptors},enumerable:!0,configurable:!0}),e.prototype.toJSON=function(){return{label:this.label,descriptors:this.descriptors.map((function(e){return Array.from(e)}))}},e.fromJSON=function(t){var n=t.descriptors.map((function(e){return new Float32Array(e)}));return new e(t.label,n)},e}();!function(e){function t(t,n,r,o){var i=e.call(this,t,n)||this;return i._score=r,i._classScore=o,i}o(t,e),t.assertIsValidPredictedBox=function(e,t){if(cp.assertIsValidLabeledBox(e,t),!Kh(e.score)||!Kh(e.classScore))throw new Error(t+" - expected properties score ("+e.score+") and ("+e.classScore+") to be a number between [0, 1]")},Object.defineProperty(t.prototype,"score",{get:function(){return this._score},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"classScore",{get:function(){return this._classScore},enumerable:!0,configurable:!0})}(cp);function dp(e){return e.detection instanceof Jh}function hp(e,t){var n={detection:t};return Object.assign({},e,n)}function pp(){var e=window.fetch||function(){throw new Error("fetch - missing fetch implementation for browser environment")};return{Canvas:HTMLCanvasElement,CanvasRenderingContext2D:CanvasRenderingContext2D,Image:HTMLImageElement,ImageData:ImageData,Video:HTMLVideoElement,createCanvasElement:function(){return document.createElement("canvas")},createImageElement:function(){return document.createElement("img")},fetch:e,readFile:function(){throw new Error("readFile - filesystem not available for browser environment")}}}function fp(e){var t="";if(!e)try{e=n(18)}catch(e){t=e.toString()}return{readFile:e?function(t){return new Promise((function(n,r){e.readFile(t,(function(e,t){return e?r(e):n(t)}))}))}:function(){throw new Error("readFile - failed to require fs in nodejs environment with error: "+t)}}}function mp(){var e=global.Canvas||global.HTMLCanvasElement,t=global.Image||global.HTMLImageElement,n=global.fetch||function(){throw new Error("fetch - missing fetch implementation for nodejs environment")},r=fp();return i({Canvas:e||function(){},CanvasRenderingContext2D:global.CanvasRenderingContext2D||function(){},Image:t||function(){},ImageData:global.ImageData||function(){},Video:global.HTMLVideoElement||function(){},createCanvasElement:function(){if(e)return new e;throw new Error("createCanvasElement - missing Canvas implementation for nodejs environment")},createImageElement:function(){if(t)return new t;throw new Error("createImageElement - missing Image implementation for nodejs environment")},fetch:n},r)}function vp(){return"object"==typeof window&&"undefined"!=typeof document&&"undefined"!=typeof HTMLImageElement&&"undefined"!=typeof HTMLCanvasElement&&"undefined"!=typeof HTMLVideoElement&&"undefined"!=typeof ImageData&&"undefined"!=typeof CanvasRenderingContext2D}function gp(){return"object"==typeof global&&void 0!==e&&"undefined"!=typeof process&&!!process.version}function bp(e){rp=e}function Ap(){vp()&&bp(pp()),gp()&&bp(mp())}var yp,xp={getEnv:function(){if(!rp)throw new Error("getEnv - environment is not defined, check isNodejs() and isBrowser()");return rp},setEnv:bp,initialize:Ap,createBrowserEnv:pp,createFileSystem:fp,createNodejsEnv:mp,monkeyPatch:function(e){if(rp||Ap(),!rp)throw new Error("monkeyPatch - environment is not defined, check isNodejs() and isBrowser()");var t=e.Canvas,n=void 0===t?rp.Canvas:t,r=e.Image,o=void 0===r?rp.Image:r;rp.Canvas=n,rp.Image=o,rp.createCanvasElement=e.createCanvasElement||function(){return new n},rp.createImageElement=e.createImageElement||function(){return new o},rp.ImageData=e.ImageData||rp.ImageData,rp.Video=e.Video||rp.Video,rp.fetch=e.fetch||rp.fetch,rp.readFile=e.readFile||rp.readFile},isBrowser:vp,isNodejs:gp};function Cp(e){return xp.isNodejs()||"string"!=typeof e?e:document.getElementById(e)}function wp(e){var t=xp.getEnv(),n=t.Canvas;if(e instanceof t.CanvasRenderingContext2D)return e;var r=Cp(e);if(!(r instanceof n))throw new Error("resolveContext2d - expected canvas to be of instance of Canvas");var o=r.getContext("2d");if(!o)throw new Error("resolveContext2d - canvas 2d context is null");return o}Ap(),function(e){e.TOP_LEFT="TOP_LEFT",e.TOP_RIGHT="TOP_RIGHT",e.BOTTOM_LEFT="BOTTOM_LEFT",e.BOTTOM_RIGHT="BOTTOM_RIGHT"}(yp||(yp={}));var kp=function(e){void 0===e&&(e={});var t=e.anchorPosition,n=e.backgroundColor,r=e.fontColor,o=e.fontSize,i=e.fontStyle,a=e.padding;this.anchorPosition=t||yp.TOP_LEFT,this.backgroundColor=n||"rgba(0, 0, 0, 0.5)",this.fontColor=r||"rgba(255, 255, 255, 1)",this.fontSize=o||14,this.fontStyle=i||"Georgia",this.padding=a||4},_p=function(){function e(t,n,r){void 0===r&&(r={}),this.text="string"==typeof t?[t]:t instanceof e?t.text:t,this.anchor=n,this.options=new kp(r)}return e.prototype.measureWidth=function(e){var t=this.options.padding;return this.text.map((function(t){return e.measureText(t).width})).reduce((function(e,t){return e<t?t:e}),0)+2*t},e.prototype.measureHeight=function(){var e=this.options,t=e.fontSize,n=e.padding;return this.text.length*t+2*n},e.prototype.getUpperLeft=function(e,t){var n=this.options.anchorPosition,r=n===yp.BOTTOM_RIGHT||n===yp.TOP_RIGHT,o=n===yp.BOTTOM_LEFT||n===yp.BOTTOM_RIGHT,i=this.measureWidth(e),a=this.measureHeight(),s=r?this.anchor.x-i:this.anchor.x,u=o?this.anchor.y-a:this.anchor.y;if(t){var c=t.width,l=t.height;return{x:Math.max(Math.min(s,c-i),0),y:Math.max(Math.min(u,l-a),0)}}return{x:s,y:u}},e.prototype.draw=function(e){var t=Cp(e),n=wp(t),r=this.options,o=r.backgroundColor,i=r.fontColor,a=r.fontSize,s=r.fontStyle,u=r.padding;n.font=a+"px "+s;var c=this.measureWidth(n),l=this.measureHeight();n.fillStyle=o;var d=this.getUpperLeft(n,t);n.fillRect(d.x,d.y,c,l),n.fillStyle=i,this.text.forEach((function(e,t){var r=u+d.x,o=u+d.y+(t+1)*a;n.fillText(e,r,o)}))},e}(),Ep=function(e){void 0===e&&(e={});var t=e.boxColor,n=e.lineWidth,r=e.label,o=e.drawLabelOptions;this.boxColor=t||"rgba(0, 0, 255, 1)",this.lineWidth=n||2,this.label=r;var i={anchorPosition:yp.BOTTOM_LEFT,backgroundColor:this.boxColor};this.drawLabelOptions=new kp(Object.assign({},i,o))};!function(){function e(e,t){void 0===t&&(t={}),this.box=new Qh(e),this.options=new Ep(t)}e.prototype.draw=function(e){var t=wp(e),n=this.options,r=n.boxColor,o=n.lineWidth,i=this.box,a=i.x,s=i.y,u=i.width,c=i.height;t.strokeStyle=r,t.lineWidth=o,t.strokeRect(a,s,u,c);var l=this.options.label;l&&new _p([l],{x:a-o/2,y:s},this.options.drawLabelOptions).draw(e)}}();function Ip(e){var t=xp.getEnv(),n=t.Image,r=t.Video;return e instanceof n&&e.complete||e instanceof r&&e.readyState>=3}function Rp(e){var t=xp.getEnv(),n=t.Image,r=t.Video;return e instanceof n?new Ph(e.naturalWidth,e.naturalHeight):e instanceof r?new Ph(e.videoWidth,e.videoHeight):new Ph(e.width,e.height)}function Sp(e){var t=e.width,n=e.height,r=(0,xp.getEnv().createCanvasElement)();return r.width=t,r.height=n,r}function Tp(e,t){var n=xp.getEnv().ImageData;if(!(e instanceof n||Ip(e)))throw new Error("createCanvasFromMedia - media has not finished loading yet");var r=t||Rp(e),o=r.width,i=r.height,a=Sp({width:o,height:i});return e instanceof n?wp(a).putImageData(e,0,0):wp(a).drawImage(e,0,0,o,i),a}function Dp(e,t){return a(this,void 0,void 0,(function(){var n,r,o,i,a,u;return s(this,(function(s){switch(s.label){case 0:return n=t||xp.getEnv().createCanvasElement(),r=e.shape.slice(Wh(e)?1:0),o=r[0],i=r[1],a=r[2],u=bn((function(){return e.as3D(o,i,a).toInt()})),[4,yh.toPixels(u,n)];case 1:return s.sent(),u.dispose(),[2,n]}}))}))}function Fp(e){var t=xp.getEnv(),n=t.Image,r=t.Canvas,o=t.Video;return e instanceof n||e instanceof r||e instanceof o}var Np=function(){function e(e,t){var n=this;if(void 0===t&&(t=!1),this._imageTensors=[],this._canvases=[],this._treatAsBatchInput=!1,this._inputDimensions=[],!Array.isArray(e))throw new Error("NetInput.constructor - expected inputs to be an Array of TResolvedNetInput or to be instanceof tf.Tensor4D, instead have "+e);this._treatAsBatchInput=t,this._batchSize=e.length,e.forEach((function(e,t){if(zh(e))return n._imageTensors[t]=e,void(n._inputDimensions[t]=e.shape);if(Wh(e)){var r=e.shape[0];if(1!==r)throw new Error("NetInput - tf.Tensor4D with batchSize "+r+" passed, but not supported in input array");return n._imageTensors[t]=e,void(n._inputDimensions[t]=e.shape.slice(1))}var o=e instanceof xp.getEnv().Canvas?e:Tp(e);n._canvases[t]=o,n._inputDimensions[t]=[o.height,o.width,3]}))}return Object.defineProperty(e.prototype,"imageTensors",{get:function(){return this._imageTensors},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"canvases",{get:function(){return this._canvases},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"isBatchInput",{get:function(){return this.batchSize>1||this._treatAsBatchInput},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"batchSize",{get:function(){return this._batchSize},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"inputDimensions",{get:function(){return this._inputDimensions},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"inputSize",{get:function(){return this._inputSize},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"reshapedInputDimensions",{get:function(){var e=this;return jh(this.batchSize,0,1).map((function(t,n){return e.getReshapedInputDimensions(n)}))},enumerable:!0,configurable:!0}),e.prototype.getInput=function(e){return this.canvases[e]||this.imageTensors[e]},e.prototype.getInputDimensions=function(e){return this._inputDimensions[e]},e.prototype.getInputHeight=function(e){return this._inputDimensions[e][0]},e.prototype.getInputWidth=function(e){return this._inputDimensions[e][1]},e.prototype.getReshapedInputDimensions=function(e){if("number"!=typeof this.inputSize)throw new Error("getReshapedInputDimensions - inputSize not set, toBatchTensor has not been called yet");return function(e,t){var n=e.width,r=e.height,o=t/Math.max(r,n);return new Ph(Math.round(n*o),Math.round(r*o))}({width:this.getInputWidth(e),height:this.getInputHeight(e)},this.inputSize)},e.prototype.toBatchTensor=function(e,t){var n=this;return void 0===t&&(t=!0),this._inputSize=e,bn((function(){var r=jh(n.batchSize,0,1).map((function(r){var o=n.getInput(r);if(o instanceof Xe){var i=Wh(o)?o:o.expandDims();return(i=function(e,t){return void 0===t&&(t=!1),bn((function(){var n=e.shape.slice(1),r=n[0],o=n[1];if(r===o)return e;var i=Math.abs(r-o),a=Math.round(i*(t?.5:1)),s=r>o?2:1,u=function(t){var n=e.shape.slice();return n[s]=t,Xn(n,0)},c=u(a),l=i-c.shape[s],d=[t&&l?u(l):null,e,c].filter((function(e){return!!e})).map((function(e){return e.toFloat()}));return Jn(d,s)}))}(i,t)).shape[1]===e&&i.shape[2]===e||(i=td.resizeBilinear(i,[e,e])),i.as3D(e,e,3)}if(o instanceof xp.getEnv().Canvas)return yh.fromPixels(function(e,t,n){void 0===n&&(n=!1);var r=xp.getEnv(),o=r.Image,i=r.Canvas;if(!(e instanceof o||e instanceof i))throw new Error("imageToSquare - expected arg0 to be HTMLImageElement | HTMLCanvasElement");var a=Rp(e),s=t/Math.max(a.height,a.width),u=s*a.width,c=s*a.height,l=Sp({width:t,height:t}),d=e instanceof i?e:Tp(e),h=Math.abs(u-c)/2,p=n&&u<c?h:0,f=n&&c<u?h:0;return wp(l).drawImage(d,p,f,u,c),l}(o,e,t));throw new Error("toBatchTensor - at batchIdx "+r+", expected input to be instanceof tf.Tensor or instanceof HTMLCanvasElement, instead have "+o)}));return zr(r.map((function(e){return e.toFloat()}))).as4D(n.batchSize,e,e,3)}))},e}();function Bp(e){return a(this,void 0,void 0,(function(){var t,n,r;return s(this,(function(o){switch(o.label){case 0:if(e instanceof Np)return[2,e];if(!(t=Array.isArray(e)?e:[e]).length)throw new Error("toNetInput - empty array passed as input");return n=function(t){return Array.isArray(e)?" at input index "+t+":":""},(r=t.map(Cp)).forEach((function(e,r){if(!Fp(e)&&!zh(e)&&!Wh(e)){if("string"==typeof t[r])throw new Error("toNetInput -"+n(r)+" string passed, but could not resolve HTMLElement for element id "+t[r]);throw new Error("toNetInput -"+n(r)+" expected media to be of type HTMLImageElement | HTMLVideoElement | HTMLCanvasElement | tf.Tensor3D, or to be an element id")}if(Wh(e)){var o=e.shape[0];if(1!==o)throw new Error("toNetInput -"+n(r)+" tf.Tensor4D with batchSize "+o+" passed, but not supported in input array")}})),[4,Promise.all(r.map((function(e){return Fp(e)&&(t=e,new Promise((function(e,n){if(t instanceof xp.getEnv().Canvas||Ip(t))return e();function r(t){t.currentTarget&&(t.currentTarget.removeEventListener("load",r),t.currentTarget.removeEventListener("error",o),e(t))}function o(e){e.currentTarget&&(e.currentTarget.removeEventListener("load",r),e.currentTarget.removeEventListener("error",o),n(e))}t.addEventListener("load",r),t.addEventListener("error",o)})));var t})))];case 1:return o.sent(),[2,new Np(r,Array.isArray(e))]}}))}))}function Op(e,t){return a(this,void 0,void 0,(function(){var n,r,o,i,a,u;return s(this,(function(s){switch(s.label){case 0:return n=xp.getEnv().Canvas,r=e,e instanceof n?[3,5]:[4,Bp(e)];case 1:if((o=s.sent()).batchSize>1)throw new Error("extractFaces - batchSize > 1 not supported");return(i=o.getInput(0))instanceof n?(a=i,[3,4]):[3,2];case 2:return[4,Dp(i)];case 3:a=s.sent(),s.label=4;case 4:r=a,s.label=5;case 5:return u=wp(r),[2,t.map((function(e){return e instanceof Jh?e.forSize(r.width,r.height).box.floor():e})).map((function(e){return e.clipAtImageBorders(r.width,r.height)})).map((function(e){var t=e.x,n=e.y,r=e.width,o=e.height,i=Sp({width:r,height:o});return wp(i).putImageData(u.getImageData(t,n,r,o),0,0),i}))]}}))}))}function Mp(e,t){return a(this,void 0,void 0,(function(){return s(this,(function(n){if(!zh(e)&&!Wh(e))throw new Error("extractFaceTensors - expected image tensor to be 3D or 4D");if(Wh(e)&&e.shape[0]>1)throw new Error("extractFaceTensors - batchSize > 1 not supported");return[2,bn((function(){var n=e.shape.slice(Wh(e)?1:0),r=n[0],o=n[1],i=n[2];return t.map((function(e){return e instanceof Jh?e.forSize(o,r).box:e})).map((function(e){return e.clipAtImageBorders(o,r)})).map((function(t){var n=t.x,a=t.y,s=t.width,u=t.height;return Gc(e.as3D(r,o,i),[a,n,0],[u,s,i])}))}))]}))}))}function Pp(e,t){return a(this,void 0,void 0,(function(){var n;return s(this,(function(r){switch(r.label){case 0:return[4,(0,xp.getEnv().fetch)(e,t)];case 1:if(!((n=r.sent()).status<400))throw new Error("failed to fetch: ("+n.status+") "+n.statusText+", from url: "+n.url);return[2,n]}}))}))}function Lp(e){return a(this,void 0,void 0,(function(){var t,n;return s(this,(function(r){switch(r.label){case 0:return[4,Pp(e)];case 1:return[4,(t=r.sent()).blob()];case 2:if(!(n=r.sent()).type.startsWith("image/"))throw new Error("fetchImage - expected blob type to be of type image/*, instead have: "+n.type+", for url: "+t.url);return[2,(o=n,new Promise((function(e,t){if(!(o instanceof Blob))return t("bufferToImage - expected buf to be of type: Blob");var n=new FileReader;n.onload=function(){if("string"!=typeof n.result)return t("bufferToImage - expected reader.result to be a string, in onload");var r=xp.getEnv().createImageElement();r.onload=function(){return e(r)},r.onerror=t,r.src=n.result},n.onerror=t,n.readAsDataURL(o)})))]}var o}))}))}function zp(e){return a(this,void 0,void 0,(function(){return s(this,(function(t){switch(t.label){case 0:return[4,Pp(e)];case 1:return[2,t.sent().json()]}}))}))}function Wp(e,t){var n=t+"-weights_manifest.json";if(!e)return{modelBaseUri:"",manifestUri:n};if("/"===e)return{modelBaseUri:"/",manifestUri:"/"+n};var r=e.startsWith("http://")?"http://":e.startsWith("https://")?"https://":"",o=(e=e.replace(r,"")).split("/").filter((function(e){return e})),i=e.endsWith(".json")?o[o.length-1]:n,a=r+(e.endsWith(".json")?o.slice(0,o.length-1):o).join("/");return{modelBaseUri:a=e.startsWith("/")?"/"+a:a,manifestUri:"/"===a?"/"+i:a+"/"+i}}function Up(e,t){return a(this,void 0,void 0,(function(){var n,r,o,i;return s(this,(function(a){switch(a.label){case 0:return n=Wp(e,t),r=n.manifestUri,o=n.modelBaseUri,[4,zp(r)];case 1:return i=a.sent(),[2,gh.loadWeights(i,o)]}}))}))}var Vp=function(){function e(e){this._name=e,this._params=void 0,this._paramMappings=[]}return Object.defineProperty(e.prototype,"params",{get:function(){return this._params},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"paramMappings",{get:function(){return this._paramMappings},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"isLoaded",{get:function(){return!!this.params},enumerable:!0,configurable:!0}),e.prototype.getParamFromPath=function(e){var t=this.traversePropertyPath(e);return t.obj[t.objProp]},e.prototype.reassignParamFromPath=function(e,t){var n=this.traversePropertyPath(e),r=n.obj,o=n.objProp;r[o].dispose(),r[o]=t},e.prototype.getParamList=function(){var e=this;return this._paramMappings.map((function(t){var n=t.paramPath;return{path:n,tensor:e.getParamFromPath(n)}}))},e.prototype.getTrainableParams=function(){return this.getParamList().filter((function(e){return e.tensor instanceof tt}))},e.prototype.getFrozenParams=function(){return this.getParamList().filter((function(e){return!(e.tensor instanceof tt)}))},e.prototype.variable=function(){var e=this;this.getFrozenParams().forEach((function(t){var n=t.path,r=t.tensor;e.reassignParamFromPath(n,r.variable())}))},e.prototype.freeze=function(){var e=this;this.getTrainableParams().forEach((function(t){var n=t.path,r=t.tensor,o=zn(r.dataSync());r.dispose(),e.reassignParamFromPath(n,o)}))},e.prototype.dispose=function(e){void 0===e&&(e=!0),this.getParamList().forEach((function(t){if(e&&t.tensor.isDisposed)throw new Error("param tensor has already been disposed for path "+t.path);t.tensor.dispose()})),this._params=void 0},e.prototype.serializeParams=function(){return new Float32Array(this.getParamList().map((function(e){var t=e.tensor;return Array.from(t.dataSync())})).reduce((function(e,t){return e.concat(t)})))},e.prototype.load=function(e){return a(this,void 0,void 0,(function(){return s(this,(function(t){switch(t.label){case 0:return e instanceof Float32Array?(this.extractWeights(e),[2]):[4,this.loadFromUri(e)];case 1:return t.sent(),[2]}}))}))},e.prototype.loadFromUri=function(e){return a(this,void 0,void 0,(function(){var t;return s(this,(function(n){switch(n.label){case 0:if(e&&"string"!=typeof e)throw new Error(this._name+".loadFromUri - expected model uri");return[4,Up(e,this.getDefaultModelName())];case 1:return t=n.sent(),this.loadFromWeightMap(t),[2]}}))}))},e.prototype.loadFromDisk=function(e){return a(this,void 0,void 0,(function(){var t,n,r,o,i,a,u,c,l,d;return s(this,(function(s){switch(s.label){case 0:if(e&&"string"!=typeof e)throw new Error(this._name+".loadFromDisk - expected model file path");return t=xp.getEnv().readFile,n=Wp(e,this.getDefaultModelName()),r=n.manifestUri,o=n.modelBaseUri,i=function(e){return Promise.all(e.map((function(e){return t(e).then((function(e){return e.buffer}))})))},a=gh.weightsLoaderFactory(i),l=(c=JSON).parse,[4,t(r)];case 1:return u=l.apply(c,[s.sent().toString()]),[4,a(u,o)];case 2:return d=s.sent(),this.loadFromWeightMap(d),[2]}}))}))},e.prototype.loadFromWeightMap=function(e){var t=this.extractParamsFromWeigthMap(e),n=t.paramMappings,r=t.params;this._paramMappings=n,this._params=r},e.prototype.extractWeights=function(e){var t=this.extractParams(e),n=t.paramMappings,r=t.params;this._paramMappings=n,this._params=r},e.prototype.traversePropertyPath=function(e){if(!this.params)throw new Error("traversePropertyPath - model has no loaded params");var t=e.split("/").reduce((function(t,n){if(!t.nextObj.hasOwnProperty(n))throw new Error("traversePropertyPath - object does not have property "+n+", for path "+e);return{obj:t.nextObj,objProp:n,nextObj:t.nextObj[n]}}),{nextObj:this.params}),n=t.obj,r=t.objProp;if(!(n&&r&&n[r]instanceof Xe))throw new Error("traversePropertyPath - parameter is not a tensor, for path "+e);return{obj:n,objProp:r}},e}();function Gp(e,t,n){return bn((function(){var r=Cc(e,t.depthwise_filter,t.pointwise_filter,n,"same");return r=Ru(r,t.bias)}))}function Hp(e,t,n){return void 0===n&&(n=!1),bn((function(){var r=al(n?Ru(mc(e,t.conv0.filters,[2,2],"same"),t.conv0.bias):Gp(e,t.conv0,[2,2])),o=Gp(r,t.conv1,[1,1]),i=Gp(al(Ru(r,o)),t.conv2,[1,1]);return al(Ru(r,Ru(o,i)))}))}function jp(e,t,n,r){return void 0===n&&(n=!1),void 0===r&&(r=!0),bn((function(){var o=al(n?Ru(mc(e,t.conv0.filters,r?[2,2]:[1,1],"same"),t.conv0.bias):Gp(e,t.conv0,r?[2,2]:[1,1])),i=Gp(o,t.conv1,[1,1]),a=Gp(al(Ru(o,i)),t.conv2,[1,1]),s=Gp(al(Ru(o,Ru(i,a))),t.conv3,[1,1]);return al(Ru(o,Ru(i,Ru(a,s))))}))}function qp(e,t,n,r){return void 0===n&&(n="same"),void 0===r&&(r=!1),bn((function(){var o=Ru(mc(e,t.filters,[1,1],n),t.bias);return r?al(o):o}))}function Kp(e,t){Object.keys(e).forEach((function(n){t.some((function(e){return e.originalPath===n}))||e[n].dispose()}))}function Xp(e,t){return function(n,r,o,i){var a=jn(e(n*r*o*o),[o,o,n,r]),s=Vn(e(r));return t.push({paramPath:i+"/filters"},{paramPath:i+"/bias"}),{filters:a,bias:s}}}function Qp(e,t){return function(n,r,o){var i=Gn(e(n*r),[n,r]),a=Vn(e(r));return t.push({paramPath:o+"/weights"},{paramPath:o+"/bias"}),{weights:i,bias:a}}}var Yp=function(e,t,n){this.depthwise_filter=e,this.pointwise_filter=t,this.bias=n};function $p(e,t){return function(n,r,o){var i=jn(e(9*n),[3,3,n,1]),a=jn(e(n*r),[1,1,n,r]),s=Vn(e(r));return t.push({paramPath:o+"/depthwise_filter"},{paramPath:o+"/pointwise_filter"},{paramPath:o+"/bias"}),new Yp(i,a,s)}}function Jp(e){return function(t){var n=e(t+"/depthwise_filter",4),r=e(t+"/pointwise_filter",4),o=e(t+"/bias",1);return new Yp(n,r,o)}}function Zp(e,t){return function(n,r,o){var i=e[n];if(!Lh(i,r))throw new Error("expected weightMap["+n+"] to be a Tensor"+r+"D, instead have "+i);return t.push({originalPath:n,paramPath:o||n}),i}}function ef(e){var t=e;return{extractWeights:function(e){var n=t.slice(0,e);return t=t.slice(e),n},getRemainingWeights:function(){return t}}}function tf(e,t){var n=Xp(e,t),r=$p(e,t);function o(e,t,o,i){return void 0===i&&(i=!1),{conv0:i?n(e,t,3,o+"/conv0"):r(e,t,o+"/conv0"),conv1:r(t,t,o+"/conv1"),conv2:r(t,t,o+"/conv2")}}return{extractDenseBlock3Params:o,extractDenseBlock4Params:function(e,t,n,i){void 0===i&&(i=!1);var a=o(e,t,n,i);return{conv0:a.conv0,conv1:a.conv1,conv2:a.conv2,conv3:r(t,t,n+"/conv3")}}}}function nf(e){return function(t){return{filters:e(t+"/filters",4),bias:e(t+"/bias",1)}}}function rf(e,t){var n=Zp(e,t),r=nf(n),o=Jp(n);return{extractDenseBlock3Params:function(e,t){return void 0===t&&(t=!1),{conv0:t?r(e+"/conv0"):o(e+"/conv0"),conv1:o(e+"/conv1"),conv2:o(e+"/conv2")}},extractDenseBlock4Params:function(e,t){return void 0===t&&(t=!1),{conv0:t?r(e+"/conv0"):o(e+"/conv0"),conv1:o(e+"/conv1"),conv2:o(e+"/conv2"),conv3:o(e+"/conv3")}}}}var of=function(e){function t(){return e.call(this,"FaceFeatureExtractor")||this}return o(t,e),t.prototype.forwardInput=function(e){var t=this.params;if(!t)throw new Error("FaceFeatureExtractor - load model before inference");return bn((function(){var n=jp(tp(e.toBatchTensor(112,!0),[122.782,117.001,104.298]).div(Un(255)),t.dense0,!0);return n=jp(n,t.dense1),n=jp(n,t.dense2),n=jp(n,t.dense3),n=Mc(n,[7,7],[2,2],"valid")}))},t.prototype.forward=function(e){return a(this,void 0,void 0,(function(){var t;return s(this,(function(n){switch(n.label){case 0:return t=this.forwardInput,[4,Bp(e)];case 1:return[2,t.apply(this,[n.sent()])]}}))}))},t.prototype.getDefaultModelName=function(){return"face_feature_extractor_model"},t.prototype.extractParamsFromWeigthMap=function(e){return function(e){var t=[],n=rf(e,t).extractDenseBlock4Params,r={dense0:n("dense0",!0),dense1:n("dense1"),dense2:n("dense2"),dense3:n("dense3")};return Kp(e,t),{params:r,paramMappings:t}}(e)},t.prototype.extractParams=function(e){return function(e){var t=[],n=ef(e),r=n.extractWeights,o=n.getRemainingWeights,i=tf(r,t).extractDenseBlock4Params,a=i(3,32,"dense0",!0),s=i(32,64,"dense1"),u=i(64,128,"dense2"),c=i(128,256,"dense3");if(0!==o().length)throw new Error("weights remaing after extract: "+o().length);return{paramMappings:t,params:{dense0:a,dense1:s,dense2:u,dense3:c}}}(e)},t}(Vp);function af(e,t){return bn((function(){return Ru(_c(e,t.weights),t.bias)}))}function sf(e){var t={},n={};return Object.keys(e).forEach((function(r){(r.startsWith("fc")?n:t)[r]=e[r]})),{featureExtractorMap:t,classifierMap:n}}var uf=function(e){function t(t,n){var r=e.call(this,t)||this;return r._faceFeatureExtractor=n,r}return o(t,e),Object.defineProperty(t.prototype,"faceFeatureExtractor",{get:function(){return this._faceFeatureExtractor},enumerable:!0,configurable:!0}),t.prototype.runNet=function(e){var t=this,n=this.params;if(!n)throw new Error(this._name+" - load model before inference");return bn((function(){var r=e instanceof Np?t.faceFeatureExtractor.forwardInput(e):e;return af(r.as2D(r.shape[0],-1),n.fc)}))},t.prototype.dispose=function(t){void 0===t&&(t=!0),this.faceFeatureExtractor.dispose(t),e.prototype.dispose.call(this,t)},t.prototype.loadClassifierParams=function(e){var t=this.extractClassifierParams(e),n=t.params,r=t.paramMappings;this._params=n,this._paramMappings=r},t.prototype.extractClassifierParams=function(e){return function(e,t,n){var r=[],o=ef(e),i=o.extractWeights,a=o.getRemainingWeights,s=Qp(i,r)(t,n,"fc");if(0!==a().length)throw new Error("weights remaing after extract: "+a().length);return{paramMappings:r,params:{fc:s}}}(e,this.getClassifierChannelsIn(),this.getClassifierChannelsOut())},t.prototype.extractParamsFromWeigthMap=function(e){var t=sf(e),n=t.featureExtractorMap,r=t.classifierMap;return this.faceFeatureExtractor.loadFromWeightMap(n),function(e){var t,n=[],r=Zp(e,n),o={fc:(t="fc",{weights:r(t+"/weights",2),bias:r(t+"/bias",1)})};return Kp(e,n),{params:o,paramMappings:n}}(r)},t.prototype.extractParams=function(e){var t=this.getClassifierChannelsIn(),n=this.getClassifierChannelsOut(),r=n*t+n,o=e.slice(0,e.length-r),i=e.slice(e.length-r);return this.faceFeatureExtractor.extractWeights(o),this.extractClassifierParams(i)},t}(Vp),cf=["neutral","happy","sad","angry","fearful","disgusted","surprised"],lf=function(){function e(e){var t=this;if(7!==e.length)throw new Error("FaceExpressions.constructor - expected probabilities.length to be 7, have: "+e.length);cf.forEach((function(n,r){t[n]=e[r]}))}return e.prototype.asSortedArray=function(){var e=this;return cf.map((function(t){return{expression:t,probability:e[t]}})).sort((function(e,t){return t.probability-e.probability}))},e}(),df=function(e){function t(t){return void 0===t&&(t=new of),e.call(this,"FaceExpressionNet",t)||this}return o(t,e),t.prototype.forwardInput=function(e){var t=this;return bn((function(){return so(t.runNet(e))}))},t.prototype.forward=function(e){return a(this,void 0,void 0,(function(){var t;return s(this,(function(n){switch(n.label){case 0:return t=this.forwardInput,[4,Bp(e)];case 1:return[2,t.apply(this,[n.sent()])]}}))}))},t.prototype.predictExpressions=function(e){return a(this,void 0,void 0,(function(){var t,n,r,o,i=this;return s(this,(function(u){switch(u.label){case 0:return[4,Bp(e)];case 1:return t=u.sent(),[4,this.forwardInput(t)];case 2:return n=u.sent(),[4,Promise.all(Vr(n).map((function(e){return a(i,void 0,void 0,(function(){var t;return s(this,(function(n){switch(n.label){case 0:return[4,e.data()];case 1:return t=n.sent(),e.dispose(),[2,t]}}))}))})))];case 3:return r=u.sent(),n.dispose(),o=r.map((function(e){return new lf(e)})),[2,t.isBatchInput?o:o[0]]}}))}))},t.prototype.getDefaultModelName=function(){return"face_expression_model"},t.prototype.getClassifierChannelsIn=function(){return 256},t.prototype.getClassifierChannelsOut=function(){return 7},t}(uf);function hf(e,t){var n={expressions:t};return Object.assign({},e,n)}function pf(e){return dp(e)&&e.landmarks instanceof ip&&e.unshiftedLandmarks instanceof ip&&e.alignedRect instanceof Jh}function ff(e,t){var n=e.detection.box,r=t.shiftBy(n.x,n.y),o=r.align(),i=e.detection.imageDims,a={landmarks:r,unshiftedLandmarks:t,alignedRect:new Jh(e.detection.score,o.rescale(i.reverse()),i)};return Object.assign({},e,a)}var mf=function(e){void 0===e&&(e={});var t=e.drawLines,n=void 0===t||t,r=e.drawPoints,o=void 0===r||r,i=e.lineWidth,a=e.lineColor,s=e.pointSize,u=e.pointColor;this.drawLines=n,this.drawPoints=o,this.lineWidth=i||1,this.pointSize=s||2,this.lineColor=a||"rgba(0, 255, 255, 1)",this.pointColor=u||"rgba(255, 0, 255, 1)"};!function(){function e(e,t){void 0===t&&(t={}),this.faceLandmarks=e,this.options=new mf(t)}e.prototype.draw=function(e){var t=wp(e),n=this.options,r=n.drawLines,o=n.drawPoints,i=n.lineWidth,a=n.lineColor,s=n.pointSize,u=n.pointColor;if(r&&this.faceLandmarks instanceof sp&&(t.strokeStyle=a,t.lineWidth=i,Mh(t,this.faceLandmarks.getJawOutline()),Mh(t,this.faceLandmarks.getLeftEyeBrow()),Mh(t,this.faceLandmarks.getRightEyeBrow()),Mh(t,this.faceLandmarks.getNose()),Mh(t,this.faceLandmarks.getLeftEye(),!0),Mh(t,this.faceLandmarks.getRightEye(),!0),Mh(t,this.faceLandmarks.getMouth(),!0)),o){t.strokeStyle=u,t.fillStyle=u;this.faceLandmarks.positions.forEach((function(e){t.beginPath(),t.arc(e.x,e.y,s,0,2*Math.PI),t.fill()}))}}}();function vf(e,t){var n=[],r=ef(e),o=r.extractWeights,i=r.getRemainingWeights,a=function(e,t){var n=Xp(e,t),r=$p(e,t);return{extractConvParams:n,extractSeparableConvParams:r,extractReductionBlockParams:function(e,t,o){return{separable_conv0:r(e,t,o+"/separable_conv0"),separable_conv1:r(t,t,o+"/separable_conv1"),expansion_conv:n(e,t,1,o+"/expansion_conv")}},extractMainBlockParams:function(e,t){return{separable_conv0:r(e,e,t+"/separable_conv0"),separable_conv1:r(e,e,t+"/separable_conv1"),separable_conv2:r(e,e,t+"/separable_conv2")}}}}(o,n),s=a.extractConvParams,u=a.extractSeparableConvParams,c=a.extractReductionBlockParams,l=a.extractMainBlockParams,d={conv_in:s(3,32,3,"entry_flow/conv_in"),reduction_block_0:c(32,64,"entry_flow/reduction_block_0"),reduction_block_1:c(64,128,"entry_flow/reduction_block_1")},h={};jh(t,0,1).forEach((function(e){h["main_block_"+e]=l(128,"middle_flow/main_block_"+e)}));var p={reduction_block:c(128,256,"exit_flow/reduction_block"),separable_conv:u(256,512,"exit_flow/separable_conv")};if(0!==i().length)throw new Error("weights remaing after extract: "+i().length);return{paramMappings:n,params:{entry_flow:d,middle_flow:h,exit_flow:p}}}function gf(e,t){var n=[],r=function(e,t){var n=Zp(e,t),r=nf(n),o=Jp(n);return{extractConvParams:r,extractSeparableConvParams:o,extractReductionBlockParams:function(e){return{separable_conv0:o(e+"/separable_conv0"),separable_conv1:o(e+"/separable_conv1"),expansion_conv:r(e+"/expansion_conv")}},extractMainBlockParams:function(e){return{separable_conv0:o(e+"/separable_conv0"),separable_conv1:o(e+"/separable_conv1"),separable_conv2:o(e+"/separable_conv2")}}}}(e,n),o=r.extractConvParams,i=r.extractSeparableConvParams,a=r.extractReductionBlockParams,s=r.extractMainBlockParams,u={conv_in:o("entry_flow/conv_in"),reduction_block_0:a("entry_flow/reduction_block_0"),reduction_block_1:a("entry_flow/reduction_block_1")},c={};jh(t,0,1).forEach((function(e){c["main_block_"+e]=s("middle_flow/main_block_"+e)}));var l={reduction_block:a("exit_flow/reduction_block"),separable_conv:i("exit_flow/separable_conv")};return Kp(e,n),{params:{entry_flow:u,middle_flow:c,exit_flow:l},paramMappings:n}}function bf(e,t,n){return Ru(mc(e,t.filters,n,"same"),t.bias)}function Af(e,t,n){void 0===n&&(n=!0);var r=n?al(e):e;return r=Gp(r,t.separable_conv0,[1,1]),r=Gp(al(r),t.separable_conv1,[1,1]),r=Oc(r,[3,3],[2,2],"same"),r=Ru(r,bf(e,t.expansion_conv,[2,2]))}var yf,xf=function(e){function t(t){var n=e.call(this,"TinyXception")||this;return n._numMainBlocks=t,n}return o(t,e),t.prototype.forwardInput=function(e){var t=this,n=this.params;if(!n)throw new Error("TinyXception - load model before inference");return bn((function(){var r=tp(e.toBatchTensor(112,!0),[122.782,117.001,104.298]).div(Un(256)),o=al(bf(r,n.entry_flow.conv_in,[2,2]));return o=Af(o,n.entry_flow.reduction_block_0,!1),o=Af(o,n.entry_flow.reduction_block_1),jh(t._numMainBlocks,0,1).forEach((function(e){o=function(e,t){var n=Gp(al(e),t.separable_conv0,[1,1]);return n=Gp(al(n),t.separable_conv1,[1,1]),n=Gp(al(n),t.separable_conv2,[1,1]),n=Ru(n,e)}(o,n.middle_flow["main_block_"+e])})),o=Af(o,n.exit_flow.reduction_block),o=al(Gp(o,n.exit_flow.separable_conv,[1,1]))}))},t.prototype.forward=function(e){return a(this,void 0,void 0,(function(){var t;return s(this,(function(n){switch(n.label){case 0:return t=this.forwardInput,[4,Bp(e)];case 1:return[2,t.apply(this,[n.sent()])]}}))}))},t.prototype.getDefaultModelName=function(){return"tiny_xception_model"},t.prototype.extractParamsFromWeigthMap=function(e){return gf(e,this._numMainBlocks)},t.prototype.extractParams=function(e){return vf(e,this._numMainBlocks)},t}(Vp);!function(e){e.FEMALE="female",e.MALE="male"}(yf||(yf={}));var Cf=function(e){function t(t){void 0===t&&(t=new xf(2));var n=e.call(this,"AgeGenderNet")||this;return n._faceFeatureExtractor=t,n}return o(t,e),Object.defineProperty(t.prototype,"faceFeatureExtractor",{get:function(){return this._faceFeatureExtractor},enumerable:!0,configurable:!0}),t.prototype.runNet=function(e){var t=this,n=this.params;if(!n)throw new Error(this._name+" - load model before inference");return bn((function(){var r=e instanceof Np?t.faceFeatureExtractor.forwardInput(e):e,o=Mc(r,[7,7],[2,2],"valid").as2D(r.shape[0],-1);return{age:af(o,n.fc.age).as1D(),gender:af(o,n.fc.gender)}}))},t.prototype.forwardInput=function(e){var t=this;return bn((function(){var n=t.runNet(e),r=n.age,o=n.gender;return{age:r,gender:so(o)}}))},t.prototype.forward=function(e){return a(this,void 0,void 0,(function(){var t;return s(this,(function(n){switch(n.label){case 0:return t=this.forwardInput,[4,Bp(e)];case 1:return[2,t.apply(this,[n.sent()])]}}))}))},t.prototype.predictAgeAndGender=function(e){return a(this,void 0,void 0,(function(){var t,n,r,o,i,u,c=this;return s(this,(function(l){switch(l.label){case 0:return[4,Bp(e)];case 1:return t=l.sent(),[4,this.forwardInput(t)];case 2:return n=l.sent(),r=Vr(n.age),o=Vr(n.gender),i=r.map((function(e,t){return{ageTensor:e,genderTensor:o[t]}})),[4,Promise.all(i.map((function(e){var t=e.ageTensor,n=e.genderTensor;return a(c,void 0,void 0,(function(){var e,r,o,i,a;return s(this,(function(s){switch(s.label){case 0:return[4,t.data()];case 1:return e=s.sent()[0],[4,n.data()];case 2:return r=s.sent()[0],i=(o=r>.5)?yf.MALE:yf.FEMALE,a=o?r:1-r,t.dispose(),n.dispose(),[2,{age:e,gender:i,genderProbability:a}]}}))}))})))];case 3:return u=l.sent(),n.age.dispose(),n.gender.dispose(),[2,t.isBatchInput?u:u[0]]}}))}))},t.prototype.getDefaultModelName=function(){return"age_gender_model"},t.prototype.dispose=function(t){void 0===t&&(t=!0),this.faceFeatureExtractor.dispose(t),e.prototype.dispose.call(this,t)},t.prototype.loadClassifierParams=function(e){var t=this.extractClassifierParams(e),n=t.params,r=t.paramMappings;this._params=n,this._paramMappings=r},t.prototype.extractClassifierParams=function(e){return function(e){var t=[],n=ef(e),r=n.extractWeights,o=n.getRemainingWeights,i=Qp(r,t),a=i(512,1,"fc/age"),s=i(512,2,"fc/gender");if(0!==o().length)throw new Error("weights remaing after extract: "+o().length);return{paramMappings:t,params:{fc:{age:a,gender:s}}}}(e)},t.prototype.extractParamsFromWeigthMap=function(e){var t=sf(e),n=t.featureExtractorMap,r=t.classifierMap;return this.faceFeatureExtractor.loadFromWeightMap(n),function(e){var t=[],n=Zp(e,t);function r(e){return{weights:n(e+"/weights",2),bias:n(e+"/bias",1)}}var o={fc:{age:r("fc/age"),gender:r("fc/gender")}};return Kp(e,t),{params:o,paramMappings:t}}(r)},t.prototype.extractParams=function(e){var t=e.slice(0,e.length-1539),n=e.slice(e.length-1539);return this.faceFeatureExtractor.extractWeights(t),this.extractClassifierParams(n)},t}(Vp),wf=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return o(t,e),t.prototype.postProcess=function(e,t,n){var r=n.map((function(e){var n=e.width,r=e.height,o=t/Math.max(r,n);return{width:n*o,height:r*o}})),o=r.length;return bn((function(){var n=function(e,t){return zr([Xn([68],e),Xn([68],t)],1).as2D(1,136).as1D()},i=function(e,t){var n=r[e],o=n.width,i=n.height;return t(o,i)?Math.abs(o-i)/2:0};return e.mul(Xn([o,136],t)).sub(zr(Array.from(Array(o),(function(e,t){return n(function(e){return i(e,(function(e,t){return e<t}))}(t),function(e){return i(e,(function(e,t){return t<e}))}(t))})))).div(zr(Array.from(Array(o),(function(e,t){return n(r[t].width,r[t].height)}))))}))},t.prototype.forwardInput=function(e){var t=this;return bn((function(){var n=t.runNet(e);return t.postProcess(n,e.inputSize,e.inputDimensions.map((function(e){return{height:e[0],width:e[1]}})))}))},t.prototype.forward=function(e){return a(this,void 0,void 0,(function(){var t;return s(this,(function(n){switch(n.label){case 0:return t=this.forwardInput,[4,Bp(e)];case 1:return[2,t.apply(this,[n.sent()])]}}))}))},t.prototype.detectLandmarks=function(e){return a(this,void 0,void 0,(function(){var t,n,r,o=this;return s(this,(function(i){switch(i.label){case 0:return[4,Bp(e)];case 1:return t=i.sent(),n=bn((function(){return Vr(o.forwardInput(t))})),[4,Promise.all(n.map((function(e,n){return a(o,void 0,void 0,(function(){var r,o,i,a,u;return s(this,(function(s){switch(s.label){case 0:return i=(o=Array).from,[4,e.data()];case 1:return r=i.apply(o,[s.sent()]),a=r.filter((function(e,t){return Uh(t)})),u=r.filter((function(e,t){return!Uh(t)})),[2,new sp(Array(68).fill(0).map((function(e,t){return new Xh(a[t],u[t])})),{height:t.getInputHeight(n),width:t.getInputWidth(n)})]}}))}))})))];case 2:return r=i.sent(),n.forEach((function(e){return e.dispose()})),[2,t.isBatchInput?r:r[0]]}}))}))},t.prototype.getClassifierChannelsOut=function(){return 136},t}(uf),kf=function(e){function t(t){return void 0===t&&(t=new of),e.call(this,"FaceLandmark68Net",t)||this}return o(t,e),t.prototype.getDefaultModelName=function(){return"face_landmark_68_model"},t.prototype.getClassifierChannelsIn=function(){return 256},t}(wf);var _f=function(e){function t(){return e.call(this,"TinyFaceFeatureExtractor")||this}return o(t,e),t.prototype.forwardInput=function(e){var t=this.params;if(!t)throw new Error("TinyFaceFeatureExtractor - load model before inference");return bn((function(){var n=Hp(tp(e.toBatchTensor(112,!0),[122.782,117.001,104.298]).div(Un(255)),t.dense0,!0);return n=Hp(n,t.dense1),n=Hp(n,t.dense2),n=Mc(n,[14,14],[2,2],"valid")}))},t.prototype.forward=function(e){return a(this,void 0,void 0,(function(){var t;return s(this,(function(n){switch(n.label){case 0:return t=this.forwardInput,[4,Bp(e)];case 1:return[2,t.apply(this,[n.sent()])]}}))}))},t.prototype.getDefaultModelName=function(){return"face_feature_extractor_tiny_model"},t.prototype.extractParamsFromWeigthMap=function(e){return function(e){var t=[],n=rf(e,t).extractDenseBlock3Params,r={dense0:n("dense0",!0),dense1:n("dense1"),dense2:n("dense2")};return Kp(e,t),{params:r,paramMappings:t}}(e)},t.prototype.extractParams=function(e){return function(e){var t=[],n=ef(e),r=n.extractWeights,o=n.getRemainingWeights,i=tf(r,t).extractDenseBlock3Params,a=i(3,32,"dense0",!0),s=i(32,64,"dense1"),u=i(64,128,"dense2");if(0!==o().length)throw new Error("weights remaing after extract: "+o().length);return{paramMappings:t,params:{dense0:a,dense1:s,dense2:u}}}(e)},t}(Vp),Ef=function(e){function t(t){return void 0===t&&(t=new _f),e.call(this,"FaceLandmark68TinyNet",t)||this}return o(t,e),t.prototype.getDefaultModelName=function(){return"face_landmark_68_tiny_model"},t.prototype.getClassifierChannelsIn=function(){return 128},t}(wf);!function(e){function t(){return null!==e&&e.apply(this,arguments)||this}o(t,e)}(kf);function If(e,t,n,r,o){void 0===o&&(o="same");var i=t.conv,a=i.filters,s=i.bias,u=mc(e,a,n,o);return u=function(e,t){return Ru(Vu(e,t.weights),t.biases)}(u=Ru(u,s),t.scale),r?al(u):u}function Rf(e,t){return If(e,t,[1,1],!1)}function Sf(e,t){return If(e,t,[2,2],!0,"valid")}function Tf(e,t){function n(n,r,o,i){var a=function(t,n,r){var o=e(t),i=o.length/(n*r*r);if(i%1!=0)throw new Error("depth has to be an integer: "+i+", weights.length: "+o.length+", numFilters: "+n+", filterSize: "+r);return bn((function(){return cl(jn(o,[n,i,r,r]),[2,3,1,0])}))}(n,r,o),s=Vn(e(r));return t.push({paramPath:i+"/filters"},{paramPath:i+"/bias"}),{filters:a,bias:s}}function r(r,o,i,a){return{conv:n(r,o,i,a+"/conv"),scale:function(n,r){var o=Vn(e(n)),i=Vn(e(n));return t.push({paramPath:r+"/weights"},{paramPath:r+"/biases"}),{weights:o,biases:i}}(o,a+"/scale")}}return{extractConvLayerParams:r,extractResidualLayerParams:function(e,t,n,o,i){return void 0===i&&(i=!1),{conv1:r((i?.5:1)*e,t,n,o+"/conv1"),conv2:r(e,t,n,o+"/conv2")}}}}function Df(e,t){var n=Zp(e,t);function r(e){return{conv:{filters:n(e+"/conv/filters",4),bias:n(e+"/conv/bias",1)},scale:function(e){return{weights:n(e+"/scale/weights",1),biases:n(e+"/scale/biases",1)}}(e)}}return{extractConvLayerParams:r,extractResidualLayerParams:function(e){return{conv1:r(e+"/conv1"),conv2:r(e+"/conv2")}}}}function Ff(e){var t=[],n=Df(e,t),r=n.extractConvLayerParams,o=n.extractResidualLayerParams,i=r("conv32_down"),a=o("conv32_1"),s=o("conv32_2"),u=o("conv32_3"),c=o("conv64_down"),l=o("conv64_1"),d=o("conv64_2"),h=o("conv64_3"),p=o("conv128_down"),f=o("conv128_1"),m=o("conv128_2"),v=o("conv256_down"),g=o("conv256_1"),b=o("conv256_2"),A=o("conv256_down_out"),y=e.fc;if(t.push({originalPath:"fc",paramPath:"fc"}),!Lh(y,2))throw new Error("expected weightMap[fc] to be a Tensor2D, instead have "+y);var x={conv32_down:i,conv32_1:a,conv32_2:s,conv32_3:u,conv64_down:c,conv64_1:l,conv64_2:d,conv64_3:h,conv128_down:p,conv128_1:f,conv128_2:m,conv256_down:v,conv256_1:g,conv256_2:b,conv256_down_out:A,fc:y};return Kp(e,t),{params:x,paramMappings:t}}function Nf(e,t){var n=function(e,t){return If(e,t,[1,1],!0)}(e,t.conv1);return n=Rf(n,t.conv2),n=Ru(n,e),n=al(n)}function Bf(e,t){var n=Sf(e,t.conv1);n=Rf(n,t.conv2);var r=Mc(e,2,2,"valid"),o=Kn(r.shape),i=r.shape[3]!==n.shape[3];if(r.shape[1]!==n.shape[1]||r.shape[2]!==n.shape[2]){var a=l(n.shape);a[1]=1;var s=Kn(a),u=l((n=Jn([n,s],1)).shape);u[2]=1;var c=Kn(u);n=Jn([n,c],2)}return r=i?Jn([r,o],3):r,n=Ru(r,n),n=al(n)}var Of=function(e){function t(){return e.call(this,"FaceRecognitionNet")||this}return o(t,e),t.prototype.forwardInput=function(e){var t=this.params;if(!t)throw new Error("FaceRecognitionNet - load model before inference");return bn((function(){var n=Sf(tp(e.toBatchTensor(150,!0).toFloat(),[122.782,117.001,104.298]).div(Un(256)),t.conv32_down);n=Nf(n=Oc(n,3,2,"valid"),t.conv32_1),n=Nf(n,t.conv32_2),n=Nf(n,t.conv32_3),n=Nf(n=Bf(n,t.conv64_down),t.conv64_1),n=Nf(n,t.conv64_2),n=Nf(n,t.conv64_3),n=Nf(n=Bf(n,t.conv128_down),t.conv128_1),n=Nf(n,t.conv128_2),n=Nf(n=Bf(n,t.conv256_down),t.conv256_1);var r=(n=Bf(n=Nf(n,t.conv256_2),t.conv256_down_out)).mean([1,2]);return _c(r,t.fc)}))},t.prototype.forward=function(e){return a(this,void 0,void 0,(function(){var t;return s(this,(function(n){switch(n.label){case 0:return t=this.forwardInput,[4,Bp(e)];case 1:return[2,t.apply(this,[n.sent()])]}}))}))},t.prototype.computeFaceDescriptor=function(e){return a(this,void 0,void 0,(function(){var t,n,r,o=this;return s(this,(function(i){switch(i.label){case 0:return[4,Bp(e)];case 1:return t=i.sent(),n=bn((function(){return Vr(o.forwardInput(t))})),[4,Promise.all(n.map((function(e){return e.data()})))];case 2:return r=i.sent(),n.forEach((function(e){return e.dispose()})),[2,t.isBatchInput?r:r[0]]}}))}))},t.prototype.getDefaultModelName=function(){return"face_recognition_model"},t.prototype.extractParamsFromWeigthMap=function(e){return Ff(e)},t.prototype.extractParams=function(e){return function(e){var t=ef(e),n=t.extractWeights,r=t.getRemainingWeights,o=[],i=Tf(n,o),a=i.extractConvLayerParams,s=i.extractResidualLayerParams,u=a(4704,32,7,"conv32_down"),c=s(9216,32,3,"conv32_1"),l=s(9216,32,3,"conv32_2"),d=s(9216,32,3,"conv32_3"),h=s(36864,64,3,"conv64_down",!0),p=s(36864,64,3,"conv64_1"),f=s(36864,64,3,"conv64_2"),m=s(36864,64,3,"conv64_3"),v=s(147456,128,3,"conv128_down",!0),g=s(147456,128,3,"conv128_1"),b=s(147456,128,3,"conv128_2"),A=s(589824,256,3,"conv256_down",!0),y=s(589824,256,3,"conv256_1"),x=s(589824,256,3,"conv256_2"),C=s(589824,256,3,"conv256_down_out"),w=bn((function(){return cl(Gn(n(32768),[128,256]),[1,0])}));if(o.push({paramPath:"fc"}),0!==r().length)throw new Error("weights remaing after extract: "+r().length);return{params:{conv32_down:u,conv32_1:c,conv32_2:l,conv32_3:d,conv64_down:h,conv64_1:p,conv64_2:f,conv64_3:m,conv128_down:v,conv128_1:g,conv128_2:b,conv256_down:A,conv256_1:y,conv256_2:x,conv256_down_out:C,fc:w},paramMappings:o}}(e)},t}(Vp);function Mf(e,t){var n={descriptor:t};return Object.assign({},e,n)}function Pf(e,t){var n={age:t};return Object.assign({},e,n)}function Lf(e,t,n){var r={gender:t,genderProbability:n};return Object.assign({},e,r)}var zf=function(){function e(e){var t=void 0===e?{}:e,n=t.minFaceSize,r=t.scaleFactor,o=t.maxNumScales,i=t.scoreThresholds,a=t.scaleSteps;if(this._name="MtcnnOptions",this._minFaceSize=n||20,this._scaleFactor=r||.709,this._maxNumScales=o||10,this._scoreThresholds=i||[.6,.7,.7],this._scaleSteps=a,"number"!=typeof this._minFaceSize||this._minFaceSize<0)throw new Error(this._name+" - expected minFaceSize to be a number > 0");if("number"!=typeof this._scaleFactor||this._scaleFactor<=0||this._scaleFactor>=1)throw new Error(this._name+" - expected scaleFactor to be a number between 0 and 1");if("number"!=typeof this._maxNumScales||this._maxNumScales<0)throw new Error(this._name+" - expected maxNumScales to be a number > 0");if(!Array.isArray(this._scoreThresholds)||3!==this._scoreThresholds.length||this._scoreThresholds.some((function(e){return"number"!=typeof e})))throw new Error(this._name+" - expected scoreThresholds to be an array of numbers of length 3");if(this._scaleSteps&&(!Array.isArray(this._scaleSteps)||this._scaleSteps.some((function(e){return"number"!=typeof e}))))throw new Error(this._name+" - expected scaleSteps to be an array of numbers")}return Object.defineProperty(e.prototype,"minFaceSize",{get:function(){return this._minFaceSize},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"scaleFactor",{get:function(){return this._scaleFactor},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"maxNumScales",{get:function(){return this._maxNumScales},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"scoreThresholds",{get:function(){return this._scoreThresholds},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"scaleSteps",{get:function(){return this._scaleSteps},enumerable:!0,configurable:!0}),e}();function Wf(e,t){function n(n,r,o,i,a){var s=jn(e(n*r*o*o),[o,o,n,r]),u=Vn(e(r));return t.push({paramPath:i+"/filters"},{paramPath:i+"/"+(a?"batch_norm_offset":"bias")}),{filters:s,bias:u}}function r(e,t,r,o){var i=n(e,t,r,o,!0);return{filters:i.filters,batch_norm_offset:i.bias}}function o(n,o,i){return{depthwise_conv:function(n,r){var o=jn(e(9*n),[3,3,n,1]),i=Vn(e(n)),a=Vn(e(n)),s=Vn(e(n)),u=Vn(e(n));return t.push({paramPath:r+"/filters"},{paramPath:r+"/batch_norm_scale"},{paramPath:r+"/batch_norm_offset"},{paramPath:r+"/batch_norm_mean"},{paramPath:r+"/batch_norm_variance"}),{filters:o,batch_norm_scale:i,batch_norm_offset:a,batch_norm_mean:s,batch_norm_variance:u}}(n,i+"/depthwise_conv"),pointwise_conv:r(n,o,1,i+"/pointwise_conv")}}return{extractMobilenetV1Params:function(){return{conv_0:r(3,32,3,"mobilenetv1/conv_0"),conv_1:o(32,64,"mobilenetv1/conv_1"),conv_2:o(64,128,"mobilenetv1/conv_2"),conv_3:o(128,128,"mobilenetv1/conv_3"),conv_4:o(128,256,"mobilenetv1/conv_4"),conv_5:o(256,256,"mobilenetv1/conv_5"),conv_6:o(256,512,"mobilenetv1/conv_6"),conv_7:o(512,512,"mobilenetv1/conv_7"),conv_8:o(512,512,"mobilenetv1/conv_8"),conv_9:o(512,512,"mobilenetv1/conv_9"),conv_10:o(512,512,"mobilenetv1/conv_10"),conv_11:o(512,512,"mobilenetv1/conv_11"),conv_12:o(512,1024,"mobilenetv1/conv_12"),conv_13:o(1024,1024,"mobilenetv1/conv_13")}},extractPredictionLayerParams:function(){return{conv_0:r(1024,256,1,"prediction_layer/conv_0"),conv_1:r(256,512,3,"prediction_layer/conv_1"),conv_2:r(512,128,1,"prediction_layer/conv_2"),conv_3:r(128,256,3,"prediction_layer/conv_3"),conv_4:r(256,128,1,"prediction_layer/conv_4"),conv_5:r(128,256,3,"prediction_layer/conv_5"),conv_6:r(256,64,1,"prediction_layer/conv_6"),conv_7:r(64,128,3,"prediction_layer/conv_7"),box_predictor_0:{box_encoding_predictor:n(512,12,1,"prediction_layer/box_predictor_0/box_encoding_predictor"),class_predictor:n(512,9,1,"prediction_layer/box_predictor_0/class_predictor")},box_predictor_1:{box_encoding_predictor:n(1024,24,1,"prediction_layer/box_predictor_1/box_encoding_predictor"),class_predictor:n(1024,18,1,"prediction_layer/box_predictor_1/class_predictor")},box_predictor_2:{box_encoding_predictor:n(512,24,1,"prediction_layer/box_predictor_2/box_encoding_predictor"),class_predictor:n(512,18,1,"prediction_layer/box_predictor_2/class_predictor")},box_predictor_3:{box_encoding_predictor:n(256,24,1,"prediction_layer/box_predictor_3/box_encoding_predictor"),class_predictor:n(256,18,1,"prediction_layer/box_predictor_3/class_predictor")},box_predictor_4:{box_encoding_predictor:n(256,24,1,"prediction_layer/box_predictor_4/box_encoding_predictor"),class_predictor:n(256,18,1,"prediction_layer/box_predictor_4/class_predictor")},box_predictor_5:{box_encoding_predictor:n(128,24,1,"prediction_layer/box_predictor_5/box_encoding_predictor"),class_predictor:n(128,18,1,"prediction_layer/box_predictor_5/class_predictor")}}}}}function Uf(e){var t=[],n=function(e,t){var n=Zp(e,t);function r(e,t,r){return{filters:n(e+"/Conv2d_"+t+"_pointwise/weights",4,r+"/filters"),batch_norm_offset:n(e+"/Conv2d_"+t+"_pointwise/convolution_bn_offset",1,r+"/batch_norm_offset")}}function o(e){var t="mobilenetv1/conv_"+e,o="MobilenetV1/Conv2d_"+e+"_depthwise",i=t+"/depthwise_conv",a=t+"/pointwise_conv";return{depthwise_conv:{filters:n(o+"/depthwise_weights",4,i+"/filters"),batch_norm_scale:n(o+"/BatchNorm/gamma",1,i+"/batch_norm_scale"),batch_norm_offset:n(o+"/BatchNorm/beta",1,i+"/batch_norm_offset"),batch_norm_mean:n(o+"/BatchNorm/moving_mean",1,i+"/batch_norm_mean"),batch_norm_variance:n(o+"/BatchNorm/moving_variance",1,i+"/batch_norm_variance")},pointwise_conv:r("MobilenetV1",e,a)}}function i(e,t){return{filters:n(e+"/weights",4,t+"/filters"),bias:n(e+"/biases",1,t+"/bias")}}function a(e){return{box_encoding_predictor:i("Prediction/BoxPredictor_"+e+"/BoxEncodingPredictor","prediction_layer/box_predictor_"+e+"/box_encoding_predictor"),class_predictor:i("Prediction/BoxPredictor_"+e+"/ClassPredictor","prediction_layer/box_predictor_"+e+"/class_predictor")}}return{extractMobilenetV1Params:function(){return{conv_0:r("MobilenetV1",0,"mobilenetv1/conv_0"),conv_1:o(1),conv_2:o(2),conv_3:o(3),conv_4:o(4),conv_5:o(5),conv_6:o(6),conv_7:o(7),conv_8:o(8),conv_9:o(9),conv_10:o(10),conv_11:o(11),conv_12:o(12),conv_13:o(13)}},extractPredictionLayerParams:function(){return{conv_0:r("Prediction",0,"prediction_layer/conv_0"),conv_1:r("Prediction",1,"prediction_layer/conv_1"),conv_2:r("Prediction",2,"prediction_layer/conv_2"),conv_3:r("Prediction",3,"prediction_layer/conv_3"),conv_4:r("Prediction",4,"prediction_layer/conv_4"),conv_5:r("Prediction",5,"prediction_layer/conv_5"),conv_6:r("Prediction",6,"prediction_layer/conv_6"),conv_7:r("Prediction",7,"prediction_layer/conv_7"),box_predictor_0:a(0),box_predictor_1:a(1),box_predictor_2:a(2),box_predictor_3:a(3),box_predictor_4:a(4),box_predictor_5:a(5)}}}}(e,t),r=n.extractMobilenetV1Params,o=n.extractPredictionLayerParams,i=e["Output/extra_dim"];if(t.push({originalPath:"Output/extra_dim",paramPath:"output_layer/extra_dim"}),!zh(i))throw new Error("expected weightMap['Output/extra_dim'] to be a Tensor3D, instead have "+i);var a={mobilenetv1:r(),prediction_layer:o(),output_layer:{extra_dim:i}};return Kp(e,t),{params:a,paramMappings:t}}function Vf(e,t,n){return bn((function(){var r=mc(e,t.filters,n,"same");return r=Ru(r,t.batch_norm_offset),Ms(r,0,6)}))}function Gf(e,t){return bn((function(){var n=null,r=Vf(e,t.conv_0,[2,2]);if([t.conv_1,t.conv_2,t.conv_3,t.conv_4,t.conv_5,t.conv_6,t.conv_7,t.conv_8,t.conv_9,t.conv_10,t.conv_11,t.conv_12,t.conv_13].forEach((function(e,t){var o=t+1,i=function(e){return[2,4,6,12].some((function(t){return t===e}))?[2,2]:[1,1]}(o);r=Vf(r=function(e,t,n){return bn((function(){var r=Ac(e,t.filters,n,"same");return r=bu(r,t.batch_norm_mean,t.batch_norm_variance,t.batch_norm_offset,t.batch_norm_scale,.0010000000474974513),Ms(r,0,6)}))}(r,e.depthwise_conv,i),e.pointwise_conv,[1,1]),11===o&&(n=r)})),null===n)throw new Error("mobileNetV1 - output of conv layer 11 is null");return{out:r,conv11:n}}))}function Hf(e,t,n){var r=e.arraySync(),o=Math.min(r[t][0],r[t][2]),i=Math.min(r[t][1],r[t][3]),a=Math.max(r[t][0],r[t][2]),s=Math.max(r[t][1],r[t][3]),u=Math.min(r[n][0],r[n][2]),c=Math.min(r[n][1],r[n][3]),l=Math.max(r[n][0],r[n][2]),d=Math.max(r[n][1],r[n][3]),h=(a-o)*(s-i),p=(l-u)*(d-c);if(h<=0||p<=0)return 0;var f=Math.max(o,u),m=Math.max(i,c),v=Math.min(a,l),g=Math.min(s,d),b=Math.max(v-f,0)*Math.max(g-m,0);return b/(h+p-b)}function jf(e,t){var n=function(e){var t=Vr(cl(e,[1,0])),n=[Ku(t[2],t[0]),Ku(t[3],t[1])];return{sizes:n,centers:[Ru(t[0],Fu(n[0],Un(2))),Ru(t[1],Fu(n[1],Un(2)))]}}(e),r=n.sizes,o=n.centers,i=Vr(cl(t,[1,0])),a=Fu(Vu(Ws(Fu(i[2],Un(5))),r[0]),Un(2)),s=Ru(Vu(Fu(i[0],Un(10)),r[0]),o[0]),u=Fu(Vu(Ws(Fu(i[3],Un(5))),r[1]),Un(2)),c=Ru(Vu(Fu(i[1],Un(10)),r[1]),o[1]);return cl(zr([Ku(s,a),Ku(c,u),Ru(s,a),Ru(c,u)]),[1,0])}function qf(e,t){return bn((function(){var n=e.shape[0];return{boxPredictionEncoding:Mr(qp(e,t.box_encoding_predictor),[n,-1,1,4]),classPrediction:Mr(qp(e,t.class_predictor),[n,-1,3])}}))}var Kf=function(){function e(e){var t=void 0===e?{}:e,n=t.minConfidence,r=t.maxResults;if(this._name="SsdMobilenetv1Options",this._minConfidence=n||.5,this._maxResults=r||100,"number"!=typeof this._minConfidence||this._minConfidence<=0||this._minConfidence>=1)throw new Error(this._name+" - expected minConfidence to be a number between 0 and 1");if("number"!=typeof this._maxResults)throw new Error(this._name+" - expected maxResults to be a number")}return Object.defineProperty(e.prototype,"minConfidence",{get:function(){return this._minConfidence},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"maxResults",{get:function(){return this._maxResults},enumerable:!0,configurable:!0}),e}(),Xf=function(e){function t(){return e.call(this,"SsdMobilenetv1")||this}return o(t,e),t.prototype.forwardInput=function(e){var t=this.params;if(!t)throw new Error("SsdMobilenetv1 - load model before inference");return bn((function(){var n=e.toBatchTensor(512,!1).toFloat(),r=Gf(Ku(Vu(n,Un(.007843137718737125)),Un(1)),t.mobilenetv1),o=function(e,t,n){return bn((function(){var r=Vf(e,n.conv_0,[1,1]),o=Vf(r,n.conv_1,[2,2]),i=Vf(o,n.conv_2,[1,1]),a=Vf(i,n.conv_3,[2,2]),s=Vf(a,n.conv_4,[1,1]),u=Vf(s,n.conv_5,[2,2]),c=Vf(u,n.conv_6,[1,1]),l=Vf(c,n.conv_7,[2,2]),d=qf(t,n.box_predictor_0),h=qf(e,n.box_predictor_1),p=qf(o,n.box_predictor_2),f=qf(a,n.box_predictor_3),m=qf(u,n.box_predictor_4),v=qf(l,n.box_predictor_5);return{boxPredictions:Jn([d.boxPredictionEncoding,h.boxPredictionEncoding,p.boxPredictionEncoding,f.boxPredictionEncoding,m.boxPredictionEncoding,v.boxPredictionEncoding],1),classPredictions:Jn([d.classPrediction,h.classPrediction,p.classPrediction,f.classPrediction,m.classPrediction,v.classPrediction],1)}}))}(r.out,r.conv11,t.prediction_layer);return function(e,t,n){return bn((function(){var r=e.shape[0],o=jf(Mr(Wr(n.extra_dim,[r,1,1]),[-1,4]),Mr(e,[-1,4]));o=Mr(o,[r,o.shape[0]/r,4]);var i=Ys(Wc(t,[0,0,1],[-1,-1,-1])),a=Wc(i,[0,0,0],[-1,-1,1]);return a=Mr(a,[r,a.shape[1]]),{boxes:Vr(o),scores:Vr(a)}}))}(o.boxPredictions,o.classPredictions,t.output_layer)}))},t.prototype.forward=function(e){return a(this,void 0,void 0,(function(){var t;return s(this,(function(n){switch(n.label){case 0:return t=this.forwardInput,[4,Bp(e)];case 1:return[2,t.apply(this,[n.sent()])]}}))}))},t.prototype.locateFaces=function(e,t){return void 0===t&&(t={}),a(this,void 0,void 0,(function(){var n,r,o,i,a,u,c,l,d,h,p,f,m,v,g,b,A,y,x,C;return s(this,(function(s){switch(s.label){case 0:return n=new Kf(t),r=n.maxResults,o=n.minConfidence,[4,Bp(e)];case 1:for(i=s.sent(),a=this.forwardInput(i),u=a.boxes,c=a.scores,l=u[0],d=c[0],h=1;h<u.length;h++)u[h].dispose(),c[h].dispose();return m=(f=Array).from,[4,d.data()];case 2:return p=m.apply(f,[s.sent()]),.5,v=function(e,t,n,r,o){var i=e.shape[0],a=Math.min(n,i),s=t.map((function(e,t){return{score:e,boxIndex:t}})).filter((function(e){return e.score>o})).sort((function(e,t){return t.score-e.score})),u=[];return s.forEach((function(t){if(!(u.length>=a)){for(var n=t.score,i=u.length-1;i>=0;--i){var s=Hf(e,t.boxIndex,u[i]);if(0!==s&&(t.score*=s<=r?1:0,t.score<=o))break}n===t.score&&u.push(t.boxIndex)}})),u}(l,p,r,.5,o),g=i.getReshapedInputDimensions(0),b=i.inputSize,A=b/g.width,y=b/g.height,x=l.arraySync(),C=v.map((function(e){var t=[Math.max(0,x[e][0]),Math.min(1,x[e][2])].map((function(e){return e*y})),n=t[0],r=t[1],o=[Math.max(0,x[e][1]),Math.min(1,x[e][3])].map((function(e){return e*A})),a=o[0],s=o[1];return new Jh(p[e],new op(a,n,s-a,r-n),{height:i.getInputHeight(0),width:i.getInputWidth(0)})})),l.dispose(),d.dispose(),[2,C]}}))}))},t.prototype.getDefaultModelName=function(){return"ssd_mobilenetv1_model"},t.prototype.extractParamsFromWeigthMap=function(e){return Uf(e)},t.prototype.extractParams=function(e){return function(e){var t=[],n=ef(e),r=n.extractWeights,o=n.getRemainingWeights,i=Wf(r,t),a=i.extractMobilenetV1Params,s=i.extractPredictionLayerParams,u=a(),c=s(),l={extra_dim:Hn(r(20472),[1,5118,4])};if(t.push({paramPath:"output_layer/extra_dim"}),0!==o().length)throw new Error("weights remaing after extract: "+o().length);return{params:{mobilenetv1:u,prediction_layer:c,output_layer:l},paramMappings:t}}(e)},t}(Vp);!function(e){function t(){return null!==e&&e.apply(this,arguments)||this}o(t,e)}(Xf);var Qf,Yf=[new Xh(.738768,.874946),new Xh(2.42204,2.65704),new Xh(4.30971,7.04493),new Xh(10.246,4.59428),new Xh(12.6868,11.8741)],$f=[new Xh(1.603231,2.094468),new Xh(6.041143,7.080126),new Xh(2.882459,3.518061),new Xh(4.266906,5.178857),new Xh(9.041765,10.66308)],Jf=[117.001,114.697,97.404],Zf=function(e){return"number"==typeof e};function em(e){return bn((function(){var t=Vu(e,Un(.10000000149011612));return Ru(al(Ku(e,t)),t)}))}function tm(e,t){return bn((function(){var n=Ir(e,[[0,0],[1,1],[1,1],[0,0]]);return n=mc(n,t.conv.filters,[1,1],"valid"),n=Ku(n,t.bn.sub),n=Vu(n,t.bn.truediv),em(n=Ru(n,t.conv.bias))}))}function nm(e,t){return bn((function(){var n=Ir(e,[[0,0],[1,1],[1,1],[0,0]]);return n=Cc(n,t.depthwise_filter,t.pointwise_filter,[1,1],"valid"),em(n=Ru(n,t.bias))}))}function rm(e,t){var n=Xp(e,t);var r=$p(e,t);return{extractConvParams:n,extractConvWithBatchNormParams:function(r,o,i){return{conv:n(r,o,3,i+"/conv"),bn:function(n,r){var o=Vn(e(n)),i=Vn(e(n));return t.push({paramPath:r+"/sub"},{paramPath:r+"/truediv"}),{sub:o,truediv:i}}(o,i+"/bn")}},extractSeparableConvParams:r}}function om(e,t){var n=Zp(e,t);function r(e){return{filters:n(e+"/filters",4),bias:n(e+"/bias",1)}}return{extractConvParams:r,extractConvWithBatchNormParams:function(e){return{conv:r(e+"/conv"),bn:function(e){return{sub:n(e+"/sub",1),truediv:n(e+"/truediv",1)}}(e+"/bn")}},extractSeparableConvParams:Jp(n)}}!function(e){e[e.XS=224]="XS",e[e.SM=320]="SM",e[e.MD=416]="MD",e[e.LG=608]="LG"}(Qf||(Qf={}));var im=function(){function e(e){var t=void 0===e?{}:e,n=t.inputSize,r=t.scoreThreshold;if(this._name="TinyYolov2Options",this._inputSize=n||416,this._scoreThreshold=r||.5,"number"!=typeof this._inputSize||this._inputSize%32!=0)throw new Error(this._name+" - expected inputSize to be a number divisible by 32");if("number"!=typeof this._scoreThreshold||this._scoreThreshold<=0||this._scoreThreshold>=1)throw new Error(this._name+" - expected scoreThreshold to be a number between 0 and 1")}return Object.defineProperty(e.prototype,"inputSize",{get:function(){return this._inputSize},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"scoreThreshold",{get:function(){return this._scoreThreshold},enumerable:!0,configurable:!0}),e}(),am=function(e){function t(t){var n=e.call(this,"TinyYolov2")||this;return function(e){if(!e)throw new Error("invalid config: "+e);if("boolean"!=typeof e.withSeparableConvs)throw new Error("config.withSeparableConvs has to be a boolean, have: "+e.withSeparableConvs);if(!Zf(e.iouThreshold)||e.iouThreshold<0||e.iouThreshold>1)throw new Error("config.iouThreshold has to be a number between [0, 1], have: "+e.iouThreshold);if(!Array.isArray(e.classes)||!e.classes.length||!e.classes.every((function(e){return"string"==typeof e})))throw new Error("config.classes has to be an array class names: string[], have: "+JSON.stringify(e.classes));if(!Array.isArray(e.anchors)||!e.anchors.length||!e.anchors.map((function(e){return e||{}})).every((function(e){return Zf(e.x)&&Zf(e.y)})))throw new Error("config.anchors has to be an array of { x: number, y: number }, have: "+JSON.stringify(e.anchors));if(e.meanRgb&&(!Array.isArray(e.meanRgb)||3!==e.meanRgb.length||!e.meanRgb.every(Zf)))throw new Error("config.meanRgb has to be an array of shape [number, number, number], have: "+JSON.stringify(e.meanRgb))}(t),n._config=t,n}return o(t,e),Object.defineProperty(t.prototype,"config",{get:function(){return this._config},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"withClassScores",{get:function(){return this.config.withClassScores||this.config.classes.length>1},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"boxEncodingSize",{get:function(){return 5+(this.withClassScores?this.config.classes.length:0)},enumerable:!0,configurable:!0}),t.prototype.runTinyYolov2=function(e,t){var n=tm(e,t.conv0);return n=tm(n=Oc(n,[2,2],[2,2],"same"),t.conv1),n=tm(n=Oc(n,[2,2],[2,2],"same"),t.conv2),n=tm(n=Oc(n,[2,2],[2,2],"same"),t.conv3),n=tm(n=Oc(n,[2,2],[2,2],"same"),t.conv4),n=tm(n=Oc(n,[2,2],[2,2],"same"),t.conv5),n=tm(n=Oc(n,[2,2],[1,1],"same"),t.conv6),qp(n=tm(n,t.conv7),t.conv8,"valid",!1)},t.prototype.runMobilenet=function(e,t){var n=this.config.isFirstLayerConv2d?em(qp(e,t.conv0,"valid",!1)):nm(e,t.conv0);return n=nm(n=Oc(n,[2,2],[2,2],"same"),t.conv1),n=nm(n=Oc(n,[2,2],[2,2],"same"),t.conv2),n=nm(n=Oc(n,[2,2],[2,2],"same"),t.conv3),n=nm(n=Oc(n,[2,2],[2,2],"same"),t.conv4),n=nm(n=Oc(n,[2,2],[2,2],"same"),t.conv5),n=Oc(n,[2,2],[1,1],"same"),n=t.conv6?nm(n,t.conv6):n,qp(n=t.conv7?nm(n,t.conv7):n,t.conv8,"valid",!1)},t.prototype.forwardInput=function(e,t){var n=this,r=this.params;if(!r)throw new Error("TinyYolov2 - load model before inference");return bn((function(){var o=e.toBatchTensor(t,!1).toFloat();return o=(o=n.config.meanRgb?tp(o,n.config.meanRgb):o).div(Un(256)),n.config.withSeparableConvs?n.runMobilenet(o,r):n.runTinyYolov2(o,r)}))},t.prototype.forward=function(e,t){return a(this,void 0,void 0,(function(){var n;return s(this,(function(r){switch(r.label){case 0:return n=this.forwardInput,[4,Bp(e)];case 1:return[4,n.apply(this,[r.sent(),t])];case 2:return[2,r.sent()]}}))}))},t.prototype.detect=function(e,t){return void 0===t&&(t={}),a(this,void 0,void 0,(function(){var n,r,o,i,a,u,c,l,d,h,p,f,m,v=this;return s(this,(function(s){switch(s.label){case 0:return n=new im(t),r=n.inputSize,o=n.scoreThreshold,[4,Bp(e)];case 1:return i=s.sent(),[4,this.forwardInput(i,r)];case 2:return a=s.sent(),u=bn((function(){return Vr(a)[0].expandDims()})),c={width:i.getInputWidth(0),height:i.getInputHeight(0)},[4,this.extractBoxes(u,i.getReshapedInputDimensions(0),o)];case 3:return l=s.sent(),a.dispose(),u.dispose(),d=l.map((function(e){return e.box})),h=l.map((function(e){return e.score})),p=l.map((function(e){return e.classScore})),f=l.map((function(e){return v.config.classes[e.label]})),m=ep(d.map((function(e){return e.rescale(r)})),h,this.config.iouThreshold,!0),[2,m.map((function(e){return new $h(h[e],p[e],f[e],d[e],c)}))]}}))}))},t.prototype.getDefaultModelName=function(){return""},t.prototype.extractParamsFromWeigthMap=function(e){return function(e,t){var n,r=[],o=om(e,r),i=o.extractConvParams,a=o.extractConvWithBatchNormParams,s=o.extractSeparableConvParams;if(t.withSeparableConvs){var u=t.filterSizes&&t.filterSizes.length||9;n={conv0:t.isFirstLayerConv2d?i("conv0"):s("conv0"),conv1:s("conv1"),conv2:s("conv2"),conv3:s("conv3"),conv4:s("conv4"),conv5:s("conv5"),conv6:u>7?s("conv6"):void 0,conv7:u>8?s("conv7"):void 0,conv8:i("conv8")}}else n={conv0:a("conv0"),conv1:a("conv1"),conv2:a("conv2"),conv3:a("conv3"),conv4:a("conv4"),conv5:a("conv5"),conv6:a("conv6"),conv7:a("conv7"),conv8:i("conv8")};return Kp(e,r),{params:n,paramMappings:r}}(e,this.config)},t.prototype.extractParams=function(e){var n=this.config.filterSizes||t.DEFAULT_FILTER_SIZES,r=n?n.length:void 0;if(7!==r&&8!==r&&9!==r)throw new Error("TinyYolov2 - expected 7 | 8 | 9 convolutional filters, but found "+r+" filterSizes in config");return function(e,t,n,r){var o,i=ef(e),a=i.extractWeights,s=i.getRemainingWeights,u=[],c=rm(a,u),l=c.extractConvParams,d=c.extractConvWithBatchNormParams,h=c.extractSeparableConvParams;if(t.withSeparableConvs){var p=r[0],f=r[1],m=r[2],v=r[3],g=r[4],b=r[5],A=r[6],y=r[7],x=r[8];o={conv0:t.isFirstLayerConv2d?l(p,f,3,"conv0"):h(p,f,"conv0"),conv1:h(f,m,"conv1"),conv2:h(m,v,"conv2"),conv3:h(v,g,"conv3"),conv4:h(g,b,"conv4"),conv5:h(b,A,"conv5"),conv6:y?h(A,y,"conv6"):void 0,conv7:x?h(y,x,"conv7"):void 0,conv8:l(x||y||A,5*n,1,"conv8")}}else{p=r[0],f=r[1],m=r[2],v=r[3],g=r[4],b=r[5],A=r[6],y=r[7],x=r[8];o={conv0:d(p,f,"conv0"),conv1:d(f,m,"conv1"),conv2:d(m,v,"conv2"),conv3:d(v,g,"conv3"),conv4:d(g,b,"conv4"),conv5:d(b,A,"conv5"),conv6:d(A,y,"conv6"),conv7:d(y,x,"conv7"),conv8:l(x,5*n,1,"conv8")}}if(0!==s().length)throw new Error("weights remaing after extract: "+s().length);return{params:o,paramMappings:u}}(e,this.config,this.boxEncodingSize,n)},t.prototype.extractBoxes=function(e,t,n){return a(this,void 0,void 0,(function(){var r,o,a,u,c,l,d,h,p,f,m,v,g,b,A,y,x,C,w,k,_,E,I,R,S,T,D,F,N,B=this;return s(this,(function(s){switch(s.label){case 0:return r=t.width,o=t.height,a=Math.max(r,o),u=a/r,c=a/o,l=e.shape[1],d=this.config.anchors.length,h=bn((function(){var t=e.reshape([l,l,d,B.boxEncodingSize]);return[t.slice([0,0,0,0],[l,l,d,4]),t.slice([0,0,0,4],[l,l,d,1]),B.withClassScores?so(t.slice([0,0,0,5],[l,l,d,B.config.classes.length]),3):Un(0)]})),p=h[0],f=h[1],m=h[2],v=[],[4,f.array()];case 1:return g=s.sent(),[4,p.array()];case 2:b=s.sent(),A=0,s.label=3;case 3:if(!(A<l))return[3,12];y=0,s.label=4;case 4:if(!(y<l))return[3,11];x=0,s.label=5;case 5:return x<d?(C=np(g[A][y][x][0]),!n||C>n?(w=(y+np(b[A][y][x][0]))/l*u,k=(A+np(b[A][y][x][1]))/l*c,_=Math.exp(b[A][y][x][2])*this.config.anchors[x].x/l*u,E=Math.exp(b[A][y][x][3])*this.config.anchors[x].y/l*c,I=w-_/2,R=k-E/2,S={row:A,col:y,anchor:x},this.withClassScores?[4,this.extractPredictedClass(m,S)]:[3,7]):[3,9]):[3,10];case 6:return N=s.sent(),[3,8];case 7:N={classScore:1,label:0},s.label=8;case 8:D=(T=N).classScore,F=T.label,v.push(i({box:new Yh(I,R,I+_,R+E),score:C,classScore:C*D,label:F},S)),s.label=9;case 9:return x++,[3,5];case 10:return y++,[3,4];case 11:return A++,[3,3];case 12:return p.dispose(),f.dispose(),m.dispose(),[2,v]}}))}))},t.prototype.extractPredictedClass=function(e,t){return a(this,void 0,void 0,(function(){var n,r,o,i;return s(this,(function(a){switch(a.label){case 0:return n=t.row,r=t.col,o=t.anchor,[4,e.array()];case 1:return i=a.sent(),[2,Array(this.config.classes.length).fill(0).map((function(e,t){return i[n][r][o][t]})).map((function(e,t){return{classScore:e,label:t}})).reduce((function(e,t){return e.classScore>t.classScore?e:t}))]}}))}))},t.DEFAULT_FILTER_SIZES=[3,16,32,64,128,256,512,1024,1024],t}(Vp),sm=function(e){function t(t){void 0===t&&(t=!0);var n=Object.assign({},{withSeparableConvs:t,iouThreshold:.4,classes:["face"]},t?{anchors:$f,meanRgb:Jf}:{anchors:Yf,withClassScores:!0});return e.call(this,n)||this}return o(t,e),Object.defineProperty(t.prototype,"withSeparableConvs",{get:function(){return this.config.withSeparableConvs},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"anchors",{get:function(){return this.config.anchors},enumerable:!0,configurable:!0}),t.prototype.locateFaces=function(e,t){return a(this,void 0,void 0,(function(){return s(this,(function(n){switch(n.label){case 0:return[4,this.detect(e,t)];case 1:return[2,n.sent().map((function(e){return new Jh(e.score,e.relativeBox,{width:e.imageWidth,height:e.imageHeight})}))]}}))}))},t.prototype.getDefaultModelName=function(){return this.withSeparableConvs?"tiny_yolov2_separable_conv_model":"tiny_yolov2_model"},t.prototype.extractParamsFromWeigthMap=function(t){return e.prototype.extractParamsFromWeigthMap.call(this,t)},t}(am);var um=function(e){function t(){var t=null!==e&&e.apply(this,arguments)||this;return t._name="TinyFaceDetectorOptions",t}return o(t,e),t}(im),cm=function(){function e(){}return e.prototype.then=function(e){return a(this,void 0,void 0,(function(){var t;return s(this,(function(n){switch(n.label){case 0:return t=e,[4,this.run()];case 1:return[2,t.apply(void 0,[n.sent()])]}}))}))},e.prototype.run=function(){return a(this,void 0,void 0,(function(){return s(this,(function(e){throw new Error("ComposableTask - run is not implemented")}))}))},e}();function lm(e,t,n,r,o){return void 0===o&&(o=function(e){return e.alignedRect}),a(this,void 0,void 0,(function(){var i,a,u,c,l;return s(this,(function(s){switch(s.label){case 0:return i=e.map((function(e){return pf(e)?o(e):e.detection})),(u=r)?[3,5]:t instanceof Xe?[4,Mp(t,i)]:[3,2];case 1:return c=s.sent(),[3,4];case 2:return[4,Op(t,i)];case 3:c=s.sent(),s.label=4;case 4:u=c,s.label=5;case 5:return[4,n(a=u)];case 6:return l=s.sent(),a.forEach((function(e){return e instanceof Xe&&e.dispose()})),[2,l]}}))}))}function dm(e,t,n,r,o){return a(this,void 0,void 0,(function(){var i=this;return s(this,(function(u){return[2,lm([e],t,(function(e){return a(i,void 0,void 0,(function(){return s(this,(function(t){return[2,n(e[0])]}))}))}),r,o)]}))}))}function hm(e){var t=ef(e),n=t.extractWeights,r=t.getRemainingWeights,o=[],a=function(e,t){var n=Xp(e,t),r=Qp(e,t);function o(n,r){var o=Vn(e(n));return t.push({paramPath:r}),o}function a(e,t,r){return void 0===r&&(r=!1),{conv1:n(e[0],e[1],3,t+"/conv1"),prelu1_alpha:o(e[1],t+"/prelu1_alpha"),conv2:n(e[1],e[2],3,t+"/conv2"),prelu2_alpha:o(e[2],t+"/prelu2_alpha"),conv3:n(e[2],e[3],r?2:3,t+"/conv3"),prelu3_alpha:o(e[3],t+"/prelu3_alpha")}}return{extractPNetParams:function(){var e=a([3,10,16,32],"pnet"),t=n(32,2,1,"pnet/conv4_1"),r=n(32,4,1,"pnet/conv4_2");return i(i({},e),{conv4_1:t,conv4_2:r})},extractRNetParams:function(){var e=a([3,28,48,64],"rnet",!0),t=r(576,128,"rnet/fc1"),n=o(128,"rnet/prelu4_alpha"),s=r(128,2,"rnet/fc2_1"),u=r(128,4,"rnet/fc2_2");return i(i({},e),{fc1:t,prelu4_alpha:n,fc2_1:s,fc2_2:u})},extractONetParams:function(){var e=a([3,32,64,64],"onet"),t=n(64,128,2,"onet/conv4"),s=o(128,"onet/prelu4_alpha"),u=r(1152,256,"onet/fc1"),c=o(256,"onet/prelu5_alpha"),l=r(256,2,"onet/fc2_1"),d=r(256,4,"onet/fc2_2"),h=r(256,10,"onet/fc2_3");return i(i({},e),{conv4:t,prelu4_alpha:s,fc1:u,prelu5_alpha:c,fc2_1:l,fc2_2:d,fc2_3:h})}}}(n,o),s=a.extractPNetParams,u=a.extractRNetParams,c=a.extractONetParams,l=s(),d=u(),h=c();if(0!==r().length)throw new Error("weights remaing after extract: "+r().length);return{params:{pnet:l,rnet:d,onet:h},paramMappings:o}}function pm(e){var t=[],n=function(e,t){var n=Zp(e,t);function r(e){return{filters:n(e+"/weights",4,e+"/filters"),bias:n(e+"/bias",1)}}function o(e){return{weights:n(e+"/weights",2),bias:n(e+"/bias",1)}}function a(e){return n(e,1)}function s(e){return{conv1:r(e+"/conv1"),prelu1_alpha:a(e+"/prelu1_alpha"),conv2:r(e+"/conv2"),prelu2_alpha:a(e+"/prelu2_alpha"),conv3:r(e+"/conv3"),prelu3_alpha:a(e+"/prelu3_alpha")}}return{extractPNetParams:function(){var e=s("pnet"),t=r("pnet/conv4_1"),n=r("pnet/conv4_2");return i(i({},e),{conv4_1:t,conv4_2:n})},extractRNetParams:function(){var e=s("rnet"),t=o("rnet/fc1"),n=a("rnet/prelu4_alpha"),r=o("rnet/fc2_1"),u=o("rnet/fc2_2");return i(i({},e),{fc1:t,prelu4_alpha:n,fc2_1:r,fc2_2:u})},extractONetParams:function(){var e=s("onet"),t=r("onet/conv4"),n=a("onet/prelu4_alpha"),u=o("onet/fc1"),c=a("onet/prelu5_alpha"),l=o("onet/fc2_1"),d=o("onet/fc2_2"),h=o("onet/fc2_3");return i(i({},e),{conv4:t,prelu4_alpha:n,fc1:u,prelu5_alpha:c,fc2_1:l,fc2_2:d,fc2_3:h})}}}(e,t),r=n.extractPNetParams,o=n.extractRNetParams,a=n.extractONetParams,s=r(),u=o(),c=a();return Kp(e,t),{params:{pnet:s,rnet:u,onet:c},paramMappings:t}}function fm(e,t){var n=t[0],r=t[1];return{height:Math.floor(n*e),width:Math.floor(r*e)}}var mm=function(e){function t(t,n,r,o){return e.call(this,{left:t,top:n,right:r,bottom:o},!0)||this}return o(t,e),t}(Qh);function vm(e){return bn((function(){return Vu(Ku(e,Un(127.5)),Un(.0078125))}))}function gm(e,t){return bn((function(){return Ru(al(e),Vu(t,qs(al(qs(e)))))}))}function bm(e,t,n){return void 0===n&&(n=!1),bn((function(){var r=qp(e,t.conv1,"valid");return r=gm(r,t.prelu1_alpha),r=gm(r=qp(r=Oc(r,n?[2,2]:[3,3],[2,2],"same"),t.conv2,"valid"),t.prelu2_alpha),r=gm(r=qp(r=n?r:Oc(r,[3,3],[2,2],"valid"),t.conv3,"valid"),t.prelu3_alpha)}))}function Am(e,t,n,r,o){o.stage1=[];var i=t.map((function(t){return bn((function(){var n={scale:t},o=function(e,t){return bn((function(){var n=fm(t,e.shape.slice(1)),r=n.height,o=n.width,i=vm(td.resizeBilinear(e,[r,o]));return cl(i,[0,2,1,3])}))}(e,t),i=Date.now(),a=function(e,t){return bn((function(){var n=bm(e,t,!0),r=qp(n,t.conv4_1,"valid"),o=wr($c(r,3),3);return{prob:so(Ku(r,o),3),regions:qp(n,t.conv4_2,"valid")}}))}(o,r),s=a.prob,u=a.regions;return n.pnet=Date.now()-i,{scoresTensor:Vr(Vr(s,3)[1])[0],regionsTensor:Vr(u)[0],scale:t,statsForScale:n}}))})).map((function(e){var t=e.scoresTensor,r=e.regionsTensor,i=e.scale,a=e.statsForScale,s=function(e,t,n,r){for(var o=[],i=e.arraySync(),a=0;a<e.shape[0];a++)for(var s=0;s<e.shape[1];s++)i[a][s]>=r&&o.push(new Xh(s,a));return o.map((function(e){var r=new Yh(Math.round((2*e.y+1)/n),Math.round((2*e.x+1)/n),Math.round((2*e.y+12)/n),Math.round((2*e.x+12)/n)),o=i[e.y][e.x],a=t.arraySync();return{cell:r,score:o,region:new mm(a[e.y][e.x][0],a[e.y][e.x][1],a[e.y][e.x][2],a[e.y][e.x][3])}}))}(t,r,i,n);if(t.dispose(),r.dispose(),!s.length)return o.stage1.push(a),[];var u=Date.now(),c=ep(s.map((function(e){return e.cell})),s.map((function(e){return e.score})),.5);return a.nms=Date.now()-u,a.numBoxes=c.length,o.stage1.push(a),c.map((function(e){return s[e]}))})).reduce((function(e,t){return e.concat(t)}),[]),a=[],s=[];if(i.length>0){var u=Date.now(),c=ep(i.map((function(e){return e.cell})),i.map((function(e){return e.score})),.7);o.stage1_nms=Date.now()-u,s=c.map((function(e){return i[e].score})),a=c.map((function(e){return i[e]})).map((function(e){var t=e.cell,n=e.region;return new Yh(t.left+n.left*t.width,t.top+n.top*t.height,t.right+n.right*t.width,t.bottom+n.bottom*t.height).toSquare().round()}))}return{boxes:a,scores:s}}function ym(e,t,n){var r=n.width,o=n.height;return a(this,void 0,void 0,(function(){var n,i,u,c=this;return s(this,(function(l){switch(l.label){case 0:return n=wp(e),[4,Promise.all(t.map((function(t){return a(c,void 0,void 0,(function(){var r,o,i,a,u,c,l,d;return s(this,(function(s){return r=t.padAtBorders(e.height,e.width),o=r.y,i=r.ey,a=r.x,u=r.ex,c=a-1,l=o-1,d=n.getImageData(c,l,u-c,i-l),[2,xp.isNodejs()?Tp(d):createImageBitmap(d)]}))}))})))];case 1:return i=l.sent(),u=[],i.forEach((function(e){var t=wp(Sp({width:r,height:o}));t.drawImage(e,0,0,r,o);for(var n=t.getImageData(0,0,r,o).data,i=[],a=0;a<n.length;a+=4)i.push(n[a+2]),i.push(n[a+1]),i.push(n[a]);u.push(i)})),[2,u.map((function(e){return bn((function(){return vm(cl(jn(e,[1,r,o,3]),[0,2,1,3]).toFloat())}))}))]}}))}))}function xm(e,t,n,r,o){return a(this,void 0,void 0,(function(){var i,a,u,c,l,d,h,p,f,m,v,g,b,A;return s(this,(function(s){switch(s.label){case 0:return i=Date.now(),[4,ym(e,t,{width:24,height:24})];case 1:return a=s.sent(),o.stage2_extractImagePatches=Date.now()-i,i=Date.now(),u=a.map((function(e){var t=function(e,t){return bn((function(){var n=bm(e,t),r=gm(af(Mr(n,[n.shape[0],t.fc1.weights.shape[0]]),t.fc1),t.prelu4_alpha),o=af(r,t.fc2_1),i=wr($c(o,1),1),a=so(Ku(o,i),1),s=af(r,t.fc2_2);return{scores:Vr(a,1)[1],regions:s}}))}(e,r);return e.dispose(),t})),o.stage2_rnet=Date.now()-i,c=u.length>1?Jn(u.map((function(e){return e.scores}))):u[0].scores,h=(d=Array).from,[4,c.data()];case 2:return l=h.apply(d,[s.sent()]),c.dispose(),p=l.map((function(e,t){return{score:e,idx:t}})).filter((function(e){return e.score>n})).map((function(e){return e.idx})),f=p.map((function(e){return t[e]})),m=p.map((function(e){return l[e]})),v=[],g=[],f.length>0&&(i=Date.now(),b=ep(f,m,.7),o.stage2_nms=Date.now()-i,A=b.map((function(e){var t=u[p[e]].regions.arraySync();return new mm(t[0][0],t[0][1],t[0][2],t[0][3])})),g=b.map((function(e){return m[e]})),v=b.map((function(e,t){return f[e].calibrate(A[t])}))),u.forEach((function(e){e.regions.dispose(),e.scores.dispose()})),[2,{boxes:v,scores:g}]}}))}))}function Cm(e,t,n,r,o){return a(this,void 0,void 0,(function(){var i,a,u,c,l,d,h,p,f,m,v,g,b,A,y;return s(this,(function(s){switch(s.label){case 0:return i=Date.now(),[4,ym(e,t,{width:48,height:48})];case 1:return a=s.sent(),o.stage3_extractImagePatches=Date.now()-i,i=Date.now(),u=a.map((function(e){var t=function(e,t){return bn((function(){var n=bm(e,t);n=gm(n=qp(n=Oc(n,[2,2],[2,2],"same"),t.conv4,"valid"),t.prelu4_alpha);var r=gm(af(Mr(n,[n.shape[0],t.fc1.weights.shape[0]]),t.fc1),t.prelu5_alpha),o=af(r,t.fc2_1),i=wr($c(o,1),1),a=so(Ku(o,i),1),s=af(r,t.fc2_2),u=af(r,t.fc2_3);return{scores:Vr(a,1)[1],regions:s,points:u}}))}(e,r);return e.dispose(),t})),o.stage3_onet=Date.now()-i,c=u.length>1?Jn(u.map((function(e){return e.scores}))):u[0].scores,h=(d=Array).from,[4,c.data()];case 2:return l=h.apply(d,[s.sent()]),c.dispose(),p=l.map((function(e,t){return{score:e,idx:t}})).filter((function(e){return e.score>n})).map((function(e){return e.idx})),f=p.map((function(e){var t=u[e].regions.arraySync();return new mm(t[0][0],t[0][1],t[0][2],t[0][3])})),m=p.map((function(e,n){return t[e].calibrate(f[n])})),v=p.map((function(e){return l[e]})),g=[],b=[],A=[],m.length>0&&(i=Date.now(),y=ep(m,v,.7,!1),o.stage3_nms=Date.now()-i,g=y.map((function(e){return m[e]})),b=y.map((function(e){return v[e]})),A=y.map((function(e,t){return Array(5).fill(0).map((function(n,r){var o=u[e].points.arraySync();return new Xh(o[0][r]*(g[t].width+1)+g[t].left,o[0][r+5]*(g[t].height+1)+g[t].top)}))}))),u.forEach((function(e){e.regions.dispose(),e.scores.dispose(),e.points.dispose()})),[2,{boxes:g,scores:b,points:A}]}}))}))}var wm=function(e){function t(){return e.call(this,"Mtcnn")||this}return o(t,e),t.prototype.load=function(t){return a(this,void 0,void 0,(function(){return s(this,(function(n){return console.warn("mtcnn is deprecated and will be removed soon"),[2,e.prototype.load.call(this,t)]}))}))},t.prototype.loadFromDisk=function(t){return a(this,void 0,void 0,(function(){return s(this,(function(n){return console.warn("mtcnn is deprecated and will be removed soon"),[2,e.prototype.loadFromDisk.call(this,t)]}))}))},t.prototype.forwardInput=function(e,t){return void 0===t&&(t={}),a(this,void 0,void 0,(function(){var n,r,o,i,a,u,c,l,d,h,p,f,m,v,g,b,A,y,x,C,w;return s(this,(function(s){switch(s.label){case 0:if(!(n=this.params))throw new Error("Mtcnn - load model before inference");if(!(r=e.canvases[0]))throw new Error("Mtcnn - inputCanvas is not defined, note that passing tensors into Mtcnn.forwardInput is not supported yet.");return o={},i=Date.now(),a=bn((function(){return e=wr(yh.fromPixels(r)).toFloat(),bn((function(){return zr(Vr(e,3).reverse(),3)}));var e})),u=function(e){return a.dispose(),o.total=Date.now()-i,e},c=a.shape.slice(1),l=c[0],d=c[1],h=new zf(t),p=h.minFaceSize,f=h.scaleFactor,m=h.maxNumScales,v=h.scoreThresholds,g=h.scaleSteps,b=(g||function(e,t,n){for(var r=n[0],o=n[1],i=12/e,a=[],s=Math.min(r,o)*i,u=0;s>=12;)a.push(i*Math.pow(t,u)),s*=t,u+=1;return a}(p,f,[l,d])).filter((function(e){var t=fm(e,[l,d]);return Math.min(t.width,t.height)>12})).slice(0,m),o.scales=b,o.pyramid=b.map((function(e){return fm(e,[l,d])})),A=Date.now(),[4,Am(a,b,v[0],n.pnet,o)];case 1:return y=s.sent(),o.total_stage1=Date.now()-A,y.boxes.length?(o.stage2_numInputBoxes=y.boxes.length,A=Date.now(),[4,xm(r,y.boxes,v[1],n.rnet,o)]):[2,u({results:[],stats:o})];case 2:return x=s.sent(),o.total_stage2=Date.now()-A,x.boxes.length?(o.stage3_numInputBoxes=x.boxes.length,A=Date.now(),[4,Cm(r,x.boxes,v[2],n.onet,o)]):[2,u({results:[],stats:o})];case 3:return C=s.sent(),o.total_stage3=Date.now()-A,w=C.boxes.map((function(e,t){return ff(hp({},new Jh(C.scores[t],new op(e.left/d,e.top/l,e.width/d,e.height/l),{height:l,width:d})),new ap(C.points[t].map((function(t){return t.sub(new Xh(e.left,e.top)).div(new Xh(e.width,e.height))})),{width:e.width,height:e.height}))})),[2,u({results:w,stats:o})]}}))}))},t.prototype.forward=function(e,t){return void 0===t&&(t={}),a(this,void 0,void 0,(function(){var n;return s(this,(function(r){switch(r.label){case 0:return n=this.forwardInput,[4,Bp(e)];case 1:return[4,n.apply(this,[r.sent(),t])];case 2:return[2,r.sent().results]}}))}))},t.prototype.forwardWithStats=function(e,t){return void 0===t&&(t={}),a(this,void 0,void 0,(function(){var n;return s(this,(function(r){switch(r.label){case 0:return n=this.forwardInput,[4,Bp(e)];case 1:return[2,n.apply(this,[r.sent(),t])]}}))}))},t.prototype.getDefaultModelName=function(){return"mtcnn_model"},t.prototype.extractParamsFromWeigthMap=function(e){return pm(e)},t.prototype.extractParams=function(e){return hm(e)},t}(Vp),km=[new Xh(1.603231,2.094468),new Xh(6.041143,7.080126),new Xh(2.882459,3.518061),new Xh(4.266906,5.178857),new Xh(9.041765,10.66308)],_m=[117.001,114.697,97.404],Em=function(e){function t(){var t={withSeparableConvs:!0,iouThreshold:.4,classes:["face"],anchors:km,meanRgb:_m,isFirstLayerConv2d:!0,filterSizes:[3,16,32,64,128,256,512]};return e.call(this,t)||this}return o(t,e),Object.defineProperty(t.prototype,"anchors",{get:function(){return this.config.anchors},enumerable:!0,configurable:!0}),t.prototype.locateFaces=function(e,t){return a(this,void 0,void 0,(function(){return s(this,(function(n){switch(n.label){case 0:return[4,this.detect(e,t)];case 1:return[2,n.sent().map((function(e){return new Jh(e.score,e.relativeBox,{width:e.imageWidth,height:e.imageHeight})}))]}}))}))},t.prototype.getDefaultModelName=function(){return"tiny_face_detector_model"},t.prototype.extractParamsFromWeigthMap=function(t){return e.prototype.extractParamsFromWeigthMap.call(this,t)},t}(am),Im={ssdMobilenetv1:new Xf,tinyFaceDetector:new Em,tinyYolov2:new sm,mtcnn:new wm,faceLandmark68Net:new kf,faceLandmark68TinyNet:new Ef,faceRecognitionNet:new Of,faceExpressionNet:new df,ageGenderNet:new Cf},Rm=function(e){function t(t,n,r){var o=e.call(this)||this;return o.parentTask=t,o.input=n,o.extractedFaces=r,o}return o(t,e),t}(cm),Sm=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return o(t,e),t.prototype.run=function(){return a(this,void 0,void 0,(function(){var e,t,n=this;return s(this,(function(r){switch(r.label){case 0:return[4,this.parentTask];case 1:return[4,lm(e=r.sent(),this.input,(function(e){return a(n,void 0,void 0,(function(){return s(this,(function(t){switch(t.label){case 0:return[4,Promise.all(e.map((function(e){return Im.faceExpressionNet.predictExpressions(e)})))];case 1:return[2,t.sent()]}}))}))}),this.extractedFaces)];case 2:return t=r.sent(),[2,e.map((function(e,n){return hf(e,t[n])}))]}}))}))},t.prototype.withAgeAndGender=function(){return new Bm(this,this.input)},t}(Rm),Tm=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return o(t,e),t.prototype.run=function(){return a(this,void 0,void 0,(function(){var e,t;return s(this,(function(n){switch(n.label){case 0:return[4,this.parentTask];case 1:return(e=n.sent())?[4,dm(e,this.input,(function(e){return Im.faceExpressionNet.predictExpressions(e)}),this.extractedFaces)]:[2];case 2:return t=n.sent(),[2,hf(e,t)]}}))}))},t.prototype.withAgeAndGender=function(){return new Om(this,this.input)},t}(Rm),Dm=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return o(t,e),t.prototype.withAgeAndGender=function(){return new Mm(this,this.input)},t.prototype.withFaceDescriptors=function(){return new zm(this,this.input)},t}(Sm),Fm=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return o(t,e),t.prototype.withAgeAndGender=function(){return new Pm(this,this.input)},t.prototype.withFaceDescriptor=function(){return new Wm(this,this.input)},t}(Tm),Nm=function(e){function t(t,n,r){var o=e.call(this)||this;return o.parentTask=t,o.input=n,o.extractedFaces=r,o}return o(t,e),t}(cm),Bm=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return o(t,e),t.prototype.run=function(){return a(this,void 0,void 0,(function(){var e,t,n=this;return s(this,(function(r){switch(r.label){case 0:return[4,this.parentTask];case 1:return[4,lm(e=r.sent(),this.input,(function(e){return a(n,void 0,void 0,(function(){return s(this,(function(t){switch(t.label){case 0:return[4,Promise.all(e.map((function(e){return Im.ageGenderNet.predictAgeAndGender(e)})))];case 1:return[2,t.sent()]}}))}))}),this.extractedFaces)];case 2:return t=r.sent(),[2,e.map((function(e,n){var r=t[n],o=r.age;return Pf(Lf(e,r.gender,r.genderProbability),o)}))]}}))}))},t.prototype.withFaceExpressions=function(){return new Sm(this,this.input)},t}(Nm),Om=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return o(t,e),t.prototype.run=function(){return a(this,void 0,void 0,(function(){var e,t,n,r,o;return s(this,(function(i){switch(i.label){case 0:return[4,this.parentTask];case 1:return(e=i.sent())?[4,dm(e,this.input,(function(e){return Im.ageGenderNet.predictAgeAndGender(e)}),this.extractedFaces)]:[2];case 2:return t=i.sent(),n=t.age,r=t.gender,o=t.genderProbability,[2,Pf(Lf(e,r,o),n)]}}))}))},t.prototype.withFaceExpressions=function(){return new Tm(this,this.input)},t}(Nm),Mm=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return o(t,e),t.prototype.withFaceExpressions=function(){return new Dm(this,this.input)},t.prototype.withFaceDescriptors=function(){return new zm(this,this.input)},t}(Bm),Pm=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return o(t,e),t.prototype.withFaceExpressions=function(){return new Fm(this,this.input)},t.prototype.withFaceDescriptor=function(){return new Wm(this,this.input)},t}(Om),Lm=function(e){function t(t,n){var r=e.call(this)||this;return r.parentTask=t,r.input=n,r}return o(t,e),t}(cm),zm=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return o(t,e),t.prototype.run=function(){return a(this,void 0,void 0,(function(){var e;return s(this,(function(t){switch(t.label){case 0:return[4,this.parentTask];case 1:return[4,lm(e=t.sent(),this.input,(function(e){return Promise.all(e.map((function(e){return Im.faceRecognitionNet.computeFaceDescriptor(e)})))}),null,(function(e){return e.landmarks.align(null,{useDlibAlignment:!0})}))];case 2:return[2,t.sent().map((function(t,n){return Mf(e[n],t)}))]}}))}))},t.prototype.withFaceExpressions=function(){return new Dm(this,this.input)},t.prototype.withAgeAndGender=function(){return new Mm(this,this.input)},t}(Lm),Wm=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return o(t,e),t.prototype.run=function(){return a(this,void 0,void 0,(function(){var e,t;return s(this,(function(n){switch(n.label){case 0:return[4,this.parentTask];case 1:return(e=n.sent())?[4,dm(e,this.input,(function(e){return Im.faceRecognitionNet.computeFaceDescriptor(e)}),null,(function(e){return e.landmarks.align(null,{useDlibAlignment:!0})}))]:[2];case 2:return t=n.sent(),[2,Mf(e,t)]}}))}))},t.prototype.withFaceExpressions=function(){return new Fm(this,this.input)},t.prototype.withAgeAndGender=function(){return new Pm(this,this.input)},t}(Lm),Um=function(e){function t(t,n,r){var o=e.call(this)||this;return o.parentTask=t,o.input=n,o.useTinyLandmarkNet=r,o}return o(t,e),Object.defineProperty(t.prototype,"landmarkNet",{get:function(){return this.useTinyLandmarkNet?Im.faceLandmark68TinyNet:Im.faceLandmark68Net},enumerable:!0,configurable:!0}),t}(cm),Vm=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return o(t,e),t.prototype.run=function(){return a(this,void 0,void 0,(function(){var e,t,n,r,o,i=this;return s(this,(function(a){switch(a.label){case 0:return[4,this.parentTask];case 1:return e=a.sent(),t=e.map((function(e){return e.detection})),this.input instanceof Xe?[4,Mp(this.input,t)]:[3,3];case 2:return r=a.sent(),[3,5];case 3:return[4,Op(this.input,t)];case 4:r=a.sent(),a.label=5;case 5:return n=r,[4,Promise.all(n.map((function(e){return i.landmarkNet.detectLandmarks(e)})))];case 6:return o=a.sent(),n.forEach((function(e){return e instanceof Xe&&e.dispose()})),[2,e.map((function(e,t){return ff(e,o[t])}))]}}))}))},t.prototype.withFaceExpressions=function(){return new Dm(this,this.input)},t.prototype.withAgeAndGender=function(){return new Mm(this,this.input)},t.prototype.withFaceDescriptors=function(){return new zm(this,this.input)},t}(Um),Gm=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return o(t,e),t.prototype.run=function(){return a(this,void 0,void 0,(function(){var e,t,n,r,o;return s(this,(function(i){switch(i.label){case 0:return[4,this.parentTask];case 1:return(e=i.sent())?(t=e.detection,this.input instanceof Xe?[4,Mp(this.input,[t])]:[3,3]):[2];case 2:return r=i.sent(),[3,5];case 3:return[4,Op(this.input,[t])];case 4:r=i.sent(),i.label=5;case 5:return n=r,[4,this.landmarkNet.detectLandmarks(n[0])];case 6:return o=i.sent(),n.forEach((function(e){return e instanceof Xe&&e.dispose()})),[2,ff(e,o)]}}))}))},t.prototype.withFaceExpressions=function(){return new Fm(this,this.input)},t.prototype.withAgeAndGender=function(){return new Pm(this,this.input)},t.prototype.withFaceDescriptor=function(){return new Wm(this,this.input)},t}(Um),Hm=function(e){function t(t,n){void 0===n&&(n=new Kf);var r=e.call(this)||this;return r.input=t,r.options=n,r}return o(t,e),t}(cm),jm=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return o(t,e),t.prototype.run=function(){return a(this,void 0,void 0,(function(){var e,t,n,r;return s(this,(function(o){switch(o.label){case 0:return t=(e=this).input,(n=e.options)instanceof zf?[4,Im.mtcnn.forward(t,n)]:[3,2];case 1:return[2,o.sent().map((function(e){return e.detection}))];case 2:if(!(r=n instanceof um?function(e){return Im.tinyFaceDetector.locateFaces(e,n)}:n instanceof Kf?function(e){return Im.ssdMobilenetv1.locateFaces(e,n)}:n instanceof im?function(e){return Im.tinyYolov2.locateFaces(e,n)}:null))throw new Error("detectFaces - expected options to be instance of TinyFaceDetectorOptions | SsdMobilenetv1Options | MtcnnOptions | TinyYolov2Options");return[2,r(t)]}}))}))},t.prototype.runAndExtendWithFaceDetections=function(){var e=this;return new Promise((function(t){return a(e,void 0,void 0,(function(){var e;return s(this,(function(n){switch(n.label){case 0:return[4,this.run()];case 1:return e=n.sent(),[2,t(e.map((function(e){return hp({},e)})))]}}))}))}))},t.prototype.withFaceLandmarks=function(e){return void 0===e&&(e=!1),new Vm(this.runAndExtendWithFaceDetections(),this.input,e)},t.prototype.withFaceExpressions=function(){return new Sm(this.runAndExtendWithFaceDetections(),this.input)},t.prototype.withAgeAndGender=function(){return new Bm(this.runAndExtendWithFaceDetections(),this.input)},t}(Hm),qm=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return o(t,e),t.prototype.run=function(){return a(this,void 0,void 0,(function(){var e,t;return s(this,(function(n){switch(n.label){case 0:return[4,new jm(this.input,this.options)];case 1:return e=n.sent(),t=e[0],e.forEach((function(e){e.score>t.score&&(t=e)})),[2,t]}}))}))},t.prototype.runAndExtendWithFaceDetection=function(){var e=this;return new Promise((function(t){return a(e,void 0,void 0,(function(){var e;return s(this,(function(n){switch(n.label){case 0:return[4,this.run()];case 1:return e=n.sent(),[2,t(e?hp({},e):void 0)]}}))}))}))},t.prototype.withFaceLandmarks=function(e){return void 0===e&&(e=!1),new Gm(this.runAndExtendWithFaceDetection(),this.input,e)},t.prototype.withFaceExpressions=function(){return new Tm(this.runAndExtendWithFaceDetection(),this.input)},t.prototype.withAgeAndGender=function(){return new Om(this.runAndExtendWithFaceDetection(),this.input)},t}(Hm);function Km(e,t){return void 0===t&&(t=new Kf),new qm(e,t)}function Xm(e,t){return void 0===t&&(t=new Kf),new jm(e,t)}var Qm=function(){function e(e,t){void 0===t&&(t=.6),this._distanceThreshold=t;var n=Array.isArray(e)?e:[e];if(!n.length)throw new Error("FaceRecognizer.constructor - expected atleast one input");var r=1,o=function(){return"person "+r++};this._labeledDescriptors=n.map((function(e){if(e instanceof lp)return e;if(e instanceof Float32Array)return new lp(o(),[e]);if(e.descriptor&&e.descriptor instanceof Float32Array)return new lp(o(),[e.descriptor]);throw new Error("FaceRecognizer.constructor - expected inputs to be of type LabeledFaceDescriptors | WithFaceDescriptor<any> | Float32Array | Array<LabeledFaceDescriptors | WithFaceDescriptor<any> | Float32Array>")}))}return Object.defineProperty(e.prototype,"labeledDescriptors",{get:function(){return this._labeledDescriptors},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"distanceThreshold",{get:function(){return this._distanceThreshold},enumerable:!0,configurable:!0}),e.prototype.computeMeanDistance=function(e,t){return t.map((function(t){return function(e,t){if(e.length!==t.length)throw new Error("euclideanDistance: arr1.length !== arr2.length");var n=Array.from(e),r=Array.from(t);return Math.sqrt(n.map((function(e,t){return e-r[t]})).reduce((function(e,t){return e+Math.pow(t,2)}),0))}(t,e)})).reduce((function(e,t){return e+t}),0)/(t.length||1)},e.prototype.matchDescriptor=function(e){var t=this;return this.labeledDescriptors.map((function(n){var r=n.descriptors,o=n.label;return new up(o,t.computeMeanDistance(e,r))})).reduce((function(e,t){return e.distance<t.distance?e:t}))},e.prototype.findBestMatch=function(e){var t=this.matchDescriptor(e);return t.distance<this.distanceThreshold?t:new up("unknown",t.distance)},e.prototype.toJSON=function(){return{distanceThreshold:this.distanceThreshold,labeledDescriptors:this.labeledDescriptors.map((function(e){return e.toJSON()}))}},e.fromJSON=function(t){return new e(t.labeledDescriptors.map((function(e){return lp.fromJSON(e)})),t.distanceThreshold)},e}();const Ym=e=>new Promise(t=>setTimeout(()=>t(),e)),$m=()=>-1!=window.navigator.userAgent.toLowerCase().indexOf("android"),Jm=async(e,t=160,n=.3)=>await Xm(e,new um({inputSize:t,scoreThreshold:n}));let Zm=[];navigator.mediaDevices.enumerateDevices().then(e=>{for(let t of e)"videoinput"==t.kind&&Zm.push(t.deviceId)});const ev=(e,t,n,r)=>(e.setAttribute("id","video_dom"),e.setAttribute("muted",""),e.setAttribute("autoplay",""),document.body.appendChild(e),document.querySelector("#error_p")&&document.body.removeChild(document.querySelector("#error_p")),new Promise(o=>{const i=()=>navigator.mediaDevices.getUserMedia({video:{width:t,height:n,deviceId:r},audio:!1});Promise.reject().catch(()=>i()).catch(()=>i()).catch(()=>i()).catch(()=>i()).catch(()=>i()).catch(e=>{alert(e);const t=document.createElement("p");t.setAttribute("id","error_p"),t.innerText="カメラにアクセスできません",document.body.appendChild(t)}).then(t=>{e.srcObject=t,e.play(),o()})})),tv=async(e,t,n,r,o)=>{const i=document.createElement("canvas");i.setAttribute("width",e),i.setAttribute("height",t);const a=i.getContext("2d");a.drawImage(o,-n,-r);const s=a.getImageData(0,0,e,t).data;let u,c,l;for(let n=0;n<t;n+=10)for(let t=0;t<e;t+=10)u=s[n*(4*e)+4*t],c=s[n*(4*e)+4*t+1],l=s[n*(4*e)+4*t+2],a.fillStyle=`rgb(${u}, ${c}, ${l})`,a.fillRect(t,n,10,10);return i},nv=async(e,t,n,r,o)=>{o&&n.clearRect(0,0,innerWidth,innerHeight);for(let o of t){let t=Math.floor(o.box.topLeft.x),i=Math.floor(o.box.topLeft.y),a=Math.floor(o.box.width),s=Math.floor(o.box.height);switch(r){case"mosic":let r=await tv(a,s,t,i,e);n.drawImage(r,t,i);break;case"line":n.strokeRect(t,i,a,s)}}},rv=(e,t,n)=>{let r=document.querySelector("#menu");document.body.removeChild(r),document.body.removeChild(e),document.body.removeChild(t);let o=document.createElement("img");o.setAttribute("src","./img/button.png"),o.setAttribute("class","shutter_style"),o.setAttribute("id","recog"),innerWidth>innerHeight&&o.setAttribute("style","left: auto; right: 16px; top: 50%; transform: translateY(-50%);"),document.body.appendChild(o);let i=document.createElement("p");i.innerText="検出する顔を登録します\n顔を写してください",i.setAttribute("style","position: absolute; top: 10%; left: 50%; transform: translateX(-50%); color: white; text-align: center;"),document.body.appendChild(i),o.addEventListener("click",async()=>{const a=document.createElement("canvas");a.setAttribute("height",innerHeight),a.setAttribute("width",innerWidth);if(a.getContext("2d").drawImage(n,0,0),!await Km(a,new um({inputSize:608,scoreThreshold:.3})).withFaceLandmarks().withFaceDescriptor()){let e=document.createElement("p");return e.innerText="検出できませんでした",e.setAttribute("style","position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%); z-index: 2; color: white;"),document.body.appendChild(e),await Ym(3e3),void document.bode.removeChild(e)}let s=a.toDataURL("image/png");if(null==localStorage.getItem("myFace")){let e={0:s};localStorage.setItem("myFace",JSON.stringify(e))}else{let n,a=JSON.parse(localStorage.getItem("myFace")),u={};for(n=0;n<Object.keys(a).length;n++)u[n]=a[n];u[n]=s;try{localStorage.setItem("myFace",JSON.stringify(u))}catch(n){return u=document.createElement("p"),u.innerText="検出画像が最大です、追加できません",u.setAttribute("style","position: absolute; top: 50%; left; 50%; transform: translate(-50%, -50%); z-index: 2; color: white"),document.body.appendChild(u),await Ym(3e3),document.body.removeChild(u),document.body.removeChild(o),document.body.removeChild(i),document.body.appendChild(e),document.body.appendChild(t),void document.body.appendChild(r)}}let u=document.createElement("p");u.innerText="保存しました",u.setAttribute("style","position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%); z-index: 2; color: white"),document.body.appendChild(u),await Ym(3e3),document.body.removeChild(u),document.body.removeChild(o),document.body.removeChild(i),document.body.appendChild(e),document.body.appendChild(t),document.body.appendChild(r)})};let ov,iv=.3;new Promise(async e=>{n(5),n(7),n(9),n(11),await Ym(1e3),e()}).then(()=>{ov=new B(document.querySelector("#score_slider")),ov.listen("MDCSlider:input",()=>{iv=.1*ov.value})});let av=!1;const sv=document.querySelector("#triangle");document.querySelectorAll(".menu_line").forEach(e=>e.setAttribute("style","visibility: hidden;")),document.querySelector("#slide_button").addEventListener("click",()=>{av?(document.querySelector("#menu").setAttribute("style","height: 0; padding: 0;"),document.querySelectorAll(".menu_line").forEach(e=>e.setAttribute("style","visibility: hidden;")),sv.removeAttribute("style")):(document.querySelector("#menu").removeAttribute("style"),document.querySelectorAll(".menu_line").forEach(e=>e.removeAttribute("style")),sv.setAttribute("style","top: auto; bottom: 5px; transform: rotate(180deg) translateX(50%);")),av=!av});const uv=document.querySelector("#shutter"),cv=document.querySelector("#switcher");innerWidth>innerHeight&&(uv.setAttribute("style","left: auto; right: 16px; top: 50%; transform: translateY(-50%);"),cv.setAttribute("style","left: auto; right: 16px")),console.log(Zm);const lv=document.querySelector("#overlay_canvas");lv.setAttribute("width",innerWidth),lv.setAttribute("height",innerHeight);const dv=lv.getContext("2d"),hv=document.createElement("video");let pv=0,fv=innerWidth,mv=innerHeight;$m()&&innerWidth<innerHeight&&(fv=innerHeight,mv=innerWidth);let vv=!0;Promise.all([ev(hv,fv,mv,Zm[pv]),Im.tinyFaceDetector.load("../models"),Im.faceLandmark68Net.load("../models"),Im.faceRecognitionNet.load("../models"),Im.ssdMobilenetv1.load("../models")]).then(async()=>{let e;for(await Ym(1e3);vv;)e=await Jm(hv,160,.3),await nv(hv,e,dv,"line",!0),await Ym(1)});const gv=document.querySelector("#checkbox-1"),bv=document.querySelector("#checkbox-2"),Av=document.querySelector("#checkbox-3");uv.addEventListener("click",async()=>{new Audio("./audio/camera-shutter1.mp3").play(),hv.pause();let e=document.createElement("canvas");e.setAttribute("height",innerHeight),e.setAttribute("width",innerWidth);let t=e.getContext("2d");t.drawImage(hv,0,0);let n=document.createElement("a"),r=new Date,o=Av.checked?608:160;if(gv.checked&&(n.href=e.toDataURL("image/png"),n.download=r.getTime()+"_nomosaic.png",n.click()),bv.checked){let i=JSON.parse(localStorage.getItem("myFace"));const a=[];for(let e=0;e<Object.keys(i).length;e++){const t=await Lp(i[e]),n=await Km(t,new um({inputSize:o,scoreThreshold:.3})).withFaceLandmarks().withFaceDescriptor();a.push(n.descriptor)}const s=new lp("myFace",a);let u=await Xm(e,new um({inputSize:o,scoreThreshold:iv})).withFaceLandmarks().withFaceDescriptors(),c=new Qm(s,.3);return await(async(e,t,n,r)=>{for(let o of t){if("unknown"==r.findBestMatch(o.descriptor).label){let t=Math.floor(o.detection.box.topLeft.x),r=Math.floor(o.detection.box.topLeft.y),i=Math.floor(o.detection.box.width),a=Math.floor(o.detection.box.height),s=await tv(i,a,t,r,e);n.drawImage(s,t,r)}}})(e,u,t,c),e.setAttribute("style","position: absolute; top: 0; left: 0; transition: 1s all ease;"),document.body.appendChild(e),await Ym(1e3),hv.play(),e.setAttribute("style",`position: absolute; top: ${innerHeight+10}px; left: 0; transition: 1s all ease;`),n.href=e.toDataURL("image/png"),n.download=r.getTime()+".png",n.click(),await Ym(3e3),void document.body.removeChild(e)}{let i=await Xm(e,new um({inputSize:o,scoreThreshold:iv}));await nv(e,i,t,"mosic",!1),e.setAttribute("style","position: absolute; top: 0; left: 0; transition: 1s all ease"),document.body.appendChild(e),await Ym(1e3),hv.play(),e.setAttribute("style",`position: absolute; top: ${innerHeight+10}px; left: 0; transition: 1s all ease`),n.href=e.toDataURL("image/png"),n.download=r.getTime()+".png",n.click(),await Ym(3e3),document.body.removeChild(e)}}),cv.addEventListener("click",async()=>{let e;for(vv=!1,hv.pause(),pv++,pv>=Zm.length&&(pv=0),await Ym(1e3),document.body.removeChild(hv),await ev(hv,fv,mv,Zm[pv]),await Ym(1e3),vv=!0;vv;)e=await Jm(hv,160,iv),await nv(hv,e,dv,"line",!0),await Ym(1)}),window.addEventListener("resize",async()=>{let e;for(vv=!1,hv.pause(),fv=innerWidth,mv=innerHeight,$m()&&innerWidth<innerHeight&&(fv=innerHeight,mv=innerWidth),innerWidth>innerHeight?(uv.setAttribute("style","left: auto; right: 16px; top: 50%; transform: translateY(-50%);"),cv.setAttribute("style","left: auto; right: 16px")):(uv.removeAttribute("style"),cv.removeAttribute("style")),lv.setAttribute("width",innerWidth),lv.setAttribute("height",innerHeight),await Ym(1e3),document.body.removeChild(hv),await ev(hv,fv,mv,Zm[pv]),await Ym(1e3),vv=!0;vv;)e=await Jm(hv,160,iv),await nv(hv,e,dv,"line",!0),await Ym(1)}),bv.addEventListener("input",()=>{bv.checked&&rv(cv,uv,hv)}),document.querySelector("#add_face").addEventListener("click",()=>{rv(cv,uv,hv)}),document.querySelector("#remove_face").addEventListener("click",()=>{(()=>{try{localStorage.removeItem("myFace")}catch(e){console.error(e)}})()})}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,